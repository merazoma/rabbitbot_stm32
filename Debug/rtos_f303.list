
rtos_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800f238  0800f238  0001f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f944  0800f944  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f944  0800f944  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f944  0800f944  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800f944  0800f944  0001f944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f958  0800f958  0001f958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800f95c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002588  200000a8  0800fa04  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002630  0800fa04  00022630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c3b  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065a3  00000000  00000000  00051d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  000582b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  00059ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022412  00000000  00000000  0005b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002486e  00000000  00000000  0007dce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0324  00000000  00000000  000a2550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162874  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007980  00000000  00000000  001628c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f220 	.word	0x0800f220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800f220 	.word	0x0800f220

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2f>:
 8000558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800055c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000560:	bf24      	itt	cs
 8000562:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000566:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800056a:	d90d      	bls.n	8000588 <__aeabi_d2f+0x30>
 800056c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000570:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000574:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000578:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800057c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800058c:	d121      	bne.n	80005d2 <__aeabi_d2f+0x7a>
 800058e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000592:	bfbc      	itt	lt
 8000594:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000598:	4770      	bxlt	lr
 800059a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005a2:	f1c2 0218 	rsb	r2, r2, #24
 80005a6:	f1c2 0c20 	rsb	ip, r2, #32
 80005aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	bf18      	it	ne
 80005b4:	f040 0001 	orrne.w	r0, r0, #1
 80005b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c4:	ea40 000c 	orr.w	r0, r0, ip
 80005c8:	fa23 f302 	lsr.w	r3, r3, r2
 80005cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005d0:	e7cc      	b.n	800056c <__aeabi_d2f+0x14>
 80005d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d6:	d107      	bne.n	80005e8 <__aeabi_d2f+0x90>
 80005d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005dc:	bf1e      	ittt	ne
 80005de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e6:	4770      	bxne	lr
 80005e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xdc>)
 800061c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000624:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <MX_ADC1_Init+0xdc>)
 800062c:	2210      	movs	r2, #16
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000636:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000638:	2201      	movs	r2, #1
 800063a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xdc>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xdc>)
 800064c:	2201      	movs	r2, #1
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000658:	2201      	movs	r2, #1
 800065a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xdc>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000666:	2204      	movs	r2, #4
 8000668:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_ADC1_Init+0xdc>)
 800066c:	2200      	movs	r2, #0
 800066e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000672:	2200      	movs	r2, #0
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000678:	f000 fe3a 	bl	80012f0 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000682:	f009 fdcb 	bl	800a21c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <MX_ADC1_Init+0xdc>)
 8000692:	f001 fc75 	bl	8001f80 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800069c:	f009 fdbe 	bl	800a21c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80006ac:	2305      	movs	r3, #5
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_ADC1_Init+0xdc>)
 80006be:	f001 f99d 	bl	80019fc <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80006c8:	f009 fda8 	bl	800a21c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200022ec 	.word	0x200022ec

080006d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006f8:	d124      	bne.n	8000744 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x74>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <HAL_ADC_MspInit+0x74>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_ADC_MspInit+0x74>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_ADC_MspInit+0x74>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <HAL_ADC_MspInit+0x74>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HAL_ADC_MspInit+0x74>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f002 f892 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_DMA_Init+0x48>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MX_DMA_Init+0x48>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_DMA_Init+0x48>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 8, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2108      	movs	r1, #8
 8000772:	200e      	movs	r0, #14
 8000774:	f001 fe40 	bl	80023f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000778:	200e      	movs	r0, #14
 800077a:	f001 fe59 	bl	8002430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 8, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2108      	movs	r1, #8
 8000782:	200f      	movs	r0, #15
 8000784:	f001 fe38 	bl	80023f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000788:	200f      	movs	r0, #15
 800078a:	f001 fe51 	bl	8002430 <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a38      	ldr	r2, [pc, #224]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a32      	ldr	r2, [pc, #200]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_GPIO_Init+0xfc>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|IN2_LEFT_Pin|MOTOR_STBY_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f241 4114 	movw	r1, #5140	; 0x1414
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f002 f9a2 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2103      	movs	r1, #3
 800080c:	4823      	ldr	r0, [pc, #140]	; (800089c <MX_GPIO_Init+0x100>)
 800080e:	f002 f99d 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000812:	2304      	movs	r3, #4
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	2301      	movs	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f002 f81c 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|MOTOR_STBY_Pin|IN1_RIGHT_Pin;
 8000830:	f241 4310 	movw	r3, #5136	; 0x1410
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f002 f80c 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000850:	2303      	movs	r3, #3
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_GPIO_Init+0x100>)
 8000868:	f001 fffe 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800086c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087e:	2307      	movs	r3, #7
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 ffec 	bl	8002868 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_SPI1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_SPI1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI1_Init+0x74>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_SPI1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI1_Init+0x74>)
 80008d6:	2220      	movs	r2, #32
 80008d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_SPI1_Init+0x74>)
 8000900:	f003 faae 	bl	8003e60 <HAL_SPI_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f009 fc87 	bl	800a21c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000233c 	.word	0x2000233c
 8000918:	40013000 	.word	0x40013000

0800091c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a29      	ldr	r2, [pc, #164]	; (80009e0 <HAL_SPI_MspInit+0xc4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d14c      	bne.n	80009d8 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 8000944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 8000974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_SPI_MspInit+0xc8>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000986:	23c0      	movs	r3, #192	; 0xc0
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000996:	2305      	movs	r3, #5
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f001 ff60 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009a8:	2308      	movs	r3, #8
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b8:	2305      	movs	r3, #5
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <HAL_SPI_MspInit+0xcc>)
 80009c4:	f001 ff50 	bl	8002868 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2105      	movs	r1, #5
 80009cc:	2023      	movs	r0, #35	; 0x23
 80009ce:	f001 fd13 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009d2:	2023      	movs	r0, #35	; 0x23
 80009d4:	f001 fd2c 	bl	8002430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40013000 	.word	0x40013000
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f001 fce5 	bl	80023f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
//  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority ,0);

  /* Enable the TIM15 global Interrupt */
//  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_InitTick+0x8c>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_InitTick+0x8c>)
 8000a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_InitTick+0x8c>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 f9c4 	bl	8003dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a74:	f003 f9a0 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8000a78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_InitTick+0x90>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_InitTick+0x94>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_InitTick+0x98>)
 8000a8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_InitTick+0x94>)
 8000a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_InitTick+0x94>)
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_InitTick+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_InitTick+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim15) == HAL_OK)
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <HAL_InitTick+0x94>)
 8000aaa:	f003 ff0b 	bl	80048c4 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim15);
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <HAL_InitTick+0x94>)
 8000ab6:	f003 ff5d 	bl	8004974 <HAL_TIM_Base_Start_IT>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3730      	adds	r7, #48	; 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	200023a0 	.word	0x200023a0
 8000ad4:	40014000 	.word	0x40014000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA1_Channel4_IRQHandler+0x10>)
 8000b0a:	f001 fdbc 	bl	8002686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200024d0 	.word	0x200024d0

08000b18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <DMA1_Channel5_IRQHandler+0x10>)
 8000b1e:	f001 fdb2 	bl	8002686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20002514 	.word	0x20002514

08000b2c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000b32:	f004 f9fd 	bl	8004f30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000b38:	f004 f9fa 	bl	8004f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20002438 	.word	0x20002438
 8000b44:	200023a0 	.word	0x200023a0

08000b48 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b4e:	f004 f9ef 	bl	8004f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20002438 	.word	0x20002438

08000b5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <SPI1_IRQHandler+0x10>)
 8000b62:	f003 fc33 	bl	80043cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000233c 	.word	0x2000233c

08000b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART1_IRQHandler+0x10>)
 8000b76:	f005 fa6d 	bl	8006054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20002558 	.word	0x20002558

08000b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_kill>:

int _kill(int pid, int sig)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b9e:	f00e f9b5 	bl	800ef0c <__errno>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2216      	movs	r2, #22
 8000ba6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_exit>:

void _exit (int status)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ffe7 	bl	8000b94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bc6:	e7fe      	b.n	8000bc6 <_exit+0x12>

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f00e f988 	bl	800ef0c <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20003000 	.word	0x20003000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200000c4 	.word	0x200000c4
 8000c30:	20002630 	.word	0x20002630

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	; 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00e f990 	bl	800ef8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c78:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <MX_TIM1_Init+0xb0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000cce:	f003 fffb 	bl	8004cc8 <HAL_TIM_Encoder_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000cd8:	f009 faa0 	bl	800a21c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM1_Init+0xac>)
 8000cee:	f005 f81b 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000cf8:	f009 fa90 	bl	800a21c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20002438 	.word	0x20002438
 8000d08:	40012c00 	.word	0x40012c00

08000d0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3e:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d66:	4831      	ldr	r0, [pc, #196]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d68:	f003 fdac 	bl	80048c4 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f009 fa53 	bl	800a21c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d80:	4619      	mov	r1, r3
 8000d82:	482a      	ldr	r0, [pc, #168]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d84:	f004 fb04 	bl	8005390 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d8e:	f009 fa45 	bl	800a21c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000d94:	f003 fe4a 	bl	8004a2c <HAL_TIM_PWM_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d9e:	f009 fa3d 	bl	800a21c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	481e      	ldr	r0, [pc, #120]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000db2:	f004 ffb9 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dbc:	f009 fa2e 	bl	800a21c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc0:	2360      	movs	r3, #96	; 0x60
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000dd8:	f004 f9ca 	bl	8005170 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000de2:	f009 fa1b 	bl	800a21c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	699a      	ldr	r2, [r3, #24]
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0208 	bic.w	r2, r2, #8
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000dfe:	f004 f9b7 	bl	8005170 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000e08:	f009 fa08 	bl	800a21c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	699a      	ldr	r2, [r3, #24]
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM2_Init+0x120>)
 8000e1e:	f000 f909 	bl	8001034 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3738      	adds	r7, #56	; 0x38
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20002484 	.word	0x20002484

08000e30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2224      	movs	r2, #36	; 0x24
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00e f8a4 	bl	800ef8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_TIM3_Init+0xa8>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e74:	2303      	movs	r3, #3
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000ea0:	f003 ff12 	bl	8004cc8 <HAL_TIM_Encoder_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000eaa:	f009 f9b7 	bl	800a21c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_TIM3_Init+0xa4>)
 8000ebc:	f004 ff34 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000ec6:	f009 f9a9 	bl	800a21c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	; 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200023ec 	.word	0x200023ec
 8000ed8:	40000400 	.word	0x40000400

08000edc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a3b      	ldr	r2, [pc, #236]	; (8000fe8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d142      	bne.n	8000f84 <HAL_TIM_Encoder_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a34      	ldr	r2, [pc, #208]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f40:	2306      	movs	r3, #6
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 fc8b 	bl	8002868 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2018      	movs	r0, #24
 8000f58:	f001 fa4e 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f5c:	2018      	movs	r0, #24
 8000f5e:	f001 fa67 	bl	8002430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2019      	movs	r0, #25
 8000f68:	f001 fa46 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f6c:	2019      	movs	r0, #25
 8000f6e:	f001 fa5f 	bl	8002430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	201a      	movs	r0, #26
 8000f78:	f001 fa3e 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f7c:	201a      	movs	r0, #26
 8000f7e:	f001 fa57 	bl	8002430 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f82:	e02c      	b.n	8000fde <HAL_TIM_Encoder_MspInit+0x102>
  else if(tim_encoderHandle->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_TIM_Encoder_MspInit+0x114>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d127      	bne.n	8000fde <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_TIM_Encoder_MspInit+0x110>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fbe:	2330      	movs	r3, #48	; 0x30
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8000fda:	f001 fc45 	bl	8002868 <HAL_GPIO_Init>
}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012c00 	.word	0x40012c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d10b      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_TIM_Base_MspInit+0x38>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001054:	d11c      	bne.n	8001090 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_TIM_MspPostInit+0x64>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|PWM_RIGHT_Pin;
 800106e:	2322      	movs	r3, #34	; 0x22
 8001070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 fbec 	bl	8002868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000

0800109c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <MX_USART1_UART_Init+0x64>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010a8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80010ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010da:	2220      	movs	r2, #32
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART1_UART_Init+0x60>)
 80010e8:	f004 feaa 	bl	8005e40 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80010f2:	f009 f893 	bl	800a21c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20002558 	.word	0x20002558
 8001100:	40013800 	.word	0x40013800

08001104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a42      	ldr	r2, [pc, #264]	; (800122c <HAL_UART_MspInit+0x128>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d17d      	bne.n	8001222 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	4b42      	ldr	r3, [pc, #264]	; (8001230 <HAL_UART_MspInit+0x12c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a41      	ldr	r2, [pc, #260]	; (8001230 <HAL_UART_MspInit+0x12c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <HAL_UART_MspInit+0x12c>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <HAL_UART_MspInit+0x12c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <HAL_UART_MspInit+0x12c>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b39      	ldr	r3, [pc, #228]	; (8001230 <HAL_UART_MspInit+0x12c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001156:	23c0      	movs	r3, #192	; 0xc0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001166:	2307      	movs	r3, #7
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4830      	ldr	r0, [pc, #192]	; (8001234 <HAL_UART_MspInit+0x130>)
 8001172:	f001 fb79 	bl	8002868 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_UART_MspInit+0x134>)
 8001178:	4a30      	ldr	r2, [pc, #192]	; (800123c <HAL_UART_MspInit+0x138>)
 800117a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_UART_MspInit+0x134>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_UART_MspInit+0x134>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_UART_MspInit+0x134>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_UART_MspInit+0x134>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_UART_MspInit+0x134>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800119a:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_UART_MspInit+0x134>)
 800119c:	2220      	movs	r2, #32
 800119e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_UART_MspInit+0x134>)
 80011a2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011a8:	4823      	ldr	r0, [pc, #140]	; (8001238 <HAL_UART_MspInit+0x134>)
 80011aa:	f001 f94f 	bl	800244c <HAL_DMA_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80011b4:	f009 f832 	bl	800a21c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_UART_MspInit+0x134>)
 80011bc:	671a      	str	r2, [r3, #112]	; 0x70
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_UART_MspInit+0x134>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_UART_MspInit+0x140>)
 80011c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011cc:	2210      	movs	r2, #16
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x13c>)
 80011f8:	f001 f928 	bl	800244c <HAL_DMA_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8001202:	f009 f80b 	bl	800a21c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_UART_MspInit+0x13c>)
 800120a:	66da      	str	r2, [r3, #108]	; 0x6c
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <HAL_UART_MspInit+0x13c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2108      	movs	r1, #8
 8001216:	2025      	movs	r0, #37	; 0x25
 8001218:	f001 f8ee 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121c:	2025      	movs	r0, #37	; 0x25
 800121e:	f001 f907 	bl	8002430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40013800 	.word	0x40013800
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400
 8001238:	20002514 	.word	0x20002514
 800123c:	40020058 	.word	0x40020058
 8001240:	200024d0 	.word	0x200024d0
 8001244:	40020044 	.word	0x40020044

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopForever+0xe>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopForever+0x16>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001272:	f7ff fcdf 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f00d fe4f 	bl	800ef18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f008 ff55 	bl	800a128 <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001280:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800128c:	0800f95c 	.word	0x0800f95c
  ldr r2, =_sbss
 8001290:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001294:	20002630 	.word	0x20002630

08001298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_2_IRQHandler>
	...

0800129c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x28>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x28>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f001 f898 	bl	80023e2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fbc2 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fb98 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	200025dc 	.word	0x200025dc

080012f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09a      	sub	sp, #104	; 0x68
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e172      	b.n	80015f6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d176      	bne.n	8001410 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2b00      	cmp	r3, #0
 8001328:	d152      	bne.n	80013d0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff f9c7 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d13b      	bne.n	80013d0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 ff35 	bl	80021c8 <ADC_Disable>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d12f      	bne.n	80013d0 <HAL_ADC_Init+0xe0>
 8001370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001374:	2b00      	cmp	r3, #0
 8001376:	d12b      	bne.n	80013d0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001380:	f023 0302 	bic.w	r3, r3, #2
 8001384:	f043 0202 	orr.w	r2, r3, #2
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800139a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013aa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ac:	4b94      	ldr	r3, [pc, #592]	; (8001600 <HAL_ADC_Init+0x310>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a94      	ldr	r2, [pc, #592]	; (8001604 <HAL_ADC_Init+0x314>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9a      	lsrs	r2, r3, #18
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013c2:	e002      	b.n	80013ca <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f9      	bne.n	80013c4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ec:	d110      	bne.n	8001410 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f023 0312 	bic.w	r3, r3, #18
 80013f6:	f043 0210 	orr.w	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 80df 	bne.w	80015dc <HAL_ADC_Init+0x2ec>
 800141e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 80da 	bne.w	80015dc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 80d2 	bne.w	80015dc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001448:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <HAL_ADC_Init+0x318>)
 800144a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001454:	d102      	bne.n	800145c <HAL_ADC_Init+0x16c>
 8001456:	4b6d      	ldr	r3, [pc, #436]	; (800160c <HAL_ADC_Init+0x31c>)
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e002      	b.n	8001462 <HAL_ADC_Init+0x172>
 800145c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001460:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_ADC_Init+0x192>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x192>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_ADC_Init+0x194>
 8001482:	2300      	movs	r3, #0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11c      	bne.n	80014c2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001488:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_ADC_Init+0x1ba>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x1ba>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_ADC_Init+0x1bc>
 80014aa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d108      	bne.n	80014c2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	431a      	orrs	r2, r3
 80014be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7e5b      	ldrb	r3, [r3, #25]
 80014c6:	035b      	lsls	r3, r3, #13
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014cc:	2a01      	cmp	r2, #1
 80014ce:	d002      	beq.n	80014d6 <HAL_ADC_Init+0x1e6>
 80014d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d4:	e000      	b.n	80014d8 <HAL_ADC_Init+0x1e8>
 80014d6:	2200      	movs	r2, #0
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014e8:	4313      	orrs	r3, r2
 80014ea:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11b      	bne.n	800152e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7e5b      	ldrb	r3, [r3, #25]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	3b01      	subs	r3, #1
 8001504:	045a      	lsls	r2, r3, #17
 8001506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001508:	4313      	orrs	r3, r2
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	663b      	str	r3, [r7, #96]	; 0x60
 8001510:	e00d      	b.n	800152e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800151a:	f043 0220 	orr.w	r2, r3, #32
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b01      	cmp	r3, #1
 8001534:	d007      	beq.n	8001546 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	4313      	orrs	r3, r2
 8001540:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001542:	4313      	orrs	r3, r2
 8001544:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	d114      	bne.n	800157e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001562:	f023 0302 	bic.w	r3, r3, #2
 8001566:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e1b      	ldrb	r3, [r3, #24]
 800156c:	039a      	lsls	r2, r3, #14
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4313      	orrs	r3, r2
 8001578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800157a:	4313      	orrs	r3, r2
 800157c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_ADC_Init+0x320>)
 8001586:	4013      	ands	r3, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800158e:	430b      	orrs	r3, r1
 8001590:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10c      	bne.n	80015b4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f023 010f 	bic.w	r1, r3, #15
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
 80015b2:	e007      	b.n	80015c4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020f 	bic.w	r2, r2, #15
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
 80015da:	e00a      	b.n	80015f2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f023 0312 	bic.w	r3, r3, #18
 80015e4:	f043 0210 	orr.w	r2, r3, #16
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3768      	adds	r7, #104	; 0x68
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83
 8001608:	50000300 	.word	0x50000300
 800160c:	50000100 	.word	0x50000100
 8001610:	fff0c007 	.word	0xfff0c007

08001614 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 809c 	bne.w	8001768 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_ADC_Start+0x2a>
 800163a:	2302      	movs	r3, #2
 800163c:	e097      	b.n	800176e <HAL_ADC_Start+0x15a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fd60 	bl	800210c <ADC_Enable>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 8083 	bne.w	800175e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_ADC_Start+0x164>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Start+0x6e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001680:	d115      	bne.n	80016ae <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d027      	beq.n	80016ec <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016ac:	e01e      	b.n	80016ec <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c2:	d004      	beq.n	80016ce <HAL_ADC_Start+0xba>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2c      	ldr	r2, [pc, #176]	; (800177c <HAL_ADC_Start+0x168>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10e      	bne.n	80016ec <HAL_ADC_Start+0xd8>
 80016ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f8:	d106      	bne.n	8001708 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f023 0206 	bic.w	r2, r3, #6
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	645a      	str	r2, [r3, #68]	; 0x44
 8001706:	e002      	b.n	800170e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	221c      	movs	r2, #28
 800171c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_ADC_Start+0x164>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <HAL_ADC_Start+0x138>
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_ADC_Start+0x164>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2b05      	cmp	r3, #5
 8001734:	d00a      	beq.n	800174c <HAL_ADC_Start+0x138>
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_ADC_Start+0x164>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	2b09      	cmp	r3, #9
 8001740:	d004      	beq.n	800174c <HAL_ADC_Start+0x138>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800174a:	d10f      	bne.n	800176c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0204 	orr.w	r2, r2, #4
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	e006      	b.n	800176c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001766:	e001      	b.n	800176c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	50000300 	.word	0x50000300
 800177c:	50000100 	.word	0x50000100

08001780 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d102      	bne.n	800179c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001796:	2308      	movs	r3, #8
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e02e      	b.n	80017fa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179c:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <HAL_ADC_PollForConversion+0x188>)
 800179e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d112      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d11d      	bne.n	80017f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f043 0220 	orr.w	r2, r3, #32
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e096      	b.n	8001900 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0220 	orr.w	r2, r3, #32
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e084      	b.n	8001900 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80017f6:	230c      	movs	r3, #12
 80017f8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017fa:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_ADC_PollForConversion+0x188>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_ADC_PollForConversion+0x90>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800180e:	d104      	bne.n	800181a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	e003      	b.n	8001822 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800181a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001822:	f008 fbed 	bl	800a000 <HAL_GetTick>
 8001826:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001828:	e01a      	b.n	8001860 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d016      	beq.n	8001860 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_ADC_PollForConversion+0xc8>
 8001838:	f008 fbe2 	bl	800a000 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d20b      	bcs.n	8001860 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f043 0204 	orr.w	r2, r3, #4
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e04f      	b.n	8001900 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0dd      	beq.n	800182a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001884:	2b00      	cmp	r3, #0
 8001886:	d131      	bne.n	80018ec <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800188e:	2b00      	cmp	r3, #0
 8001890:	d12c      	bne.n	80018ec <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b08      	cmp	r3, #8
 800189e:	d125      	bne.n	80018ec <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d112      	bne.n	80018d4 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d112      	bne.n	80018ec <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	e00b      	b.n	80018ec <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	50000300 	.word	0x50000300

0800190c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADCEx_Calibration_Start+0x1c>
 800193e:	2302      	movs	r3, #2
 8001940:	e057      	b.n	80019f2 <HAL_ADCEx_Calibration_Start+0xcc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fc3c 	bl	80021c8 <ADC_Disable>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d146      	bne.n	80019e8 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800196e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001984:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001994:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001996:	f008 fb33 	bl	800a000 <HAL_GetTick>
 800199a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800199c:	e014      	b.n	80019c8 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800199e:	f008 fb2f 	bl	800a000 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b0a      	cmp	r3, #10
 80019aa:	d90d      	bls.n	80019c8 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f023 0312 	bic.w	r3, r3, #18
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e014      	b.n	80019f2 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d6:	d0e2      	beq.n	800199e <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f023 0303 	bic.w	r3, r3, #3
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b09b      	sub	sp, #108	; 0x6c
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x22>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e2a5      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x56e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 8289 	bne.w	8001f48 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d81c      	bhi.n	8001a78 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	461a      	mov	r2, r3
 8001a52:	231f      	movs	r3, #31
 8001a54:	4093      	lsls	r3, r2
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4019      	ands	r1, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
 8001a76:	e063      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d81e      	bhi.n	8001abe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	3b1e      	subs	r3, #30
 8001a94:	221f      	movs	r2, #31
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	4019      	ands	r1, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	3b1e      	subs	r3, #30
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
 8001abc:	e040      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b0e      	cmp	r3, #14
 8001ac4:	d81e      	bhi.n	8001b04 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	3b3c      	subs	r3, #60	; 0x3c
 8001ada:	221f      	movs	r2, #31
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4019      	ands	r1, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	3b3c      	subs	r3, #60	; 0x3c
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
 8001b02:	e01d      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	3b5a      	subs	r3, #90	; 0x5a
 8001b18:	221f      	movs	r2, #31
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4019      	ands	r1, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	3b5a      	subs	r3, #90	; 0x5a
 8001b34:	fa00 f203 	lsl.w	r2, r0, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 80e5 	bne.w	8001d1a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d91c      	bls.n	8001b92 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6999      	ldr	r1, [r3, #24]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3b1e      	subs	r3, #30
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4019      	ands	r1, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6898      	ldr	r0, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	3b1e      	subs	r3, #30
 8001b84:	fa00 f203 	lsl.w	r2, r0, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	e019      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6959      	ldr	r1, [r3, #20]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4019      	ands	r1, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6898      	ldr	r0, [r3, #8]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d84f      	bhi.n	8001c88 <HAL_ADC_ConfigChannel+0x28c>
 8001be8:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001c01 	.word	0x08001c01
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	08001c67 	.word	0x08001c67
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c06:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <HAL_ADC_ConfigChannel+0x484>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	0691      	lsls	r1, r2, #26
 8001c10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c12:	430a      	orrs	r2, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c1e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c20:	e07e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c28:	4b95      	ldr	r3, [pc, #596]	; (8001e80 <HAL_ADC_ConfigChannel+0x484>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	0691      	lsls	r1, r2, #26
 8001c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c34:	430a      	orrs	r2, r1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c40:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c42:	e06d      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <HAL_ADC_ConfigChannel+0x484>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	0691      	lsls	r1, r2, #26
 8001c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c56:	430a      	orrs	r2, r1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c62:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c64:	e05c      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_ADC_ConfigChannel+0x484>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	0691      	lsls	r1, r2, #26
 8001c76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c84:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c86:	e04b      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	069b      	lsls	r3, r3, #26
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d107      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001caa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	069b      	lsls	r3, r3, #26
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d107      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	069b      	lsls	r3, r3, #26
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d16:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d18:	e001      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d1e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x344>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x344>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x346>
 8001d40:	2300      	movs	r3, #0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 810b 	bne.w	8001f5e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00f      	beq.n	8001d70 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	400a      	ands	r2, r1
 8001d6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d6e:	e049      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	d91c      	bls.n	8001dcc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6999      	ldr	r1, [r3, #24]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	3b1b      	subs	r3, #27
 8001da4:	2207      	movs	r2, #7
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	4019      	ands	r1, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6898      	ldr	r0, [r3, #8]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b1b      	subs	r3, #27
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	619a      	str	r2, [r3, #24]
 8001dca:	e01b      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6959      	ldr	r1, [r3, #20]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4019      	ands	r1, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_ADC_ConfigChannel+0x488>)
 8001e06:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d015      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e20:	2b11      	cmp	r3, #17
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	f040 8092 	bne.w	8001f5e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 808b 	bne.w	8001f5e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e50:	d102      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x45c>
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_ADC_ConfigChannel+0x48c>)
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e002      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x462>
 8001e58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e5c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d10f      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x490>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d108      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x490>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e007      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x492>
 8001e7e:	bf00      	nop
 8001e80:	83fff000 	.word	0x83fff000
 8001e84:	50000300 	.word	0x50000300
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d150      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x4b8>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x4b8>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4ba>
 8001eb4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d13c      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d11d      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x502>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eca:	d118      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_ADC_ConfigChannel+0x57c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <HAL_ADC_ConfigChannel+0x580>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9a      	lsrs	r2, r3, #18
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eee:	e002      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001efc:	e02e      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d10b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x522>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0e:	d106      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f1c:	e01e      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d11a      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f30:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f32:	e013      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f46:	e00a      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f5c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	376c      	adds	r7, #108	; 0x6c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	431bde83 	.word	0x431bde83

08001f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b099      	sub	sp, #100	; 0x64
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f98:	d102      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001fa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fa4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0a2      	b.n	80020f6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e09b      	b.n	80020f6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d17f      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d179      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe0:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001fe2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d040      	beq.n	800206e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffe:	035b      	lsls	r3, r3, #13
 8002000:	430b      	orrs	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002006:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d15c      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800204a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d14b      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	6811      	ldr	r1, [r2, #0]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	6892      	ldr	r2, [r2, #8]
 8002064:	430a      	orrs	r2, r1
 8002066:	431a      	orrs	r2, r3
 8002068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800206a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800206c:	e03c      	b.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800206e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002078:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d108      	bne.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80020bc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80020c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ca:	f023 030f 	bic.w	r3, r3, #15
 80020ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020d0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020d2:	e009      	b.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020e6:	e000      	b.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020e8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80020f6:	4618      	mov	r0, r3
 80020f8:	3764      	adds	r7, #100	; 0x64
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	50000100 	.word	0x50000100
 8002108:	50000300 	.word	0x50000300

0800210c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <ADC_Enable+0x2c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <ADC_Enable+0x2c>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <ADC_Enable+0x2e>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d13c      	bne.n	80021b8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <ADC_Enable+0xb8>)
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e028      	b.n	80021ba <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002178:	f007 ff42 	bl	800a000 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800217e:	e014      	b.n	80021aa <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002180:	f007 ff3e 	bl	800a000 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d90d      	bls.n	80021aa <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e007      	b.n	80021ba <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d1e3      	bne.n	8002180 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	8000003f 	.word	0x8000003f

080021c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <ADC_Disable+0x2c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <ADC_Disable+0x2c>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <ADC_Disable+0x2e>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d040      	beq.n	800227c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030d 	and.w	r3, r3, #13
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10f      	bne.n	8002228 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0202 	orr.w	r2, r2, #2
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2203      	movs	r2, #3
 800221e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002220:	f007 feee 	bl	800a000 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002226:	e022      	b.n	800226e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01c      	b.n	800227e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002244:	f007 fedc 	bl	800a000 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d90d      	bls.n	800226e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d0e3      	beq.n	8002244 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	; (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff4c 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240a:	f7ff ff61 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800240e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	f7ff ffb1 	bl	800237c <NVIC_EncodePriority>
 800241a:	4602      	mov	r2, r0
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff80 	bl	8002328 <__NVIC_SetPriority>
}
 8002428:	bf00      	nop
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff54 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e037      	b.n	80024d2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002478:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800247c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f9b7 	bl	8002828 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}  
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_DMA_Start_IT+0x20>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e04a      	b.n	8002590 <HAL_DMA_Start_IT+0xb6>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002508:	2b01      	cmp	r3, #1
 800250a:	d13a      	bne.n	8002582 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f94b 	bl	80027cc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 020e 	orr.w	r2, r2, #14
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00f      	b.n	8002570 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 020a 	orr.w	r2, r2, #10
 800255e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800258e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d008      	beq.n	80025bc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e020      	b.n	80025fe <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800261c:	2b02      	cmp	r3, #2
 800261e:	d005      	beq.n	800262c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e027      	b.n	800267c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020e 	bic.w	r2, r2, #14
 800263a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
    } 
  }
  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2204      	movs	r2, #4
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d024      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x72>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01f      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0204 	bic.w	r2, r2, #4
 80026d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	2104      	movs	r1, #4
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d06a      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	e065      	b.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2202      	movs	r2, #2
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02c      	beq.n	8002762 <HAL_DMA_IRQHandler+0xdc>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d027      	beq.n	8002762 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 020a 	bic.w	r2, r2, #10
 800272e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	2102      	movs	r1, #2
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d035      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002760:	e030      	b.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2208      	movs	r2, #8
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d028      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d023      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 020e 	bic.w	r2, r2, #14
 800278a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
    }
  }
}  
 80027c2:	e7ff      	b.n	80027c4 <HAL_DMA_IRQHandler+0x13e>
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <DMA_CalcBaseAndBitshift+0x34>)
 8002838:	4413      	add	r3, r2
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <DMA_CalcBaseAndBitshift+0x38>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <DMA_CalcBaseAndBitshift+0x3c>)
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	bffdfff8 	.word	0xbffdfff8
 8002860:	cccccccd 	.word	0xcccccccd
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002876:	e14e      	b.n	8002b16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8140 	beq.w	8002b10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d00b      	beq.n	80028b0 <HAL_GPIO_Init+0x48>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d007      	beq.n	80028b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a4:	2b11      	cmp	r3, #17
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e6:	2201      	movs	r2, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0201 	and.w	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0xea>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b12      	cmp	r3, #18
 8002950:	d123      	bne.n	800299a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 809a 	beq.w	8002b10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029dc:	4b55      	ldr	r3, [pc, #340]	; (8002b34 <HAL_GPIO_Init+0x2cc>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_GPIO_Init+0x2cc>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b52      	ldr	r3, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x2cc>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f4:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a1e:	d013      	beq.n	8002a48 <HAL_GPIO_Init+0x1e0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <HAL_GPIO_Init+0x2d4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00d      	beq.n	8002a44 <HAL_GPIO_Init+0x1dc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a45      	ldr	r2, [pc, #276]	; (8002b40 <HAL_GPIO_Init+0x2d8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <HAL_GPIO_Init+0x1d8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a44      	ldr	r2, [pc, #272]	; (8002b44 <HAL_GPIO_Init+0x2dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_GPIO_Init+0x1d4>
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e006      	b.n	8002a4a <HAL_GPIO_Init+0x1e2>
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	e004      	b.n	8002a4a <HAL_GPIO_Init+0x1e2>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x1e2>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_GPIO_Init+0x1e2>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a5a:	4937      	ldr	r1, [pc, #220]	; (8002b38 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f aea9 	bne.w	8002878 <HAL_GPIO_Init+0x10>
  }
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	48000400 	.word	0x48000400
 8002b40:	48000800 	.word	0x48000800
 8002b44:	48000c00 	.word	0x48000c00
 8002b48:	40010400 	.word	0x40010400

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f000 bef4 	b.w	800397e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 816a 	beq.w	8002e7a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ba6:	4bb3      	ldr	r3, [pc, #716]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb2:	4bb0      	ldr	r3, [pc, #704]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d159      	bne.n	8002c72 <HAL_RCC_OscConfig+0xf6>
 8002bbe:	4bad      	ldr	r3, [pc, #692]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bca:	d152      	bne.n	8002c72 <HAL_RCC_OscConfig+0xf6>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCC_OscConfig+0x82>
 8002bf8:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0xae>
 8002bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c26:	4b93      	ldr	r3, [pc, #588]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 810c 	beq.w	8002e78 <HAL_RCC_OscConfig+0x2fc>
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8106 	bne.w	8002e78 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f000 be86 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x110>
 8002c7e:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e030      	b.n	8002cee <HAL_RCC_OscConfig+0x172>
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x134>
 8002c96:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a76      	ldr	r2, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b74      	ldr	r3, [pc, #464]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a73      	ldr	r2, [pc, #460]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01e      	b.n	8002cee <HAL_RCC_OscConfig+0x172>
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x15a>
 8002cbc:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6c      	ldr	r2, [pc, #432]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x172>
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b64      	ldr	r3, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cee:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	495d      	ldr	r1, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d059      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f007 f978 	bl	800a000 <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d16:	f007 f973 	bl	800a000 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d902      	bls.n	8002d2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f000 be29 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 8002d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d40:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <HAL_RCC_OscConfig+0x1e2>
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x20e>
 8002d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d9e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f042 0220 	orr.w	r2, r2, #32
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f002 021f 	and.w	r2, r2, #31
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ab      	beq.n	8002d16 <HAL_RCC_OscConfig+0x19a>
 8002dbe:	e05c      	b.n	8002e7a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f007 f91e 	bl	800a000 <HAL_GetTick>
 8002dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dca:	f007 f919 	bl	800a000 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d902      	bls.n	8002de0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	f000 bdcf 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 8002de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002df4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x296>
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x2c2>
 8002e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCC_OscConfig+0x2f8>)
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e4a:	fa92 f2a2 	rbit	r2, r2
 8002e4e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e52:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ab      	bne.n	8002dca <HAL_RCC_OscConfig+0x24e>
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_OscConfig+0x2fe>
 8002e74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 816f 	beq.w	8003168 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e8a:	4bd0      	ldr	r3, [pc, #832]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e96:	4bcd      	ldr	r3, [pc, #820]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d16c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x400>
 8002ea2:	4bca      	ldr	r3, [pc, #808]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d166      	bne.n	8002f7c <HAL_RCC_OscConfig+0x400>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ec0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_RCC_OscConfig+0x362>
 8002ed8:	4bbc      	ldr	r3, [pc, #752]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	e013      	b.n	8002f06 <HAL_RCC_OscConfig+0x38a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f02:	4bb2      	ldr	r3, [pc, #712]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2202      	movs	r2, #2
 8002f08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f18:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f002 021f 	and.w	r2, r2, #31
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f000 bd1b 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	21f8      	movs	r1, #248	; 0xf8
 8002f58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f60:	fa91 f1a1 	rbit	r1, r1
 8002f64:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f68:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f6c:	fab1 f181 	clz	r1, r1
 8002f70:	b2c9      	uxtb	r1, r1
 8002f72:	408b      	lsls	r3, r1
 8002f74:	4995      	ldr	r1, [pc, #596]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e0f5      	b.n	8003168 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8085 	beq.w	8003092 <HAL_RCC_OscConfig+0x516>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f007 f824 	bl	800a000 <HAL_GetTick>
 8002fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f007 f81f 	bl	800a000 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f000 bcd5 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fe6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0x488>
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	e013      	b.n	800302c <HAL_RCC_OscConfig+0x4b0>
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800301c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003032:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003036:	fa92 f2a2 	rbit	r2, r2
 800303a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800303e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003042:	fab2 f282 	clz	r2, r2
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f002 021f 	and.w	r2, r2, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0af      	beq.n	8002fbe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	21f8      	movs	r1, #248	; 0xf8
 800306e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003076:	fa91 f1a1 	rbit	r1, r1
 800307a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800307e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003082:	fab1 f181 	clz	r1, r1
 8003086:	b2c9      	uxtb	r1, r1
 8003088:	408b      	lsls	r3, r1
 800308a:	4950      	ldr	r1, [pc, #320]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e06a      	b.n	8003168 <HAL_RCC_OscConfig+0x5ec>
 8003092:	2301      	movs	r3, #1
 8003094:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f006 ff9f 	bl	800a000 <HAL_GetTick>
 80030c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c8:	f006 ff9a 	bl	800a000 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d902      	bls.n	80030de <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	f000 bc50 	b.w	800397e <HAL_RCC_OscConfig+0xe02>
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_RCC_OscConfig+0x592>
 8003108:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	e013      	b.n	8003136 <HAL_RCC_OscConfig+0x5ba>
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003120:	2302      	movs	r3, #2
 8003122:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003126:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x650>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2202      	movs	r2, #2
 8003138:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800313c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003148:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f002 021f 	and.w	r2, r2, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1af      	bne.n	80030c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003168:	1d3b      	adds	r3, r7, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80da 	beq.w	800332c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d069      	beq.n	8003256 <HAL_RCC_OscConfig+0x6da>
 8003182:	2301      	movs	r3, #1
 8003184:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_OscConfig+0x654>)
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	2301      	movs	r3, #1
 80031aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f006 ff28 	bl	800a000 <HAL_GetTick>
 80031b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b4:	e00e      	b.n	80031d4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f006 ff23 	bl	800a000 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d906      	bls.n	80031d4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e3d9      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	10908120 	.word	0x10908120
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031ea:	2202      	movs	r2, #2
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f2a3 	rbit	r2, r3
 80031f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003214:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	4ba5      	ldr	r3, [pc, #660]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800321e:	2102      	movs	r1, #2
 8003220:	6019      	str	r1, [r3, #0]
 8003222:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f1a3 	rbit	r1, r3
 800322c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003230:	6019      	str	r1, [r3, #0]
  return result;
 8003232:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0b0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x63a>
 8003254:	e06a      	b.n	800332c <HAL_RCC_OscConfig+0x7b0>
 8003256:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800326c:	601a      	str	r2, [r3, #0]
  return result;
 800326e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003272:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	4b8c      	ldr	r3, [pc, #560]	; (80034b0 <HAL_RCC_OscConfig+0x934>)
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f006 feba 	bl	800a000 <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003292:	f006 feb5 	bl	800a000 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e36b      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 80032a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032da:	2202      	movs	r2, #2
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	fa93 f2a3 	rbit	r2, r3
 80032e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ee:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032f6:	2102      	movs	r1, #2
 80032f8:	6019      	str	r1, [r3, #0]
 80032fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f1a3 	rbit	r1, r3
 8003304:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003308:	6019      	str	r1, [r3, #0]
  return result;
 800330a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1b2      	bne.n	8003292 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8158 	beq.w	80035ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b5a      	ldr	r3, [pc, #360]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b57      	ldr	r3, [pc, #348]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4a56      	ldr	r2, [pc, #344]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	61d3      	str	r3, [r2, #28]
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11a      	bne.n	80033b6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a4b      	ldr	r2, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338c:	f006 fe38 	bl	800a000 <HAL_GetTick>
 8003390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e009      	b.n	80033aa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f006 fe33 	bl	800a000 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e2e9      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_RCC_OscConfig+0x938>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ef      	beq.n	8003396 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x852>
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	e02f      	b.n	800342e <HAL_RCC_OscConfig+0x8b2>
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x876>
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a33      	ldr	r2, [pc, #204]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a30      	ldr	r2, [pc, #192]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	e01d      	b.n	800342e <HAL_RCC_OscConfig+0x8b2>
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x89a>
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a27      	ldr	r2, [pc, #156]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x8b2>
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a24      	ldr	r2, [pc, #144]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d06b      	beq.n	8003510 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f006 fde2 	bl	800a000 <HAL_GetTick>
 800343c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00b      	b.n	800345a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f006 fddd 	bl	800a000 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e291      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 800345a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800345e:	2202      	movs	r2, #2
 8003460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003488:	601a      	str	r2, [r3, #0]
  return result;
 800348a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800348e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d109      	bne.n	80034b8 <HAL_RCC_OscConfig+0x93c>
 80034a4:	4b01      	ldr	r3, [pc, #4]	; (80034ac <HAL_RCC_OscConfig+0x930>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	e014      	b.n	80034d4 <HAL_RCC_OscConfig+0x958>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	10908120 	.word	0x10908120
 80034b4:	40007000 	.word	0x40007000
 80034b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034bc:	2202      	movs	r2, #2
 80034be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	4bbb      	ldr	r3, [pc, #748]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034d8:	2102      	movs	r1, #2
 80034da:	6011      	str	r1, [r2, #0]
 80034dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	fa92 f1a2 	rbit	r1, r2
 80034e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034ea:	6011      	str	r1, [r2, #0]
  return result;
 80034ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f002 021f 	and.w	r2, r2, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d099      	beq.n	8003442 <HAL_RCC_OscConfig+0x8c6>
 800350e:	e063      	b.n	80035d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f006 fd76 	bl	800a000 <HAL_GetTick>
 8003514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f006 fd71 	bl	800a000 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e225      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 8003532:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003536:	2202      	movs	r2, #2
 8003538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	fa93 f2a3 	rbit	r2, r3
 8003544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f2a3 	rbit	r2, r3
 800355c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003560:	601a      	str	r2, [r3, #0]
  return result;
 8003562:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0xa06>
 800357c:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	e00d      	b.n	800359e <HAL_RCC_OscConfig+0xa22>
 8003582:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035a2:	2102      	movs	r1, #2
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fa92 f1a2 	rbit	r1, r2
 80035b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035b4:	6011      	str	r1, [r2, #0]
  return result;
 80035b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1a0      	bne.n	800351a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b77      	ldr	r3, [pc, #476]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4a76      	ldr	r2, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 81c2 	beq.w	800397c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b71      	ldr	r3, [pc, #452]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	f000 819c 	beq.w	800393e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b02      	cmp	r3, #2
 800360e:	f040 8114 	bne.w	800383a <HAL_RCC_OscConfig+0xcbe>
 8003612:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800362a:	601a      	str	r2, [r3, #0]
  return result;
 800362c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003630:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800363c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f006 fcda 	bl	800a000 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	e009      	b.n	8003666 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003652:	f006 fcd5 	bl	800a000 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e18b      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 8003666:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800366a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800367e:	601a      	str	r2, [r3, #0]
  return result;
 8003680:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_OscConfig+0xb24>
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0xb5c>
 80036a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	fa93 f2a3 	rbit	r2, r3
 80036b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fa93 f2a3 	rbit	r2, r3
 80036ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036e0:	6011      	str	r1, [r2, #0]
 80036e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	fa92 f1a2 	rbit	r1, r2
 80036ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036f0:	6011      	str	r1, [r2, #0]
  return result;
 80036f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f042 0220 	orr.w	r2, r2, #32
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d19e      	bne.n	8003652 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	430b      	orrs	r3, r1
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
 8003730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003748:	601a      	str	r2, [r3, #0]
  return result;
 800374a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800374e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800375a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2301      	movs	r3, #1
 8003764:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f006 fc4b 	bl	800a000 <HAL_GetTick>
 800376a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376e:	e009      	b.n	8003784 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f006 fc46 	bl	800a000 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0fc      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 8003784:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	fa93 f2a3 	rbit	r2, r3
 8003798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800379c:	601a      	str	r2, [r3, #0]
  return result;
 800379e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0xc48>
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <HAL_RCC_OscConfig+0xc44>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e01e      	b.n	80037fc <HAL_RCC_OscConfig+0xc80>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f2a3 	rbit	r2, r3
 80037d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003800:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	fa92 f1a2 	rbit	r1, r2
 8003810:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003814:	6011      	str	r1, [r2, #0]
  return result;
 8003816:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0220 	orr.w	r2, r2, #32
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d09b      	beq.n	8003770 <HAL_RCC_OscConfig+0xbf4>
 8003838:	e0a0      	b.n	800397c <HAL_RCC_OscConfig+0xe00>
 800383a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800383e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003852:	601a      	str	r2, [r3, #0]
  return result;
 8003854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003858:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	461a      	mov	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f006 fbc6 	bl	800a000 <HAL_GetTick>
 8003874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003878:	e009      	b.n	800388e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f006 fbc1 	bl	800a000 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e077      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
 800388e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a6:	601a      	str	r2, [r3, #0]
  return result;
 80038a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_OscConfig+0xd4c>
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e01b      	b.n	8003900 <HAL_RCC_OscConfig+0xd84>
 80038c8:	f107 0320 	add.w	r3, r7, #32
 80038cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f107 0318 	add.w	r3, r7, #24
 80038e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f107 0318 	add.w	r3, r7, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f107 0210 	add.w	r2, r7, #16
 8003904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	f107 0210 	add.w	r2, r7, #16
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fa92 f1a2 	rbit	r1, r2
 8003914:	f107 020c 	add.w	r2, r7, #12
 8003918:	6011      	str	r1, [r2, #0]
  return result;
 800391a:	f107 020c 	add.w	r2, r7, #12
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	f042 0220 	orr.w	r2, r2, #32
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	f002 021f 	and.w	r2, r2, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f202 	lsl.w	r2, r1, r2
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d19e      	bne.n	800387a <HAL_RCC_OscConfig+0xcfe>
 800393c:	e01e      	b.n	800397c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e018      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_RCC_OscConfig+0xe0c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003954:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	429a      	cmp	r2, r3
 8003964:	d108      	bne.n	8003978 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003966:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800396a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000

0800398c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b09e      	sub	sp, #120	; 0x78
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e162      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	498b      	ldr	r1, [pc, #556]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e14a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b82      	ldr	r3, [pc, #520]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	497f      	ldr	r1, [pc, #508]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80dc 	beq.w	8003bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d13c      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xf6>
 8003a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xa6>
 8003a2c:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	e00f      	b.n	8003a52 <HAL_RCC_ClockConfig+0xc6>
 8003a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5a:	fa92 f2a2 	rbit	r2, r2
 8003a5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a62:	fab2 f282 	clz	r2, r2
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f002 021f 	and.w	r2, r2, #31
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d17b      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0f3      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d13c      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x178>
 8003a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x128>
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e00f      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
 8003ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f002 021f 	and.w	r2, r2, #31
 8003af4:	2101      	movs	r1, #1
 8003af6:	fa01 f202 	lsl.w	r2, r1, r2
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13a      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b2      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
 8003b04:	2302      	movs	r3, #2
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	e00d      	b.n	8003b48 <HAL_RCC_ClockConfig+0x1bc>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	2302      	movs	r3, #2
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2202      	movs	r2, #2
 8003b4a:	61ba      	str	r2, [r7, #24]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	617a      	str	r2, [r7, #20]
  return result;
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e079      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	491a      	ldr	r1, [pc, #104]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f006 fa3a 	bl	800a000 <HAL_GetTick>
 8003b8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f006 fa36 	bl	800a000 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e061      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d214      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4906      	ldr	r1, [pc, #24]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e040      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2de>
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	491a      	ldr	r1, [pc, #104]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4912      	ldr	r1, [pc, #72]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c2e:	f000 f829 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c32:	4601      	mov	r1, r0
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_RCC_ClockConfig+0x2e8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3c:	22f0      	movs	r2, #240	; 0xf0
 8003c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	60fa      	str	r2, [r7, #12]
  return result;
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	40d3      	lsrs	r3, r2
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x2ec>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_RCC_ClockConfig+0x2f0>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_ClockConfig+0x2f4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc feea 	bl	8000a3c <HAL_InitTick>
  
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3778      	adds	r7, #120	; 0x78
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	0800f644 	.word	0x0800f644
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	20000004 	.word	0x20000004

08003c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b08b      	sub	sp, #44	; 0x2c
 8003c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x36>
 8003cb2:	e03c      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb6:	623b      	str	r3, [r7, #32]
      break;
 8003cb8:	e03c      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	fa92 f2a2 	rbit	r2, r2
 8003ccc:	607a      	str	r2, [r7, #4]
  return result;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	fab2 f282 	clz	r2, r2
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	40d3      	lsrs	r3, r2
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	fa92 f2a2 	rbit	r2, r2
 8003cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	fab2 f282 	clz	r2, r2
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	40d3      	lsrs	r3, r2
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d0c:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	e004      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	623b      	str	r3, [r7, #32]
      break;
 8003d2c:	e002      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d30:	623b      	str	r3, [r7, #32]
      break;
 8003d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d34:	6a3b      	ldr	r3, [r7, #32]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	372c      	adds	r7, #44	; 0x2c
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	01e84800 	.word	0x01e84800
 8003d4c:	0800f65c 	.word	0x0800f65c
 8003d50:	0800f66c 	.word	0x0800f66c
 8003d54:	003d0900 	.word	0x003d0900
 8003d58:	007a1200 	.word	0x007a1200

08003d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d7a:	f7ff ffef 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	fa92 f2a2 	rbit	r2, r2
 8003d94:	603a      	str	r2, [r7, #0]
  return result;
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	40d3      	lsrs	r3, r2
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	0800f654 	.word	0x0800f654

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003dbe:	f7ff ffcd 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003dcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003dd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	fa92 f2a2 	rbit	r2, r2
 8003dd8:	603a      	str	r2, [r7, #0]
  return result;
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	fab2 f282 	clz	r2, r2
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	40d3      	lsrs	r3, r2
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800f654 	.word	0x0800f654

08003dfc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	220f      	movs	r2, #15
 8003e0a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetClockConfig+0x60>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0207 	and.w	r2, r3, #7
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40022000 	.word	0x40022000

08003e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e095      	b.n	8003f9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d108      	bne.n	8003e8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e82:	d009      	beq.n	8003e98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	61da      	str	r2, [r3, #28]
 8003e8a:	e005      	b.n	8003e98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fc fd32 	bl	800091c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed8:	d902      	bls.n	8003ee0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e002      	b.n	8003ee6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003eee:	d007      	beq.n	8003f00 <HAL_SPI_Init+0xa0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef8:	d002      	beq.n	8003f00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	ea42 0103 	orr.w	r1, r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	f003 0204 	and.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b08a      	sub	sp, #40	; 0x28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x26>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e1fb      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x41e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd4:	f006 f814 	bl	800a000 <HAL_GetTick>
 8003fd8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ff0:	7efb      	ldrb	r3, [r7, #27]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d00e      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x6e>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffc:	d106      	bne.n	800400c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_SPI_TransmitReceive+0x66>
 8004006:	7efb      	ldrb	r3, [r7, #27]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d003      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800400c:	2302      	movs	r3, #2
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004012:	e1cd      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x80>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x80>
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800402c:	e1c0      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b04      	cmp	r3, #4
 8004038:	d003      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2205      	movs	r2, #5
 800403e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	887a      	ldrh	r2, [r7, #2]
 800405a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	887a      	ldrh	r2, [r7, #2]
 800406e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004084:	d802      	bhi.n	800408c <HAL_SPI_TransmitReceive+0xe6>
 8004086:	8a3b      	ldrh	r3, [r7, #16]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d908      	bls.n	800409e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	e007      	b.n	80040ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d007      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040d4:	d97c      	bls.n	80041d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x13e>
 80040de:	8a7b      	ldrh	r3, [r7, #18]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d169      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004108:	e056      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1aa>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x1aa>
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d113      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	881a      	ldrh	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11c      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x1f2>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	b292      	uxth	r2, r2
 8004176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004194:	2301      	movs	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004198:	f005 ff32 	bl	800a000 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d807      	bhi.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ae:	d003      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041b6:	e0fb      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1a3      	bne.n	800410a <HAL_SPI_TransmitReceive+0x164>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d19d      	bne.n	800410a <HAL_SPI_TransmitReceive+0x164>
 80041ce:	e0df      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x23a>
 80041d8:	8a7b      	ldrh	r3, [r7, #18]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	f040 80cb 	bne.w	8004376 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d912      	bls.n	8004210 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	881a      	ldrh	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b02      	subs	r3, #2
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800420e:	e0b2      	b.n	8004376 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004236:	e09e      	b.n	8004376 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d134      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x30a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02f      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x30a>
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12c      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d912      	bls.n	8004286 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	881a      	ldrh	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	1c9a      	adds	r2, r3, #2
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b02      	subs	r3, #2
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004284:	e012      	b.n	80042ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d148      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x3aa>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d042      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d923      	bls.n	800431e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b02      	subs	r3, #2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d81f      	bhi.n	800434c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	e016      	b.n	800434c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f103 020c 	add.w	r2, r3, #12
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800434c:	2301      	movs	r3, #1
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004350:	f005 fe56 	bl	800a000 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435c:	429a      	cmp	r2, r3
 800435e:	d803      	bhi.n	8004368 <HAL_SPI_TransmitReceive+0x3c2>
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004366:	d102      	bne.n	800436e <HAL_SPI_TransmitReceive+0x3c8>
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004374:	e01c      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af5b 	bne.w	8004238 <HAL_SPI_TransmitReceive+0x292>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	f47f af54 	bne.w	8004238 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa4f 	bl	8004838 <SPI_EndRxTxTransaction>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d006      	beq.n	80043ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60
 80043ac:	e000      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
    return;
 800440e:	e0d7      	b.n	80045c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_SPI_IRQHandler+0x66>
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	09db      	lsrs	r3, r3, #7
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
    return;
 8004430:	e0c6      	b.n	80045c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10c      	bne.n	8004458 <HAL_SPI_IRQHandler+0x8c>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80b4 	beq.w	80045c0 <HAL_SPI_IRQHandler+0x1f4>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80ad 	beq.w	80045c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d023      	beq.n	80044ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d011      	beq.n	80044a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	e00b      	b.n	80044ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	693b      	ldr	r3, [r7, #16]
        return;
 80044b8:	e082      	b.n	80045c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d014      	beq.n	80044f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	f043 0201 	orr.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00c      	beq.n	8004516 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	f043 0208 	orr.w	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004508:	2300      	movs	r3, #0
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	2b00      	cmp	r3, #0
 800451c:	d04f      	beq.n	80045be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800452c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_SPI_IRQHandler+0x17e>
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d034      	beq.n	80045b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0203 	bic.w	r2, r2, #3
 8004558:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_SPI_IRQHandler+0x1fc>)
 8004568:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f84b 	bl	800260a <HAL_DMA_Abort_IT>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <HAL_SPI_IRQHandler+0x1fc>)
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe f835 	bl	800260a <HAL_DMA_Abort_IT>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80045b2:	e003      	b.n	80045bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f809 	bl	80045cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045ba:	e000      	b.n	80045be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045bc:	bf00      	nop
    return;
 80045be:	bf00      	nop
  }
}
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	080045e1 	.word	0x080045e1

080045cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ffe5 	bl	80045cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800461c:	f005 fcf0 	bl	800a000 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	4413      	add	r3, r2
 800462a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800462c:	f005 fce8 	bl	800a000 <HAL_GetTick>
 8004630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004632:	4b39      	ldr	r3, [pc, #228]	; (8004718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	015b      	lsls	r3, r3, #5
 8004638:	0d1b      	lsrs	r3, r3, #20
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004642:	e054      	b.n	80046ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464a:	d050      	beq.n	80046ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800464c:	f005 fcd8 	bl	800a000 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	429a      	cmp	r2, r3
 800465a:	d902      	bls.n	8004662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d13d      	bne.n	80046de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467a:	d111      	bne.n	80046a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004684:	d004      	beq.n	8004690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468e:	d107      	bne.n	80046a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a8:	d10f      	bne.n	80046ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e017      	b.n	800470e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	429a      	cmp	r2, r3
 800470a:	d19b      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000

0800471c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800472a:	f005 fc69 	bl	800a000 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	4413      	add	r3, r2
 8004738:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800473a:	f005 fc61 	bl	800a000 <HAL_GetTick>
 800473e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004740:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	00da      	lsls	r2, r3, #3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	0d1b      	lsrs	r3, r3, #20
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004758:	e05f      	b.n	800481a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004760:	d106      	bne.n	8004770 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004776:	d050      	beq.n	800481a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004778:	f005 fc42 	bl	800a000 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	429a      	cmp	r2, r3
 8004786:	d902      	bls.n	800478e <SPI_WaitFifoStateUntilTimeout+0x72>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d13d      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800479c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a6:	d111      	bne.n	80047cc <SPI_WaitFifoStateUntilTimeout+0xb0>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d004      	beq.n	80047bc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d107      	bne.n	80047cc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d10f      	bne.n	80047f6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e010      	b.n	800482c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3b01      	subs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	d197      	bne.n	800475a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000000 	.word	0x20000000

08004838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff63 	bl	800471c <SPI_WaitFifoStateUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e027      	b.n	80048bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fec8 	bl	800460c <SPI_WaitFlagStateUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e014      	b.n	80048bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff3c 	bl	800471c <SPI_WaitFifoStateUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e000      	b.n	80048bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e049      	b.n	800496a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fb84 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 fe32 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e040      	b.n	8004a0e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_TIM_Base_Start_IT+0xa8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIM_Base_Start_IT+0xac>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_TIM_Base_Start_IT+0xb0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d115      	bne.n	80049f8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <HAL_TIM_Base_Start_IT+0xb4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d015      	beq.n	8004a0a <HAL_TIM_Base_Start_IT+0x96>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d011      	beq.n	8004a0a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	e008      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e000      	b.n	8004a0c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	00010007 	.word	0x00010007

08004a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e049      	b.n	8004ad2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f841 	bl	8004ada <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 fd7e 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <HAL_TIM_PWM_Start+0x24>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e03c      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d109      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x3e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e02f      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d109      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x58>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e022      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d109      	bne.n	8004b62 <HAL_TIM_PWM_Start+0x72>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e015      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d109      	bne.n	8004b7c <HAL_TIM_PWM_Start+0x8c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e008      	b.n	8004b8e <HAL_TIM_PWM_Start+0x9e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e088      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0xb6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba4:	e023      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0xc6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	e01b      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0xd6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc4:	e013      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0xe6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0xf6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be4:	e003      	b.n	8004bee <HAL_TIM_PWM_Start+0xfe>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f870 	bl	8005cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <HAL_TIM_PWM_Start+0x1c0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <HAL_TIM_PWM_Start+0x134>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <HAL_TIM_PWM_Start+0x1c4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d009      	beq.n	8004c24 <HAL_TIM_PWM_Start+0x134>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <HAL_TIM_PWM_Start+0x1c8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIM_PWM_Start+0x134>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <HAL_TIM_PWM_Start+0x1cc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_TIM_PWM_Start+0x138>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_TIM_PWM_Start+0x13a>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_TIM_PWM_Start+0x1c0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x176>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d009      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x176>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <HAL_TIM_PWM_Start+0x1d0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x176>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <HAL_TIM_PWM_Start+0x1c4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d115      	bne.n	8004c92 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <HAL_TIM_PWM_Start+0x1d4>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d015      	beq.n	8004ca4 <HAL_TIM_PWM_Start+0x1b4>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d011      	beq.n	8004ca4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	e008      	b.n	8004ca4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e000      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	00010007 	.word	0x00010007

08004cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e097      	b.n	8004e0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc f8f3 	bl	8000edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004d0c:	f023 0307 	bic.w	r3, r3, #7
 8004d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f000 fc25 	bl	800556c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d68:	f023 030c 	bic.w	r3, r3, #12
 8004d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	4313      	orrs	r3, r2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	011a      	lsls	r2, r3, #4
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	031b      	lsls	r3, r3, #12
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d110      	bne.n	8004e66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e4a:	7b7b      	ldrb	r3, [r7, #13]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e069      	b.n	8004f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e64:	e031      	b.n	8004eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d110      	bne.n	8004e8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d102      	bne.n	8004e78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e72:	7b3b      	ldrb	r3, [r7, #12]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d001      	beq.n	8004e7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e055      	b.n	8004f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8c:	e01d      	b.n	8004eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d108      	bne.n	8004ea6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e94:	7bbb      	ldrb	r3, [r7, #14]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e9a:	7b7b      	ldrb	r3, [r7, #13]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d102      	bne.n	8004ea6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ea0:	7b3b      	ldrb	r3, [r7, #12]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e03e      	b.n	8004f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_TIM_Encoder_Start+0xc4>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d008      	beq.n	8004ee8 <HAL_TIM_Encoder_Start+0xd4>
 8004ed6:	e00f      	b.n	8004ef8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2201      	movs	r2, #1
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fefb 	bl	8005cdc <TIM_CCxChannelCmd>
      break;
 8004ee6:	e016      	b.n	8004f16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2201      	movs	r2, #1
 8004eee:	2104      	movs	r1, #4
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fef3 	bl	8005cdc <TIM_CCxChannelCmd>
      break;
 8004ef6:	e00e      	b.n	8004f16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2201      	movs	r2, #1
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 feeb 	bl	8005cdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fee4 	bl	8005cdc <TIM_CCxChannelCmd>
      break;
 8004f14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0202 	mvn.w	r2, #2
 8004f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fadc 	bl	8005530 <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 face 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fadf 	bl	8005544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0204 	mvn.w	r2, #4
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fab2 	bl	8005530 <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 faa4 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fab5 	bl	8005544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0208 	mvn.w	r2, #8
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2204      	movs	r2, #4
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa88 	bl	8005530 <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa7a 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa8b 	bl	8005544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b10      	cmp	r3, #16
 8005040:	d122      	bne.n	8005088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b10      	cmp	r3, #16
 800504e:	d11b      	bne.n	8005088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0210 	mvn.w	r2, #16
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2208      	movs	r2, #8
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa5e 	bl	8005530 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa50 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa61 	bl	8005544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d10e      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0201 	mvn.w	r2, #1
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f005 f8a2 	bl	800a1f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050be:	2b80      	cmp	r3, #128	; 0x80
 80050c0:	d10e      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b80      	cmp	r3, #128	; 0x80
 80050ce:	d107      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fe9c 	bl	8005e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	d10e      	bne.n	800510e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d107      	bne.n	800510e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fe8f 	bl	8005e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d10e      	bne.n	800513a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	d107      	bne.n	800513a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa0f 	bl	8005558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b20      	cmp	r3, #32
 8005146:	d10e      	bne.n	8005166 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b20      	cmp	r3, #32
 8005154:	d107      	bne.n	8005166 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f06f 0220 	mvn.w	r2, #32
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fe4f 	bl	8005e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005186:	2302      	movs	r3, #2
 8005188:	e0fd      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x216>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b14      	cmp	r3, #20
 8005196:	f200 80f0 	bhi.w	800537a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	0800537b 	.word	0x0800537b
 80051a8:	0800537b 	.word	0x0800537b
 80051ac:	0800537b 	.word	0x0800537b
 80051b0:	08005235 	.word	0x08005235
 80051b4:	0800537b 	.word	0x0800537b
 80051b8:	0800537b 	.word	0x0800537b
 80051bc:	0800537b 	.word	0x0800537b
 80051c0:	08005277 	.word	0x08005277
 80051c4:	0800537b 	.word	0x0800537b
 80051c8:	0800537b 	.word	0x0800537b
 80051cc:	0800537b 	.word	0x0800537b
 80051d0:	080052b7 	.word	0x080052b7
 80051d4:	0800537b 	.word	0x0800537b
 80051d8:	0800537b 	.word	0x0800537b
 80051dc:	0800537b 	.word	0x0800537b
 80051e0:	080052f9 	.word	0x080052f9
 80051e4:	0800537b 	.word	0x0800537b
 80051e8:	0800537b 	.word	0x0800537b
 80051ec:	0800537b 	.word	0x0800537b
 80051f0:	08005339 	.word	0x08005339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fa2e 	bl	800565c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0208 	orr.w	r2, r2, #8
 800520e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0204 	bic.w	r2, r2, #4
 800521e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6999      	ldr	r1, [r3, #24]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	619a      	str	r2, [r3, #24]
      break;
 8005232:	e0a3      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fa94 	bl	8005768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	021a      	lsls	r2, r3, #8
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	619a      	str	r2, [r3, #24]
      break;
 8005274:	e082      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 faf3 	bl	8005868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0208 	orr.w	r2, r2, #8
 8005290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0204 	bic.w	r2, r2, #4
 80052a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69d9      	ldr	r1, [r3, #28]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	61da      	str	r2, [r3, #28]
      break;
 80052b4:	e062      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fb51 	bl	8005964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	021a      	lsls	r2, r3, #8
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	61da      	str	r2, [r3, #28]
      break;
 80052f6:	e041      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb94 	bl	8005a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0208 	orr.w	r2, r2, #8
 8005312:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0204 	bic.w	r2, r2, #4
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005336:	e021      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbd2 	bl	8005ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005378:	e000      	b.n	800537c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800537a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop

08005390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_ConfigClockSource+0x18>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0b5      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x184>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e4:	d03e      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0xd4>
 80053e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ea:	f200 8087 	bhi.w	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	f000 8085 	beq.w	8005500 <HAL_TIM_ConfigClockSource+0x170>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d87f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b70      	cmp	r3, #112	; 0x70
 80053fe:	d01a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0xa6>
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d87b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d050      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x11a>
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d877      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	2b50      	cmp	r3, #80	; 0x50
 800540e:	d03c      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xfa>
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d873      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d058      	beq.n	80054ca <HAL_TIM_ConfigClockSource+0x13a>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d86f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b30      	cmp	r3, #48	; 0x30
 800541e:	d064      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d86b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d060      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d867      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
 8005430:	2b10      	cmp	r3, #16
 8005432:	d05a      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005434:	e062      	b.n	80054fc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f000 fc29 	bl	8005c9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005458:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	609a      	str	r2, [r3, #8]
      break;
 8005462:	e04e      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6899      	ldr	r1, [r3, #8]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f000 fc12 	bl	8005c9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005486:	609a      	str	r2, [r3, #8]
      break;
 8005488:	e03b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	461a      	mov	r2, r3
 8005498:	f000 fb86 	bl	8005ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2150      	movs	r1, #80	; 0x50
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fbdf 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 80054a8:	e02b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f000 fba5 	bl	8005c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2160      	movs	r1, #96	; 0x60
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fbcf 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 80054c8:	e01b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f000 fb66 	bl	8005ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2140      	movs	r1, #64	; 0x40
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fbbf 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 fbb6 	bl	8005c66 <TIM_ITRx_SetConfig>
        break;
 80054fa:	e002      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005500:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a32      	ldr	r2, [pc, #200]	; (8005648 <TIM_Base_SetConfig+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0x28>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0x28>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a2f      	ldr	r2, [pc, #188]	; (800564c <TIM_Base_SetConfig+0xe0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <TIM_Base_SetConfig+0xdc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <TIM_Base_SetConfig+0x6a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d00f      	beq.n	80055d6 <TIM_Base_SetConfig+0x6a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <TIM_Base_SetConfig+0xe0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <TIM_Base_SetConfig+0x6a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a23      	ldr	r2, [pc, #140]	; (8005650 <TIM_Base_SetConfig+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <TIM_Base_SetConfig+0x6a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a22      	ldr	r2, [pc, #136]	; (8005654 <TIM_Base_SetConfig+0xe8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <TIM_Base_SetConfig+0x6a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a21      	ldr	r2, [pc, #132]	; (8005658 <TIM_Base_SetConfig+0xec>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d108      	bne.n	80055e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a0e      	ldr	r2, [pc, #56]	; (8005648 <TIM_Base_SetConfig+0xdc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0xc0>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <TIM_Base_SetConfig+0xe4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0xc0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <TIM_Base_SetConfig+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0xc0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <TIM_Base_SetConfig+0xec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800

0800565c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0302 	bic.w	r3, r3, #2
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a28      	ldr	r2, [pc, #160]	; (8005758 <TIM_OC1_SetConfig+0xfc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_OC1_SetConfig+0x78>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a27      	ldr	r2, [pc, #156]	; (800575c <TIM_OC1_SetConfig+0x100>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_OC1_SetConfig+0x78>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a26      	ldr	r2, [pc, #152]	; (8005760 <TIM_OC1_SetConfig+0x104>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC1_SetConfig+0x78>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a25      	ldr	r2, [pc, #148]	; (8005764 <TIM_OC1_SetConfig+0x108>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10c      	bne.n	80056ee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0308 	bic.w	r3, r3, #8
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0304 	bic.w	r3, r3, #4
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <TIM_OC1_SetConfig+0xfc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_OC1_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_OC1_SetConfig+0x100>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_OC1_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_OC1_SetConfig+0x104>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC1_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_OC1_SetConfig+0x108>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0210 	bic.w	r2, r3, #16
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0320 	bic.w	r3, r3, #32
 80057b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a24      	ldr	r2, [pc, #144]	; (8005858 <TIM_OC2_SetConfig+0xf0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <TIM_OC2_SetConfig+0xf0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_OC2_SetConfig+0xa0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <TIM_OC2_SetConfig+0xf4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_OC2_SetConfig+0xa0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <TIM_OC2_SetConfig+0xf8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_OC2_SetConfig+0xa0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a18      	ldr	r2, [pc, #96]	; (8005864 <TIM_OC2_SetConfig+0xfc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d113      	bne.n	8005830 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800580e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005816:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a23      	ldr	r2, [pc, #140]	; (8005954 <TIM_OC3_SetConfig+0xec>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10d      	bne.n	80058e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <TIM_OC3_SetConfig+0xec>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_OC3_SetConfig+0x9e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a19      	ldr	r2, [pc, #100]	; (8005958 <TIM_OC3_SetConfig+0xf0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC3_SetConfig+0x9e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a18      	ldr	r2, [pc, #96]	; (800595c <TIM_OC3_SetConfig+0xf4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x9e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <TIM_OC3_SetConfig+0xf8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d113      	bne.n	800592e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800

08005964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC4_SetConfig+0xb8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00b      	beq.n	80059e0 <TIM_OC4_SetConfig+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <TIM_OC4_SetConfig+0xbc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_OC4_SetConfig+0x7c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <TIM_OC4_SetConfig+0xc0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC4_SetConfig+0x7c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <TIM_OC4_SetConfig+0xc4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d109      	bne.n	80059f4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <TIM_OC5_SetConfig+0xac>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_OC5_SetConfig+0x72>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <TIM_OC5_SetConfig+0xb0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_OC5_SetConfig+0x72>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <TIM_OC5_SetConfig+0xb4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC5_SetConfig+0x72>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <TIM_OC5_SetConfig+0xb8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d109      	bne.n	8005ab2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	621a      	str	r2, [r3, #32]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800

08005ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <TIM_OC6_SetConfig+0xb0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_OC6_SetConfig+0x74>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <TIM_OC6_SetConfig+0xb4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC6_SetConfig+0x74>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <TIM_OC6_SetConfig+0xb8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC6_SetConfig+0x74>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <TIM_OC6_SetConfig+0xbc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d109      	bne.n	8005b70 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	029b      	lsls	r3, r3, #10
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800

08005ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f023 030a 	bic.w	r3, r3, #10
 8005be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b087      	sub	sp, #28
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	621a      	str	r2, [r3, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f043 0307 	orr.w	r3, r3, #7
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	021a      	lsls	r2, r3, #8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2201      	movs	r2, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e054      	b.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da8:	d009      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d004      	beq.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40014000 	.word	0x40014000

08005e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e040      	b.n	8005ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fb f94e 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	; 0x24
 8005e6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fb12 	bl	80064a8 <UART_SetConfig>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e022      	b.n	8005ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fc3c 	bl	8006714 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fcc3 	bl	8006858 <UART_CheckIdleState>
 8005ed2:	4603      	mov	r3, r0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d166      	bne.n	8005fc0 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_UART_Transmit_DMA+0x22>
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e05f      	b.n	8005fc2 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Transmit_DMA+0x34>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e058      	b.n	8005fc2 <HAL_UART_Transmit_DMA+0xe6>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	88fa      	ldrh	r2, [r7, #6]
 8005f22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	88fa      	ldrh	r2, [r7, #6]
 8005f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2221      	movs	r2, #33	; 0x21
 8005f3a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02b      	beq.n	8005f9c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f48:	4a20      	ldr	r2, [pc, #128]	; (8005fcc <HAL_UART_Transmit_DMA+0xf0>)
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <HAL_UART_Transmit_DMA+0xf4>)
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f58:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <HAL_UART_Transmit_DMA+0xf8>)
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f60:	2200      	movs	r2, #0
 8005f62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3328      	adds	r3, #40	; 0x28
 8005f74:	461a      	mov	r2, r3
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	f7fc faaf 	bl	80024da <HAL_DMA_Start_IT>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00c      	beq.n	8005f9c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2210      	movs	r2, #16
 8005f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e012      	b.n	8005fc2 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2240      	movs	r2, #64	; 0x40
 8005fa2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e000      	b.n	8005fc2 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
  }
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	08006b45 	.word	0x08006b45
 8005fd0:	08006b93 	.word	0x08006b93
 8005fd4:	08006c79 	.word	0x08006c79

08005fd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d12c      	bne.n	8006048 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_UART_Receive_DMA+0x22>
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e025      	b.n	800604a <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_UART_Receive_DMA+0x34>
 8006008:	2302      	movs	r3, #2
 800600a:	e01e      	b.n	800604a <HAL_UART_Receive_DMA+0x72>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006036:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	461a      	mov	r2, r3
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fcd0 	bl	80069e4 <UART_Start_Receive_DMA>
 8006044:	4603      	mov	r3, r0
 8006046:	e000      	b.n	800604a <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	f640 030f 	movw	r3, #2063	; 0x80f
 800607a:	4013      	ands	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d113      	bne.n	80060ac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 81cc 	beq.w	800643a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
      }
      return;
 80060aa:	e1c6      	b.n	800643a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 80e3 	beq.w	800627a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4ba5      	ldr	r3, [pc, #660]	; (8006358 <HAL_UART_IRQHandler+0x304>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80d8 	beq.w	800627a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d010      	beq.n	80060f6 <HAL_UART_IRQHandler+0xa2>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2201      	movs	r2, #1
 80060e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ec:	f043 0201 	orr.w	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <HAL_UART_IRQHandler+0xce>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2202      	movs	r2, #2
 8006110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <HAL_UART_IRQHandler+0xfa>
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2204      	movs	r2, #4
 800613c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006144:	f043 0202 	orr.w	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2208      	movs	r2, #8
 8006172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617a:	f043 0208 	orr.w	r2, r3, #8
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <HAL_UART_IRQHandler+0x15e>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00c      	beq.n	80061b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8140 	beq.w	800643e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00c      	beq.n	80061e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d004      	beq.n	8006202 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d031      	beq.n	8006266 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc6f 	bl	8006ae6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d123      	bne.n	800625e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006224:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	2b00      	cmp	r3, #0
 800622c:	d013      	beq.n	8006256 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	4a4a      	ldr	r2, [pc, #296]	; (800635c <HAL_UART_IRQHandler+0x308>)
 8006234:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4618      	mov	r0, r3
 800623c:	f7fc f9e5 	bl	800260a <HAL_DMA_Abort_IT>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006250:	4610      	mov	r0, r2
 8006252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	e00f      	b.n	8006276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f910 	bl	800647c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	e00b      	b.n	8006276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f90c 	bl	800647c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006264:	e007      	b.n	8006276 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f908 	bl	800647c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006274:	e0e3      	b.n	800643e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006276:	bf00      	nop
    return;
 8006278:	e0e1      	b.n	800643e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627e:	2b01      	cmp	r3, #1
 8006280:	f040 80a7 	bne.w	80063d2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80a1 	beq.w	80063d2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 809b 	beq.w	80063d2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2210      	movs	r2, #16
 80062a2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d156      	bne.n	8006360 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80062bc:	893b      	ldrh	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80bf 	beq.w	8006442 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062ca:	893a      	ldrh	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	f080 80b8 	bcs.w	8006442 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	893a      	ldrh	r2, [r7, #8]
 80062d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d02a      	beq.n	800633a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006312:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0210 	bic.w	r2, r2, #16
 800632e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006334:	4618      	mov	r0, r3
 8006336:	f7fc f92f 	bl	8002598 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006346:	b29b      	uxth	r3, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	b29b      	uxth	r3, r3
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f89e 	bl	8006490 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006354:	e075      	b.n	8006442 <HAL_UART_IRQHandler+0x3ee>
 8006356:	bf00      	nop
 8006358:	04000120 	.word	0x04000120
 800635c:	08006cf5 	.word	0x08006cf5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800636c:	b29b      	uxth	r3, r3
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d063      	beq.n	8006446 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 800637e:	897b      	ldrh	r3, [r7, #10]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d060      	beq.n	8006446 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006392:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0210 	bic.w	r2, r2, #16
 80063c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063c6:	897b      	ldrh	r3, [r7, #10]
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f860 	bl	8006490 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80063d0:	e039      	b.n	8006446 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00d      	beq.n	80063f8 <HAL_UART_IRQHandler+0x3a4>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fcae 	bl	8006d52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f6:	e029      	b.n	800644c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00d      	beq.n	800641e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01a      	beq.n	800644a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
    }
    return;
 800641c:	e015      	b.n	800644a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d011      	beq.n	800644c <HAL_UART_IRQHandler+0x3f8>
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00c      	beq.n	800644c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fc74 	bl	8006d20 <UART_EndTransmit_IT>
    return;
 8006438:	e008      	b.n	800644c <HAL_UART_IRQHandler+0x3f8>
      return;
 800643a:	bf00      	nop
 800643c:	e006      	b.n	800644c <HAL_UART_IRQHandler+0x3f8>
    return;
 800643e:	bf00      	nop
 8006440:	e004      	b.n	800644c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006442:	bf00      	nop
 8006444:	e002      	b.n	800644c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <HAL_UART_IRQHandler+0x3f8>
    return;
 800644a:	bf00      	nop
  }

}
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop

08006454 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b8a      	ldr	r3, [pc, #552]	; (80066fc <UART_SetConfig+0x254>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	6979      	ldr	r1, [r7, #20]
 80064dc:	430b      	orrs	r3, r1
 80064de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a78      	ldr	r2, [pc, #480]	; (8006700 <UART_SetConfig+0x258>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d120      	bne.n	8006566 <UART_SetConfig+0xbe>
 8006524:	4b77      	ldr	r3, [pc, #476]	; (8006704 <UART_SetConfig+0x25c>)
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b03      	cmp	r3, #3
 800652e:	d817      	bhi.n	8006560 <UART_SetConfig+0xb8>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x90>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	08006549 	.word	0x08006549
 800653c:	08006555 	.word	0x08006555
 8006540:	0800655b 	.word	0x0800655b
 8006544:	0800654f 	.word	0x0800654f
 8006548:	2300      	movs	r3, #0
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e01d      	b.n	800658a <UART_SetConfig+0xe2>
 800654e:	2302      	movs	r3, #2
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e01a      	b.n	800658a <UART_SetConfig+0xe2>
 8006554:	2304      	movs	r3, #4
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e017      	b.n	800658a <UART_SetConfig+0xe2>
 800655a:	2308      	movs	r3, #8
 800655c:	77fb      	strb	r3, [r7, #31]
 800655e:	e014      	b.n	800658a <UART_SetConfig+0xe2>
 8006560:	2310      	movs	r3, #16
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e011      	b.n	800658a <UART_SetConfig+0xe2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a67      	ldr	r2, [pc, #412]	; (8006708 <UART_SetConfig+0x260>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d102      	bne.n	8006576 <UART_SetConfig+0xce>
 8006570:	2300      	movs	r3, #0
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e009      	b.n	800658a <UART_SetConfig+0xe2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a64      	ldr	r2, [pc, #400]	; (800670c <UART_SetConfig+0x264>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d102      	bne.n	8006586 <UART_SetConfig+0xde>
 8006580:	2300      	movs	r3, #0
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e001      	b.n	800658a <UART_SetConfig+0xe2>
 8006586:	2310      	movs	r3, #16
 8006588:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006592:	d15b      	bne.n	800664c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006594:	7ffb      	ldrb	r3, [r7, #31]
 8006596:	2b08      	cmp	r3, #8
 8006598:	d827      	bhi.n	80065ea <UART_SetConfig+0x142>
 800659a:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <UART_SetConfig+0xf8>)
 800659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065d5 	.word	0x080065d5
 80065ac:	080065eb 	.word	0x080065eb
 80065b0:	080065db 	.word	0x080065db
 80065b4:	080065eb 	.word	0x080065eb
 80065b8:	080065eb 	.word	0x080065eb
 80065bc:	080065eb 	.word	0x080065eb
 80065c0:	080065e3 	.word	0x080065e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fd fbd6 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80065c8:	61b8      	str	r0, [r7, #24]
        break;
 80065ca:	e013      	b.n	80065f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065cc:	f7fd fbf4 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 80065d0:	61b8      	str	r0, [r7, #24]
        break;
 80065d2:	e00f      	b.n	80065f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d4:	4b4e      	ldr	r3, [pc, #312]	; (8006710 <UART_SetConfig+0x268>)
 80065d6:	61bb      	str	r3, [r7, #24]
        break;
 80065d8:	e00c      	b.n	80065f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065da:	f7fd fb53 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 80065de:	61b8      	str	r0, [r7, #24]
        break;
 80065e0:	e008      	b.n	80065f4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e6:	61bb      	str	r3, [r7, #24]
        break;
 80065e8:	e004      	b.n	80065f4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	77bb      	strb	r3, [r7, #30]
        break;
 80065f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d074      	beq.n	80066e4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	005a      	lsls	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	441a      	add	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	b29b      	uxth	r3, r3
 8006610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b0f      	cmp	r3, #15
 8006616:	d916      	bls.n	8006646 <UART_SetConfig+0x19e>
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661e:	d212      	bcs.n	8006646 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f023 030f 	bic.w	r3, r3, #15
 8006628:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	b29b      	uxth	r3, r3
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	b29a      	uxth	r2, r3
 8006636:	89fb      	ldrh	r3, [r7, #14]
 8006638:	4313      	orrs	r3, r2
 800663a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	89fa      	ldrh	r2, [r7, #14]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e04e      	b.n	80066e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	77bb      	strb	r3, [r7, #30]
 800664a:	e04b      	b.n	80066e4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800664c:	7ffb      	ldrb	r3, [r7, #31]
 800664e:	2b08      	cmp	r3, #8
 8006650:	d827      	bhi.n	80066a2 <UART_SetConfig+0x1fa>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x1b0>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800668d 	.word	0x0800668d
 8006664:	080066a3 	.word	0x080066a3
 8006668:	08006693 	.word	0x08006693
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066a3 	.word	0x080066a3
 8006674:	080066a3 	.word	0x080066a3
 8006678:	0800669b 	.word	0x0800669b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fd fb7a 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8006680:	61b8      	str	r0, [r7, #24]
        break;
 8006682:	e013      	b.n	80066ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fd fb98 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8006688:	61b8      	str	r0, [r7, #24]
        break;
 800668a:	e00f      	b.n	80066ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800668c:	4b20      	ldr	r3, [pc, #128]	; (8006710 <UART_SetConfig+0x268>)
 800668e:	61bb      	str	r3, [r7, #24]
        break;
 8006690:	e00c      	b.n	80066ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006692:	f7fd faf7 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8006696:	61b8      	str	r0, [r7, #24]
        break;
 8006698:	e008      	b.n	80066ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669e:	61bb      	str	r3, [r7, #24]
        break;
 80066a0:	e004      	b.n	80066ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	77bb      	strb	r3, [r7, #30]
        break;
 80066aa:	bf00      	nop
    }

    if (pclk != 0U)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	085a      	lsrs	r2, r3, #1
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	d908      	bls.n	80066e0 <UART_SetConfig+0x238>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d4:	d204      	bcs.n	80066e0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	e001      	b.n	80066e4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	efff69f3 	.word	0xefff69f3
 8006700:	40013800 	.word	0x40013800
 8006704:	40021000 	.word	0x40021000
 8006708:	40004400 	.word	0x40004400
 800670c:	40004800 	.word	0x40004800
 8006710:	007a1200 	.word	0x007a1200

08006714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01a      	beq.n	800682a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006812:	d10a      	bne.n	800682a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af02      	add	r7, sp, #8
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006868:	f003 fbca 	bl	800a000 <HAL_GetTick>
 800686c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b08      	cmp	r3, #8
 800687a:	d10e      	bne.n	800689a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800687c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f82d 	bl	80068ea <UART_WaitOnFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e023      	b.n	80068e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d10e      	bne.n	80068c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f817 	bl	80068ea <UART_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e00d      	b.n	80068e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fa:	e05e      	b.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006902:	d05a      	beq.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006904:	f003 fb7c 	bl	800a000 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	429a      	cmp	r2, r3
 8006912:	d302      	bcc.n	800691a <UART_WaitOnFlagUntilTimeout+0x30>
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d11b      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006928:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0201 	bic.w	r2, r2, #1
 8006938:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e043      	b.n	80069da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d02c      	beq.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696e:	d124      	bne.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006978:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006988:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e00f      	b.n	80069da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4013      	ands	r3, r2
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d091      	beq.n	80068fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2222      	movs	r2, #34	; 0x22
 8006a0c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d02b      	beq.n	8006a6e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	4a25      	ldr	r2, [pc, #148]	; (8006ab0 <UART_Start_Receive_DMA+0xcc>)
 8006a1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	4a24      	ldr	r2, [pc, #144]	; (8006ab4 <UART_Start_Receive_DMA+0xd0>)
 8006a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a23      	ldr	r2, [pc, #140]	; (8006ab8 <UART_Start_Receive_DMA+0xd4>)
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	2200      	movs	r2, #0
 8006a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3324      	adds	r3, #36	; 0x24
 8006a40:	4619      	mov	r1, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	461a      	mov	r2, r3
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	f7fb fd46 	bl	80024da <HAL_DMA_Start_IT>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2210      	movs	r2, #16
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e01c      	b.n	8006aa8 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a84:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0201 	orr.w	r2, r2, #1
 8006a94:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	08006baf 	.word	0x08006baf
 8006ab4:	08006c41 	.word	0x08006c41
 8006ab8:	08006c79 	.word	0x08006c79

08006abc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ad2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006afc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0201 	bic.w	r2, r2, #1
 8006b0c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d107      	bne.n	8006b26 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0210 	bic.w	r2, r2, #16
 8006b24:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d014      	beq.n	8006b84 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b70:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b80:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b82:	e002      	b.n	8006b8a <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f006 ff49 	bl	800da1c <HAL_UART_TxCpltCallback>
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fc57 	bl	8006454 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d02a      	beq.n	8006c1a <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bda:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bfa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d107      	bne.n	8006c1a <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0210 	bic.w	r2, r2, #16
 8006c18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d107      	bne.n	8006c32 <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7ff fc30 	bl	8006490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c30:	e002      	b.n	8006c38 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f006 ff04 	bl	800da40 <HAL_UART_RxCpltCallback>
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d109      	bne.n	8006c6a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4619      	mov	r1, r3
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff fc14 	bl	8006490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c68:	e002      	b.n	8006c70 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7ff fbfc 	bl	8006468 <HAL_UART_RxHalfCpltCallback>
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d109      	bne.n	8006cb4 <UART_DMAError+0x3c>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b21      	cmp	r3, #33	; 0x21
 8006ca4:	d106      	bne.n	8006cb4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006cae:	6978      	ldr	r0, [r7, #20]
 8006cb0:	f7ff ff04 	bl	8006abc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d109      	bne.n	8006cd6 <UART_DMAError+0x5e>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b22      	cmp	r3, #34	; 0x22
 8006cc6:	d106      	bne.n	8006cd6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006cd0:	6978      	ldr	r0, [r7, #20]
 8006cd2:	f7ff ff08 	bl	8006ae6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cdc:	f043 0210 	orr.w	r2, r3, #16
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce6:	6978      	ldr	r0, [r7, #20]
 8006ce8:	f7ff fbc8 	bl	800647c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff fbb2 	bl	800647c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d36:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f006 fe69 	bl	800da1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f103 0208 	add.w	r2, r3, #8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f103 0208 	add.w	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f103 0208 	add.w	r2, r3, #8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1e:	d103      	bne.n	8006e28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	e00c      	b.n	8006e42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e002      	b.n	8006e36 <vListInsert+0x2e>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d2f6      	bcs.n	8006e30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6892      	ldr	r2, [r2, #8]
 8006e90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6852      	ldr	r2, [r2, #4]
 8006e9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d103      	bne.n	8006eae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	1e5a      	subs	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006efa:	f001 ffe3 	bl	8008ec4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	441a      	add	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	22ff      	movs	r2, #255	; 0xff
 8006f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	22ff      	movs	r2, #255	; 0xff
 8006f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d114      	bne.n	8006f7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01a      	beq.n	8006f8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3310      	adds	r3, #16
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 f825 	bl	8007fac <xTaskRemoveFromEventList>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d012      	beq.n	8006f8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <xQueueGenericReset+0xcc>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	e009      	b.n	8006f8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3310      	adds	r3, #16
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fef1 	bl	8006d66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff feec 	bl	8006d66 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f8e:	f001 ffc9 	bl	8008f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f92:	2301      	movs	r3, #1
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericCreate+0x2a>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	613b      	str	r3, [r7, #16]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e004      	b.n	8006fe0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	3348      	adds	r3, #72	; 0x48
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f002 f88f 	bl	8009108 <pvPortMalloc>
 8006fea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	3348      	adds	r3, #72	; 0x48
 8006ff6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff8:	79fa      	ldrb	r2, [r7, #7]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f805 	bl	8007014 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800700a:	69bb      	ldr	r3, [r7, #24]
	}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e002      	b.n	8007036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007042:	2101      	movs	r1, #1
 8007044:	69b8      	ldr	r0, [r7, #24]
 8007046:	f7ff ff43 	bl	8006ed0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08e      	sub	sp, #56	; 0x38
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007062:	2300      	movs	r3, #0
 8007064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <xQueueGenericSend+0x32>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <xQueueGenericSend+0x40>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <xQueueGenericSend+0x44>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <xQueueGenericSend+0x46>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xQueueGenericSend+0x60>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d103      	bne.n	80070c2 <xQueueGenericSend+0x6e>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <xQueueGenericSend+0x72>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueGenericSend+0x74>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	623b      	str	r3, [r7, #32]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e2:	f001 f8bd 	bl	8008260 <xTaskGetSchedulerState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <xQueueGenericSend+0x9e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <xQueueGenericSend+0xa2>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueGenericSend+0xa4>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericSend+0xbe>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	61fb      	str	r3, [r7, #28]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007112:	f001 fed7 	bl	8008ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <xQueueGenericSend+0xd4>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d129      	bne.n	800717c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800712e:	f000 fa07 	bl	8007540 <prvCopyDataToQueue>
 8007132:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d010      	beq.n	800715e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	3324      	adds	r3, #36	; 0x24
 8007140:	4618      	mov	r0, r3
 8007142:	f000 ff33 	bl	8007fac <xTaskRemoveFromEventList>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d013      	beq.n	8007174 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800714c:	4b3f      	ldr	r3, [pc, #252]	; (800724c <xQueueGenericSend+0x1f8>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	e00a      	b.n	8007174 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007164:	4b39      	ldr	r3, [pc, #228]	; (800724c <xQueueGenericSend+0x1f8>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007174:	f001 fed6 	bl	8008f24 <vPortExitCritical>
				return pdPASS;
 8007178:	2301      	movs	r3, #1
 800717a:	e063      	b.n	8007244 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007182:	f001 fecf 	bl	8008f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007186:	2300      	movs	r3, #0
 8007188:	e05c      	b.n	8007244 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4618      	mov	r0, r3
 8007196:	f000 ff6b 	bl	8008070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800719a:	2301      	movs	r3, #1
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800719e:	f001 fec1 	bl	8008f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071a2:	f000 fcbb 	bl	8007b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071a6:	f001 fe8d 	bl	8008ec4 <vPortEnterCritical>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b0:	b25b      	sxtb	r3, r3
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b6:	d103      	bne.n	80071c0 <xQueueGenericSend+0x16c>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071c6:	b25b      	sxtb	r3, r3
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071cc:	d103      	bne.n	80071d6 <xQueueGenericSend+0x182>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071d6:	f001 fea5 	bl	8008f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071da:	1d3a      	adds	r2, r7, #4
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 ff5a 	bl	800809c <xTaskCheckForTimeOut>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d124      	bne.n	8007238 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f0:	f000 fa9e 	bl	8007730 <prvIsQueueFull>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d018      	beq.n	800722c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	3310      	adds	r3, #16
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fe82 	bl	8007f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720a:	f000 fa29 	bl	8007660 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800720e:	f000 fc93 	bl	8007b38 <xTaskResumeAll>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	f47f af7c 	bne.w	8007112 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800721a:	4b0c      	ldr	r3, [pc, #48]	; (800724c <xQueueGenericSend+0x1f8>)
 800721c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	e772      	b.n	8007112 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800722c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722e:	f000 fa17 	bl	8007660 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007232:	f000 fc81 	bl	8007b38 <xTaskResumeAll>
 8007236:	e76c      	b.n	8007112 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800723a:	f000 fa11 	bl	8007660 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800723e:	f000 fc7b 	bl	8007b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007242:	2300      	movs	r3, #0
		}
	}
}
 8007244:	4618      	mov	r0, r3
 8007246:	3738      	adds	r7, #56	; 0x38
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	e000ed04 	.word	0xe000ed04

08007250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08e      	sub	sp, #56	; 0x38
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <xQueueGenericSendFromISR+0x3c>
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <xQueueGenericSendFromISR+0x40>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <xQueueGenericSendFromISR+0x42>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	623b      	str	r3, [r7, #32]
}
 80072a8:	bf00      	nop
 80072aa:	e7fe      	b.n	80072aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d103      	bne.n	80072ba <xQueueGenericSendFromISR+0x6a>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <xQueueGenericSendFromISR+0x6e>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <xQueueGenericSendFromISR+0x70>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	61fb      	str	r3, [r7, #28]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072da:	f001 fed5 	bl	8009088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072de:	f3ef 8211 	mrs	r2, BASEPRI
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	61ba      	str	r2, [r7, #24]
 80072f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <xQueueGenericSendFromISR+0xbc>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d12c      	bne.n	8007366 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731c:	f000 f910 	bl	8007540 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007320:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007328:	d112      	bne.n	8007350 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	3324      	adds	r3, #36	; 0x24
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fe38 	bl	8007fac <xTaskRemoveFromEventList>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00e      	beq.n	8007360 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00b      	beq.n	8007360 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e007      	b.n	8007360 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007350:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007354:	3301      	adds	r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	b25a      	sxtb	r2, r3
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007360:	2301      	movs	r3, #1
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007364:	e001      	b.n	800736a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007374:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007378:	4618      	mov	r0, r3
 800737a:	3738      	adds	r7, #56	; 0x38
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08c      	sub	sp, #48	; 0x30
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800738c:	2300      	movs	r3, #0
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <xQueueReceive+0x30>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	623b      	str	r3, [r7, #32]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <xQueueReceive+0x3e>
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <xQueueReceive+0x42>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <xQueueReceive+0x44>
 80073c2:	2300      	movs	r3, #0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xQueueReceive+0x5e>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	61fb      	str	r3, [r7, #28]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073de:	f000 ff3f 	bl	8008260 <xTaskGetSchedulerState>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <xQueueReceive+0x6e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <xQueueReceive+0x72>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <xQueueReceive+0x74>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xQueueReceive+0x8e>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	61bb      	str	r3, [r7, #24]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800740e:	f001 fd59 	bl	8008ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01f      	beq.n	800745e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007422:	f000 f8f7 	bl	8007614 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	1e5a      	subs	r2, r3, #1
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00f      	beq.n	8007456 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	3310      	adds	r3, #16
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fdb6 	bl	8007fac <xTaskRemoveFromEventList>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007446:	4b3d      	ldr	r3, [pc, #244]	; (800753c <xQueueReceive+0x1bc>)
 8007448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007456:	f001 fd65 	bl	8008f24 <vPortExitCritical>
				return pdPASS;
 800745a:	2301      	movs	r3, #1
 800745c:	e069      	b.n	8007532 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007464:	f001 fd5e 	bl	8008f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007468:	2300      	movs	r3, #0
 800746a:	e062      	b.n	8007532 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007472:	f107 0310 	add.w	r3, r7, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fdfa 	bl	8008070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007480:	f001 fd50 	bl	8008f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007484:	f000 fb4a 	bl	8007b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007488:	f001 fd1c 	bl	8008ec4 <vPortEnterCritical>
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007492:	b25b      	sxtb	r3, r3
 8007494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007498:	d103      	bne.n	80074a2 <xQueueReceive+0x122>
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ae:	d103      	bne.n	80074b8 <xQueueReceive+0x138>
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b8:	f001 fd34 	bl	8008f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074bc:	1d3a      	adds	r2, r7, #4
 80074be:	f107 0310 	add.w	r3, r7, #16
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fde9 	bl	800809c <xTaskCheckForTimeOut>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d123      	bne.n	8007518 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d2:	f000 f917 	bl	8007704 <prvIsQueueEmpty>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	3324      	adds	r3, #36	; 0x24
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fd11 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ec:	f000 f8b8 	bl	8007660 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074f0:	f000 fb22 	bl	8007b38 <xTaskResumeAll>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d189      	bne.n	800740e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <xQueueReceive+0x1bc>)
 80074fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	e780      	b.n	800740e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800750c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750e:	f000 f8a7 	bl	8007660 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007512:	f000 fb11 	bl	8007b38 <xTaskResumeAll>
 8007516:	e77a      	b.n	800740e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751a:	f000 f8a1 	bl	8007660 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800751e:	f000 fb0b 	bl	8007b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007524:	f000 f8ee 	bl	8007704 <prvIsQueueEmpty>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f43f af6f 	beq.w	800740e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007532:	4618      	mov	r0, r3
 8007534:	3730      	adds	r7, #48	; 0x30
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d14d      	bne.n	8007602 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fe96 	bl	800829c <xTaskPriorityDisinherit>
 8007570:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	e043      	b.n	8007602 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d119      	bne.n	80075b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6898      	ldr	r0, [r3, #8]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	461a      	mov	r2, r3
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	f007 fcf0 	bl	800ef70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	441a      	add	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d32b      	bcc.n	8007602 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	609a      	str	r2, [r3, #8]
 80075b2:	e026      	b.n	8007602 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68d8      	ldr	r0, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	461a      	mov	r2, r3
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	f007 fcd6 	bl	800ef70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	425b      	negs	r3, r3
 80075ce:	441a      	add	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d207      	bcs.n	80075f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	425b      	negs	r3, r3
 80075ea:	441a      	add	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d105      	bne.n	8007602 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	3b01      	subs	r3, #1
 8007600:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800760a:	697b      	ldr	r3, [r7, #20]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d018      	beq.n	8007658 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	441a      	add	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d303      	bcc.n	8007648 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68d9      	ldr	r1, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	461a      	mov	r2, r3
 8007652:	6838      	ldr	r0, [r7, #0]
 8007654:	f007 fc8c 	bl	800ef70 <memcpy>
	}
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007668:	f001 fc2c 	bl	8008ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007672:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007674:	e011      	b.n	800769a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d012      	beq.n	80076a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3324      	adds	r3, #36	; 0x24
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fc92 	bl	8007fac <xTaskRemoveFromEventList>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800768e:	f000 fd5f 	bl	8008150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	3b01      	subs	r3, #1
 8007696:	b2db      	uxtb	r3, r3
 8007698:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800769a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	dce9      	bgt.n	8007676 <prvUnlockQueue+0x16>
 80076a2:	e000      	b.n	80076a6 <prvUnlockQueue+0x46>
					break;
 80076a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	22ff      	movs	r2, #255	; 0xff
 80076aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076ae:	f001 fc39 	bl	8008f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076b2:	f001 fc07 	bl	8008ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076be:	e011      	b.n	80076e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d012      	beq.n	80076ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3310      	adds	r3, #16
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fc6d 	bl	8007fac <xTaskRemoveFromEventList>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076d8:	f000 fd3a 	bl	8008150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	3b01      	subs	r3, #1
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dce9      	bgt.n	80076c0 <prvUnlockQueue+0x60>
 80076ec:	e000      	b.n	80076f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	22ff      	movs	r2, #255	; 0xff
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076f8:	f001 fc14 	bl	8008f24 <vPortExitCritical>
}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800770c:	f001 fbda 	bl	8008ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e001      	b.n	8007722 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007722:	f001 fbff 	bl	8008f24 <vPortExitCritical>

	return xReturn;
 8007726:	68fb      	ldr	r3, [r7, #12]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007738:	f001 fbc4 	bl	8008ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007744:	429a      	cmp	r2, r3
 8007746:	d102      	bne.n	800774e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e001      	b.n	8007752 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007752:	f001 fbe7 	bl	8008f24 <vPortExitCritical>

	return xReturn;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e014      	b.n	800779a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007770:	4a0f      	ldr	r2, [pc, #60]	; (80077b0 <vQueueAddToRegistry+0x50>)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10b      	bne.n	8007794 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800777c:	490c      	ldr	r1, [pc, #48]	; (80077b0 <vQueueAddToRegistry+0x50>)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007786:	4a0a      	ldr	r2, [pc, #40]	; (80077b0 <vQueueAddToRegistry+0x50>)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007792:	e006      	b.n	80077a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b07      	cmp	r3, #7
 800779e:	d9e7      	bls.n	8007770 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	200025e0 	.word	0x200025e0

080077b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077c4:	f001 fb7e 	bl	8008ec4 <vPortEnterCritical>
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ce:	b25b      	sxtb	r3, r3
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d4:	d103      	bne.n	80077de <vQueueWaitForMessageRestricted+0x2a>
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ea:	d103      	bne.n	80077f4 <vQueueWaitForMessageRestricted+0x40>
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f4:	f001 fb96 	bl	8008f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	3324      	adds	r3, #36	; 0x24
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	68b9      	ldr	r1, [r7, #8]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fba3 	bl	8007f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800780e:	6978      	ldr	r0, [r7, #20]
 8007810:	f7ff ff26 	bl	8007660 <prvUnlockQueue>
	}
 8007814:	bf00      	nop
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08c      	sub	sp, #48	; 0x30
 8007820:	af04      	add	r7, sp, #16
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4618      	mov	r0, r3
 8007832:	f001 fc69 	bl	8009108 <pvPortMalloc>
 8007836:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00e      	beq.n	800785c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800783e:	2054      	movs	r0, #84	; 0x54
 8007840:	f001 fc62 	bl	8009108 <pvPortMalloc>
 8007844:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	631a      	str	r2, [r3, #48]	; 0x30
 8007852:	e005      	b.n	8007860 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007854:	6978      	ldr	r0, [r7, #20]
 8007856:	f001 fca9 	bl	80091ac <vPortFree>
 800785a:	e001      	b.n	8007860 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d013      	beq.n	800788e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	2300      	movs	r3, #0
 800786a:	9303      	str	r3, [sp, #12]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	9302      	str	r3, [sp, #8]
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f80e 	bl	800789e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007882:	69f8      	ldr	r0, [r7, #28]
 8007884:	f000 f892 	bl	80079ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007888:	2301      	movs	r3, #1
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	e002      	b.n	8007894 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800788e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007892:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007894:	69bb      	ldr	r3, [r7, #24]
	}
 8007896:	4618      	mov	r0, r3
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b088      	sub	sp, #32
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	461a      	mov	r2, r3
 80078b6:	21a5      	movs	r1, #165	; 0xa5
 80078b8:	f007 fb68 	bl	800ef8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078c6:	3b01      	subs	r3, #1
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	617b      	str	r3, [r7, #20]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078f6:	2300      	movs	r3, #0
 80078f8:	61fb      	str	r3, [r7, #28]
 80078fa:	e012      	b.n	8007922 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	4413      	add	r3, r2
 8007902:	7819      	ldrb	r1, [r3, #0]
 8007904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	3334      	adds	r3, #52	; 0x34
 800790c:	460a      	mov	r2, r1
 800790e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	3301      	adds	r3, #1
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b0f      	cmp	r3, #15
 8007926:	d9e9      	bls.n	80078fc <prvInitialiseNewTask+0x5e>
 8007928:	e000      	b.n	800792c <prvInitialiseNewTask+0x8e>
		{
			break;
 800792a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2b06      	cmp	r3, #6
 8007938:	d901      	bls.n	800793e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800793a:	2306      	movs	r3, #6
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007942:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007948:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	2200      	movs	r2, #0
 800794e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	3304      	adds	r3, #4
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fa26 	bl	8006da6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	3318      	adds	r3, #24
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fa21 	bl	8006da6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007968:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	f1c3 0207 	rsb	r2, r3, #7
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007978:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2200      	movs	r2, #0
 800797e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	69b8      	ldr	r0, [r7, #24]
 800798e:	f001 f96d 	bl	8008c6c <pxPortInitialiseStack>
 8007992:	4602      	mov	r2, r0
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079a4:	bf00      	nop
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079b4:	f001 fa86 	bl	8008ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079b8:	4b2a      	ldr	r3, [pc, #168]	; (8007a64 <prvAddNewTaskToReadyList+0xb8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	4a29      	ldr	r2, [pc, #164]	; (8007a64 <prvAddNewTaskToReadyList+0xb8>)
 80079c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079c2:	4b29      	ldr	r3, [pc, #164]	; (8007a68 <prvAddNewTaskToReadyList+0xbc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079ca:	4a27      	ldr	r2, [pc, #156]	; (8007a68 <prvAddNewTaskToReadyList+0xbc>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079d0:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <prvAddNewTaskToReadyList+0xb8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d110      	bne.n	80079fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079d8:	f000 fbde 	bl	8008198 <prvInitialiseTaskLists>
 80079dc:	e00d      	b.n	80079fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079de:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <prvAddNewTaskToReadyList+0xc0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d109      	bne.n	80079fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079e6:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <prvAddNewTaskToReadyList+0xbc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d802      	bhi.n	80079fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <prvAddNewTaskToReadyList+0xbc>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <prvAddNewTaskToReadyList+0xc4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3301      	adds	r3, #1
 8007a00:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <prvAddNewTaskToReadyList+0xc4>)
 8007a02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	2201      	movs	r2, #1
 8007a0a:	409a      	lsls	r2, r3
 8007a0c:	4b19      	ldr	r3, [pc, #100]	; (8007a74 <prvAddNewTaskToReadyList+0xc8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <prvAddNewTaskToReadyList+0xc8>)
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <prvAddNewTaskToReadyList+0xcc>)
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7ff f9c7 	bl	8006dc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a32:	f001 fa77 	bl	8008f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a36:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <prvAddNewTaskToReadyList+0xc0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00e      	beq.n	8007a5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a3e:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <prvAddNewTaskToReadyList+0xbc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d207      	bcs.n	8007a5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <prvAddNewTaskToReadyList+0xd0>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	2000019c 	.word	0x2000019c
 8007a68:	200000c8 	.word	0x200000c8
 8007a6c:	200001a8 	.word	0x200001a8
 8007a70:	200001b8 	.word	0x200001b8
 8007a74:	200001a4 	.word	0x200001a4
 8007a78:	200000cc 	.word	0x200000cc
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007a86:	4b1f      	ldr	r3, [pc, #124]	; (8007b04 <vTaskStartScheduler+0x84>)
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2280      	movs	r2, #128	; 0x80
 8007a92:	491d      	ldr	r1, [pc, #116]	; (8007b08 <vTaskStartScheduler+0x88>)
 8007a94:	481d      	ldr	r0, [pc, #116]	; (8007b0c <vTaskStartScheduler+0x8c>)
 8007a96:	f7ff fec1 	bl	800781c <xTaskCreate>
 8007a9a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d102      	bne.n	8007aa8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8007aa2:	f000 fdc1 	bl	8008628 <xTimerCreateTimerTask>
 8007aa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d116      	bne.n	8007adc <vTaskStartScheduler+0x5c>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60bb      	str	r3, [r7, #8]
}
 8007ac0:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <vTaskStartScheduler+0x90>)
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <vTaskStartScheduler+0x94>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <vTaskStartScheduler+0x98>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ad6:	f001 f953 	bl	8008d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ada:	e00e      	b.n	8007afa <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae2:	d10a      	bne.n	8007afa <vTaskStartScheduler+0x7a>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	607b      	str	r3, [r7, #4]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <vTaskStartScheduler+0x78>
}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200001c0 	.word	0x200001c0
 8007b08:	0800f238 	.word	0x0800f238
 8007b0c:	08008169 	.word	0x08008169
 8007b10:	200001bc 	.word	0x200001bc
 8007b14:	200001a8 	.word	0x200001a8
 8007b18:	200001a0 	.word	0x200001a0

08007b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <vTaskSuspendAll+0x18>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a03      	ldr	r2, [pc, #12]	; (8007b34 <vTaskSuspendAll+0x18>)
 8007b28:	6013      	str	r3, [r2, #0]
}
 8007b2a:	bf00      	nop
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	200001c4 	.word	0x200001c4

08007b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b46:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	603b      	str	r3, [r7, #0]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b64:	f001 f9ae 	bl	8008ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b68:	4b38      	ldr	r3, [pc, #224]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a37      	ldr	r2, [pc, #220]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b72:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <xTaskResumeAll+0x114>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d161      	bne.n	8007c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b7a:	4b35      	ldr	r3, [pc, #212]	; (8007c50 <xTaskResumeAll+0x118>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d05d      	beq.n	8007c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b82:	e02e      	b.n	8007be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007b84:	4b33      	ldr	r3, [pc, #204]	; (8007c54 <xTaskResumeAll+0x11c>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3318      	adds	r3, #24
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f972 	bl	8006e7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff f96d 	bl	8006e7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	409a      	lsls	r2, r3
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <xTaskResumeAll+0x120>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <xTaskResumeAll+0x120>)
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4a27      	ldr	r2, [pc, #156]	; (8007c5c <xTaskResumeAll+0x124>)
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7ff f8f9 	bl	8006dc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	4b23      	ldr	r3, [pc, #140]	; (8007c60 <xTaskResumeAll+0x128>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d302      	bcc.n	8007be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007bdc:	4b21      	ldr	r3, [pc, #132]	; (8007c64 <xTaskResumeAll+0x12c>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007be2:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <xTaskResumeAll+0x11c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1cc      	bne.n	8007b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bf0:	f000 fb10 	bl	8008214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <xTaskResumeAll+0x130>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d010      	beq.n	8007c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c00:	f000 f846 	bl	8007c90 <xTaskIncrementTick>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <xTaskResumeAll+0x12c>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f1      	bne.n	8007c00 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007c1c:	4b12      	ldr	r3, [pc, #72]	; (8007c68 <xTaskResumeAll+0x130>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c22:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <xTaskResumeAll+0x12c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <xTaskResumeAll+0x134>)
 8007c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c3e:	f001 f971 	bl	8008f24 <vPortExitCritical>

	return xAlreadyYielded;
 8007c42:	68bb      	ldr	r3, [r7, #8]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	200001c4 	.word	0x200001c4
 8007c50:	2000019c 	.word	0x2000019c
 8007c54:	20000188 	.word	0x20000188
 8007c58:	200001a4 	.word	0x200001a4
 8007c5c:	200000cc 	.word	0x200000cc
 8007c60:	200000c8 	.word	0x200000c8
 8007c64:	200001b0 	.word	0x200001b0
 8007c68:	200001ac 	.word	0x200001ac
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <xTaskGetTickCount+0x1c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c7c:	687b      	ldr	r3, [r7, #4]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	200001a0 	.word	0x200001a0

08007c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c9a:	4b51      	ldr	r3, [pc, #324]	; (8007de0 <xTaskIncrementTick+0x150>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 808d 	bne.w	8007dbe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ca4:	4b4f      	ldr	r3, [pc, #316]	; (8007de4 <xTaskIncrementTick+0x154>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cac:	4a4d      	ldr	r2, [pc, #308]	; (8007de4 <xTaskIncrementTick+0x154>)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d120      	bne.n	8007cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cb8:	4b4b      	ldr	r3, [pc, #300]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	603b      	str	r3, [r7, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xTaskIncrementTick+0x46>
 8007cd8:	4b43      	ldr	r3, [pc, #268]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	4b43      	ldr	r3, [pc, #268]	; (8007dec <xTaskIncrementTick+0x15c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a41      	ldr	r2, [pc, #260]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4a41      	ldr	r2, [pc, #260]	; (8007dec <xTaskIncrementTick+0x15c>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4b40      	ldr	r3, [pc, #256]	; (8007df0 <xTaskIncrementTick+0x160>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	4a3f      	ldr	r2, [pc, #252]	; (8007df0 <xTaskIncrementTick+0x160>)
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f000 fa8d 	bl	8008214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cfa:	4b3e      	ldr	r3, [pc, #248]	; (8007df4 <xTaskIncrementTick+0x164>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d34d      	bcc.n	8007da0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d04:	4b38      	ldr	r3, [pc, #224]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <xTaskIncrementTick+0x82>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <xTaskIncrementTick+0x84>
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d18:	4b36      	ldr	r3, [pc, #216]	; (8007df4 <xTaskIncrementTick+0x164>)
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d1e:	601a      	str	r2, [r3, #0]
					break;
 8007d20:	e03e      	b.n	8007da0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d22:	4b31      	ldr	r3, [pc, #196]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d203      	bcs.n	8007d42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d3a:	4a2e      	ldr	r2, [pc, #184]	; (8007df4 <xTaskIncrementTick+0x164>)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6013      	str	r3, [r2, #0]
						break;
 8007d40:	e02e      	b.n	8007da0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff f897 	bl	8006e7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d004      	beq.n	8007d5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3318      	adds	r3, #24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff f88e 	bl	8006e7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	2201      	movs	r2, #1
 8007d64:	409a      	lsls	r2, r3
 8007d66:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <xTaskIncrementTick+0x168>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	4a22      	ldr	r2, [pc, #136]	; (8007df8 <xTaskIncrementTick+0x168>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4a1f      	ldr	r2, [pc, #124]	; (8007dfc <xTaskIncrementTick+0x16c>)
 8007d7e:	441a      	add	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7ff f81a 	bl	8006dc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d90:	4b1b      	ldr	r3, [pc, #108]	; (8007e00 <xTaskIncrementTick+0x170>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d3b4      	bcc.n	8007d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d9e:	e7b1      	b.n	8007d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007da0:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <xTaskIncrementTick+0x170>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da6:	4915      	ldr	r1, [pc, #84]	; (8007dfc <xTaskIncrementTick+0x16c>)
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d907      	bls.n	8007dc8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e004      	b.n	8007dc8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007dbe:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <xTaskIncrementTick+0x174>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a0f      	ldr	r2, [pc, #60]	; (8007e04 <xTaskIncrementTick+0x174>)
 8007dc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <xTaskIncrementTick+0x178>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007dd4:	697b      	ldr	r3, [r7, #20]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	200001c4 	.word	0x200001c4
 8007de4:	200001a0 	.word	0x200001a0
 8007de8:	20000180 	.word	0x20000180
 8007dec:	20000184 	.word	0x20000184
 8007df0:	200001b4 	.word	0x200001b4
 8007df4:	200001bc 	.word	0x200001bc
 8007df8:	200001a4 	.word	0x200001a4
 8007dfc:	200000cc 	.word	0x200000cc
 8007e00:	200000c8 	.word	0x200000c8
 8007e04:	200001ac 	.word	0x200001ac
 8007e08:	200001b0 	.word	0x200001b0

08007e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e12:	4b39      	ldr	r3, [pc, #228]	; (8007ef8 <vTaskSwitchContext+0xec>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e1a:	4b38      	ldr	r3, [pc, #224]	; (8007efc <vTaskSwitchContext+0xf0>)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e20:	e066      	b.n	8007ef0 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8007e22:	4b36      	ldr	r3, [pc, #216]	; (8007efc <vTaskSwitchContext+0xf0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007e28:	4b35      	ldr	r3, [pc, #212]	; (8007f00 <vTaskSwitchContext+0xf4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d111      	bne.n	8007e64 <vTaskSwitchContext+0x58>
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	3304      	adds	r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d10b      	bne.n	8007e64 <vTaskSwitchContext+0x58>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d105      	bne.n	8007e64 <vTaskSwitchContext+0x58>
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d008      	beq.n	8007e76 <vTaskSwitchContext+0x6a>
 8007e64:	4b26      	ldr	r3, [pc, #152]	; (8007f00 <vTaskSwitchContext+0xf4>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <vTaskSwitchContext+0xf4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3334      	adds	r3, #52	; 0x34
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f002 f8bf 	bl	8009ff4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e76:	4b23      	ldr	r3, [pc, #140]	; (8007f04 <vTaskSwitchContext+0xf8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	fab3 f383 	clz	r3, r3
 8007e82:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	f1c3 031f 	rsb	r3, r3, #31
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	491e      	ldr	r1, [pc, #120]	; (8007f08 <vTaskSwitchContext+0xfc>)
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <vTaskSwitchContext+0xaa>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	607b      	str	r3, [r7, #4]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <vTaskSwitchContext+0xa8>
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a11      	ldr	r2, [pc, #68]	; (8007f08 <vTaskSwitchContext+0xfc>)
 8007ec2:	4413      	add	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d104      	bne.n	8007ee6 <vTaskSwitchContext+0xda>
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4a04      	ldr	r2, [pc, #16]	; (8007f00 <vTaskSwitchContext+0xf4>)
 8007eee:	6013      	str	r3, [r2, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	3720      	adds	r7, #32
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	200001c4 	.word	0x200001c4
 8007efc:	200001b0 	.word	0x200001b0
 8007f00:	200000c8 	.word	0x200000c8
 8007f04:	200001a4 	.word	0x200001a4
 8007f08:	200000cc 	.word	0x200000cc

08007f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vTaskPlaceOnEventList+0x44>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe ff64 	bl	8006e08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f40:	2101      	movs	r1, #1
 8007f42:	6838      	ldr	r0, [r7, #0]
 8007f44:	f000 fb1c 	bl	8008580 <prvAddCurrentTaskToDelayedList>
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	200000c8 	.word	0x200000c8

08007f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	617b      	str	r3, [r7, #20]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3318      	adds	r3, #24
 8007f82:	4619      	mov	r1, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7fe ff1b 	bl	8006dc0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	68b8      	ldr	r0, [r7, #8]
 8007f9a:	f000 faf1 	bl	8008580 <prvAddCurrentTaskToDelayedList>
	}
 8007f9e:	bf00      	nop
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200000c8 	.word	0x200000c8

08007fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3318      	adds	r3, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe ff4c 	bl	8006e7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <xTaskRemoveFromEventList+0xac>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d11c      	bne.n	8008024 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe ff43 	bl	8006e7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	4b17      	ldr	r3, [pc, #92]	; (800805c <xTaskRemoveFromEventList+0xb0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4313      	orrs	r3, r2
 8008002:	4a16      	ldr	r2, [pc, #88]	; (800805c <xTaskRemoveFromEventList+0xb0>)
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4a13      	ldr	r2, [pc, #76]	; (8008060 <xTaskRemoveFromEventList+0xb4>)
 8008014:	441a      	add	r2, r3
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f7fe fecf 	bl	8006dc0 <vListInsertEnd>
 8008022:	e005      	b.n	8008030 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	3318      	adds	r3, #24
 8008028:	4619      	mov	r1, r3
 800802a:	480e      	ldr	r0, [pc, #56]	; (8008064 <xTaskRemoveFromEventList+0xb8>)
 800802c:	f7fe fec8 	bl	8006dc0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <xTaskRemoveFromEventList+0xbc>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	429a      	cmp	r2, r3
 800803c:	d905      	bls.n	800804a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800803e:	2301      	movs	r3, #1
 8008040:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008042:	4b0a      	ldr	r3, [pc, #40]	; (800806c <xTaskRemoveFromEventList+0xc0>)
 8008044:	2201      	movs	r2, #1
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e001      	b.n	800804e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800804e:	697b      	ldr	r3, [r7, #20]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200001c4 	.word	0x200001c4
 800805c:	200001a4 	.word	0x200001a4
 8008060:	200000cc 	.word	0x200000cc
 8008064:	20000188 	.word	0x20000188
 8008068:	200000c8 	.word	0x200000c8
 800806c:	200001b0 	.word	0x200001b0

08008070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <vTaskInternalSetTimeOutState+0x24>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <vTaskInternalSetTimeOutState+0x28>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	200001b4 	.word	0x200001b4
 8008098:	200001a0 	.word	0x200001a0

0800809c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	613b      	str	r3, [r7, #16]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60fb      	str	r3, [r7, #12]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080de:	f000 fef1 	bl	8008ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080e2:	4b19      	ldr	r3, [pc, #100]	; (8008148 <xTaskCheckForTimeOut+0xac>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b15      	ldr	r3, [pc, #84]	; (800814c <xTaskCheckForTimeOut+0xb0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d007      	beq.n	800810e <xTaskCheckForTimeOut+0x72>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d302      	bcc.n	800810e <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e015      	b.n	800813a <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	429a      	cmp	r2, r3
 8008116:	d20b      	bcs.n	8008130 <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ffa3 	bl	8008070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	e004      	b.n	800813a <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008136:	2301      	movs	r3, #1
 8008138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800813a:	f000 fef3 	bl	8008f24 <vPortExitCritical>

	return xReturn;
 800813e:	69fb      	ldr	r3, [r7, #28]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	200001a0 	.word	0x200001a0
 800814c:	200001b4 	.word	0x200001b4

08008150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008154:	4b03      	ldr	r3, [pc, #12]	; (8008164 <vTaskMissedYield+0x14>)
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	200001b0 	.word	0x200001b0

08008168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008170:	f000 f848 	bl	8008204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008174:	4b06      	ldr	r3, [pc, #24]	; (8008190 <prvIdleTask+0x28>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d9f9      	bls.n	8008170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800817c:	4b05      	ldr	r3, [pc, #20]	; (8008194 <prvIdleTask+0x2c>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800818c:	e7f0      	b.n	8008170 <prvIdleTask+0x8>
 800818e:	bf00      	nop
 8008190:	200000cc 	.word	0x200000cc
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800819e:	2300      	movs	r3, #0
 80081a0:	607b      	str	r3, [r7, #4]
 80081a2:	e00c      	b.n	80081be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4a0f      	ldr	r2, [pc, #60]	; (80081ec <prvInitialiseTaskLists+0x54>)
 80081b0:	4413      	add	r3, r2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fdd7 	bl	8006d66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3301      	adds	r3, #1
 80081bc:	607b      	str	r3, [r7, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b06      	cmp	r3, #6
 80081c2:	d9ef      	bls.n	80081a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081c4:	480a      	ldr	r0, [pc, #40]	; (80081f0 <prvInitialiseTaskLists+0x58>)
 80081c6:	f7fe fdce 	bl	8006d66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081ca:	480a      	ldr	r0, [pc, #40]	; (80081f4 <prvInitialiseTaskLists+0x5c>)
 80081cc:	f7fe fdcb 	bl	8006d66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081d0:	4809      	ldr	r0, [pc, #36]	; (80081f8 <prvInitialiseTaskLists+0x60>)
 80081d2:	f7fe fdc8 	bl	8006d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <prvInitialiseTaskLists+0x64>)
 80081d8:	4a05      	ldr	r2, [pc, #20]	; (80081f0 <prvInitialiseTaskLists+0x58>)
 80081da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <prvInitialiseTaskLists+0x68>)
 80081de:	4a05      	ldr	r2, [pc, #20]	; (80081f4 <prvInitialiseTaskLists+0x5c>)
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	200000cc 	.word	0x200000cc
 80081f0:	20000158 	.word	0x20000158
 80081f4:	2000016c 	.word	0x2000016c
 80081f8:	20000188 	.word	0x20000188
 80081fc:	20000180 	.word	0x20000180
 8008200:	20000184 	.word	0x20000184

08008204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800821a:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <prvResetNextTaskUnblockTime+0x44>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <prvResetNextTaskUnblockTime+0x14>
 8008224:	2301      	movs	r3, #1
 8008226:	e000      	b.n	800822a <prvResetNextTaskUnblockTime+0x16>
 8008228:	2300      	movs	r3, #0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <prvResetNextTaskUnblockTime+0x48>)
 8008230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008234:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008236:	e008      	b.n	800824a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008238:	4b07      	ldr	r3, [pc, #28]	; (8008258 <prvResetNextTaskUnblockTime+0x44>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	4a05      	ldr	r2, [pc, #20]	; (800825c <prvResetNextTaskUnblockTime+0x48>)
 8008248:	6013      	str	r3, [r2, #0]
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20000180 	.word	0x20000180
 800825c:	200001bc 	.word	0x200001bc

08008260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <xTaskGetSchedulerState+0x34>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800826e:	2301      	movs	r3, #1
 8008270:	607b      	str	r3, [r7, #4]
 8008272:	e008      	b.n	8008286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008274:	4b08      	ldr	r3, [pc, #32]	; (8008298 <xTaskGetSchedulerState+0x38>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800827c:	2302      	movs	r3, #2
 800827e:	607b      	str	r3, [r7, #4]
 8008280:	e001      	b.n	8008286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008286:	687b      	ldr	r3, [r7, #4]
	}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	200001a8 	.word	0x200001a8
 8008298:	200001c4 	.word	0x200001c4

0800829c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d06e      	beq.n	8008390 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082b2:	4b3a      	ldr	r3, [pc, #232]	; (800839c <xTaskPriorityDisinherit+0x100>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d00a      	beq.n	80082d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60fb      	str	r3, [r7, #12]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60bb      	str	r3, [r7, #8]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f4:	1e5a      	subs	r2, r3, #1
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	429a      	cmp	r2, r3
 8008304:	d044      	beq.n	8008390 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830a:	2b00      	cmp	r3, #0
 800830c:	d140      	bne.n	8008390 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	3304      	adds	r3, #4
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fdb1 	bl	8006e7a <uxListRemove>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d115      	bne.n	800834a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	491f      	ldr	r1, [pc, #124]	; (80083a0 <xTaskPriorityDisinherit+0x104>)
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xTaskPriorityDisinherit+0xae>
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	2201      	movs	r2, #1
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	43da      	mvns	r2, r3
 8008340:	4b18      	ldr	r3, [pc, #96]	; (80083a4 <xTaskPriorityDisinherit+0x108>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4013      	ands	r3, r2
 8008346:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <xTaskPriorityDisinherit+0x108>)
 8008348:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	f1c3 0207 	rsb	r2, r3, #7
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	2201      	movs	r2, #1
 8008364:	409a      	lsls	r2, r3
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <xTaskPriorityDisinherit+0x108>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4313      	orrs	r3, r2
 800836c:	4a0d      	ldr	r2, [pc, #52]	; (80083a4 <xTaskPriorityDisinherit+0x108>)
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4a08      	ldr	r2, [pc, #32]	; (80083a0 <xTaskPriorityDisinherit+0x104>)
 800837e:	441a      	add	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f7fe fd1a 	bl	8006dc0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800838c:	2301      	movs	r3, #1
 800838e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008390:	697b      	ldr	r3, [r7, #20]
	}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200000c8 	.word	0x200000c8
 80083a0:	200000cc 	.word	0x200000cc
 80083a4:	200001a4 	.word	0x200001a4

080083a8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80083b2:	f000 fd87 	bl	8008ec4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80083b6:	4b1e      	ldr	r3, [pc, #120]	; (8008430 <ulTaskNotifyTake+0x88>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d113      	bne.n	80083e8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80083c0:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <ulTaskNotifyTake+0x88>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083d0:	2101      	movs	r1, #1
 80083d2:	6838      	ldr	r0, [r7, #0]
 80083d4:	f000 f8d4 	bl	8008580 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80083d8:	4b16      	ldr	r3, [pc, #88]	; (8008434 <ulTaskNotifyTake+0x8c>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80083e8:	f000 fd9c 	bl	8008f24 <vPortExitCritical>

		taskENTER_CRITICAL();
 80083ec:	f000 fd6a 	bl	8008ec4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80083f0:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <ulTaskNotifyTake+0x88>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00c      	beq.n	8008418 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008404:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <ulTaskNotifyTake+0x88>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	64da      	str	r2, [r3, #76]	; 0x4c
 800840c:	e004      	b.n	8008418 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800840e:	4b08      	ldr	r3, [pc, #32]	; (8008430 <ulTaskNotifyTake+0x88>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	3a01      	subs	r2, #1
 8008416:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008418:	4b05      	ldr	r3, [pc, #20]	; (8008430 <ulTaskNotifyTake+0x88>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8008422:	f000 fd7f 	bl	8008f24 <vPortExitCritical>

		return ulReturn;
 8008426:	68fb      	ldr	r3, [r7, #12]
	}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	200000c8 	.word	0x200000c8
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08a      	sub	sp, #40	; 0x28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	4613      	mov	r3, r2
 8008446:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008448:	2301      	movs	r3, #1
 800844a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <xTaskGenericNotify+0x30>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	61bb      	str	r3, [r7, #24]
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800846c:	f000 fd2a 	bl	8008ec4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008484:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	2b04      	cmp	r3, #4
 8008492:	d828      	bhi.n	80084e6 <xTaskGenericNotify+0xae>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <xTaskGenericNotify+0x64>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084e7 	.word	0x080084e7
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084bf 	.word	0x080084bf
 80084a8:	080084cb 	.word	0x080084cb
 80084ac:	080084d3 	.word	0x080084d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80084bc:	e013      	b.n	80084e6 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80084c8:	e00d      	b.n	80084e6 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80084d0:	e009      	b.n	80084e6 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80084d2:	7ffb      	ldrb	r3, [r7, #31]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d003      	beq.n	80084e0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80084de:	e001      	b.n	80084e4 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80084e4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80084e6:	7ffb      	ldrb	r3, [r7, #31]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d139      	bne.n	8008560 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fcc2 	bl	8006e7a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	2201      	movs	r2, #1
 80084fc:	409a      	lsls	r2, r3
 80084fe:	4b1c      	ldr	r3, [pc, #112]	; (8008570 <xTaskGenericNotify+0x138>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4313      	orrs	r3, r2
 8008504:	4a1a      	ldr	r2, [pc, #104]	; (8008570 <xTaskGenericNotify+0x138>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4a17      	ldr	r2, [pc, #92]	; (8008574 <xTaskGenericNotify+0x13c>)
 8008516:	441a      	add	r2, r3
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	3304      	adds	r3, #4
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7fe fc4e 	bl	8006dc0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <xTaskGenericNotify+0x10a>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	617b      	str	r3, [r7, #20]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <xTaskGenericNotify+0x140>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d907      	bls.n	8008560 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <xTaskGenericNotify+0x144>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008560:	f000 fce0 	bl	8008f24 <vPortExitCritical>

		return xReturn;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008566:	4618      	mov	r0, r3
 8008568:	3728      	adds	r7, #40	; 0x28
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200001a4 	.word	0x200001a4
 8008574:	200000cc 	.word	0x200000cc
 8008578:	200000c8 	.word	0x200000c8
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800858a:	4b21      	ldr	r3, [pc, #132]	; (8008610 <prvAddCurrentTaskToDelayedList+0x90>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008590:	4b20      	ldr	r3, [pc, #128]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3304      	adds	r3, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fc6f 	bl	8006e7a <uxListRemove>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10b      	bne.n	80085ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80085a2:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	2201      	movs	r2, #1
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	43da      	mvns	r2, r3
 80085b0:	4b19      	ldr	r3, [pc, #100]	; (8008618 <prvAddCurrentTaskToDelayedList+0x98>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4013      	ands	r3, r2
 80085b6:	4a18      	ldr	r2, [pc, #96]	; (8008618 <prvAddCurrentTaskToDelayedList+0x98>)
 80085b8:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4413      	add	r3, r2
 80085c0:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085c2:	4b14      	ldr	r3, [pc, #80]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d209      	bcs.n	80085e6 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d2:	4b12      	ldr	r3, [pc, #72]	; (800861c <prvAddCurrentTaskToDelayedList+0x9c>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fe fc12 	bl	8006e08 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085e4:	e010      	b.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085e6:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7fe fc08 	bl	8006e08 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80085f8:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d202      	bcs.n	8008608 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8008602:	4a08      	ldr	r2, [pc, #32]	; (8008624 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6013      	str	r3, [r2, #0]
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	200001a0 	.word	0x200001a0
 8008614:	200000c8 	.word	0x200000c8
 8008618:	200001a4 	.word	0x200001a4
 800861c:	20000184 	.word	0x20000184
 8008620:	20000180 	.word	0x20000180
 8008624:	200001bc 	.word	0x200001bc

08008628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800862e:	2300      	movs	r3, #0
 8008630:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008632:	f000 fae5 	bl	8008c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <xTimerCreateTimerTask+0x54>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800863e:	4b10      	ldr	r3, [pc, #64]	; (8008680 <xTimerCreateTimerTask+0x58>)
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	2306      	movs	r3, #6
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	2300      	movs	r3, #0
 8008648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800864c:	490d      	ldr	r1, [pc, #52]	; (8008684 <xTimerCreateTimerTask+0x5c>)
 800864e:	480e      	ldr	r0, [pc, #56]	; (8008688 <xTimerCreateTimerTask+0x60>)
 8008650:	f7ff f8e4 	bl	800781c <xTaskCreate>
 8008654:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	603b      	str	r3, [r7, #0]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8008672:	687b      	ldr	r3, [r7, #4]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200001f8 	.word	0x200001f8
 8008680:	200001fc 	.word	0x200001fc
 8008684:	0800f240 	.word	0x0800f240
 8008688:	08008849 	.word	0x08008849

0800868c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800869a:	2028      	movs	r0, #40	; 0x28
 800869c:	f000 fd34 	bl	8009108 <pvPortMalloc>
 80086a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f805 	bl	80086c6 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80086bc:	697b      	ldr	r3, [r7, #20]
	}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	617b      	str	r3, [r7, #20]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d015      	beq.n	8008722 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80086f6:	f000 fa83 	bl	8008c00 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	6a3a      	ldr	r2, [r7, #32]
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	3304      	adds	r3, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fb42 	bl	8006da6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008722:	bf00      	nop
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08a      	sub	sp, #40	; 0x28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800873a:	2300      	movs	r3, #0
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	623b      	str	r3, [r7, #32]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800875a:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <xTimerGenericCommand+0x98>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d02a      	beq.n	80087b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b05      	cmp	r3, #5
 8008772:	dc18      	bgt.n	80087a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008774:	f7ff fd74 	bl	8008260 <xTaskGetSchedulerState>
 8008778:	4603      	mov	r3, r0
 800877a:	2b02      	cmp	r3, #2
 800877c:	d109      	bne.n	8008792 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <xTimerGenericCommand+0x98>)
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f107 0114 	add.w	r1, r7, #20
 8008786:	2300      	movs	r3, #0
 8008788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878a:	f7fe fc63 	bl	8007054 <xQueueGenericSend>
 800878e:	6278      	str	r0, [r7, #36]	; 0x24
 8008790:	e012      	b.n	80087b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008792:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <xTimerGenericCommand+0x98>)
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	f107 0114 	add.w	r1, r7, #20
 800879a:	2300      	movs	r3, #0
 800879c:	2200      	movs	r2, #0
 800879e:	f7fe fc59 	bl	8007054 <xQueueGenericSend>
 80087a2:	6278      	str	r0, [r7, #36]	; 0x24
 80087a4:	e008      	b.n	80087b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087a6:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <xTimerGenericCommand+0x98>)
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	f107 0114 	add.w	r1, r7, #20
 80087ae:	2300      	movs	r3, #0
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	f7fe fd4d 	bl	8007250 <xQueueGenericSendFromISR>
 80087b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3728      	adds	r7, #40	; 0x28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200001f8 	.word	0x200001f8

080087c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <prvProcessExpiredTimer+0x7c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe fb4a 	bl	8006e7a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d122      	bne.n	8008834 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	18d1      	adds	r1, r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f000 f8c8 	bl	8008990 <prvInsertTimerInActiveList>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d016      	beq.n	8008834 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008806:	2300      	movs	r3, #0
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	2300      	movs	r3, #0
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	2100      	movs	r1, #0
 8008810:	6978      	ldr	r0, [r7, #20]
 8008812:	f7ff ff8b 	bl	800872c <xTimerGenericCommand>
 8008816:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60fb      	str	r3, [r7, #12]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	6978      	ldr	r0, [r7, #20]
 800883a:	4798      	blx	r3
}
 800883c:	bf00      	nop
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	200001f0 	.word	0x200001f0

08008848 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008850:	f107 0308 	add.w	r3, r7, #8
 8008854:	4618      	mov	r0, r3
 8008856:	f000 f857 	bl	8008908 <prvGetNextExpireTime>
 800885a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4619      	mov	r1, r3
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f803 	bl	800886c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008866:	f000 f8d5 	bl	8008a14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800886a:	e7f1      	b.n	8008850 <prvTimerTask+0x8>

0800886c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008876:	f7ff f951 	bl	8007b1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	4618      	mov	r0, r3
 8008880:	f000 f866 	bl	8008950 <prvSampleTimeNow>
 8008884:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d130      	bne.n	80088ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <prvProcessTimerOrBlockTask+0x3c>
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	429a      	cmp	r2, r3
 8008898:	d806      	bhi.n	80088a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800889a:	f7ff f94d 	bl	8007b38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff ff91 	bl	80087c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088a6:	e024      	b.n	80088f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <prvProcessTimerOrBlockTask+0x90>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	bf0c      	ite	eq
 80088b8:	2301      	moveq	r3, #1
 80088ba:	2300      	movne	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <prvProcessTimerOrBlockTask+0x94>)
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7fe ff71 	bl	80077b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088d2:	f7ff f931 	bl	8007b38 <xTaskResumeAll>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvProcessTimerOrBlockTask+0x98>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	f3bf 8f6f 	isb	sy
}
 80088ec:	e001      	b.n	80088f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088ee:	f7ff f923 	bl	8007b38 <xTaskResumeAll>
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200001f4 	.word	0x200001f4
 8008900:	200001f8 	.word	0x200001f8
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008910:	4b0e      	ldr	r3, [pc, #56]	; (800894c <prvGetNextExpireTime+0x44>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d105      	bne.n	800893a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800892e:	4b07      	ldr	r3, [pc, #28]	; (800894c <prvGetNextExpireTime+0x44>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e001      	b.n	800893e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800893e:	68fb      	ldr	r3, [r7, #12]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	200001f0 	.word	0x200001f0

08008950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008958:	f7ff f98a 	bl	8007c70 <xTaskGetTickCount>
 800895c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <prvSampleTimeNow+0x3c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	429a      	cmp	r2, r3
 8008966:	d205      	bcs.n	8008974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008968:	f000 f8e8 	bl	8008b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e002      	b.n	800897a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800897a:	4a04      	ldr	r2, [pc, #16]	; (800898c <prvSampleTimeNow+0x3c>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008980:	68fb      	ldr	r3, [r7, #12]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000200 	.word	0x20000200

08008990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d812      	bhi.n	80089dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	1ad2      	subs	r2, r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e01b      	b.n	8008a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089ca:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <prvInsertTimerInActiveList+0x7c>)
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fe fa17 	bl	8006e08 <vListInsert>
 80089da:	e012      	b.n	8008a02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d206      	bcs.n	80089f2 <prvInsertTimerInActiveList+0x62>
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d302      	bcc.n	80089f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	e007      	b.n	8008a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <prvInsertTimerInActiveList+0x80>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3304      	adds	r3, #4
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7fe fa03 	bl	8006e08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a02:	697b      	ldr	r3, [r7, #20]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200001f4 	.word	0x200001f4
 8008a10:	200001f0 	.word	0x200001f0

08008a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08c      	sub	sp, #48	; 0x30
 8008a18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a1a:	e07c      	b.n	8008b16 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	db78      	blt.n	8008b14 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fa21 	bl	8006e7a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff ff88 	bl	8008950 <prvSampleTimeNow>
 8008a40:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d866      	bhi.n	8008b16 <prvProcessReceivedCommands+0x102>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <prvProcessReceivedCommands+0x3c>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a79 	.word	0x08008a79
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a79 	.word	0x08008a79
 8008a5c:	08008b17 	.word	0x08008b17
 8008a60:	08008ad5 	.word	0x08008ad5
 8008a64:	08008b0d 	.word	0x08008b0d
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008a79 	.word	0x08008a79
 8008a70:	08008b17 	.word	0x08008b17
 8008a74:	08008ad5 	.word	0x08008ad5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	18d1      	adds	r1, r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a86:	f7ff ff83 	bl	8008990 <prvInsertTimerInActiveList>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d042      	beq.n	8008b16 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d13a      	bne.n	8008b16 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	441a      	add	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	2300      	movs	r3, #0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ab2:	f7ff fe3b 	bl	800872c <xTimerGenericCommand>
 8008ab6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d12b      	bne.n	8008b16 <prvProcessReceivedCommands+0x102>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	61bb      	str	r3, [r7, #24]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	617b      	str	r3, [r7, #20]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	18d1      	adds	r1, r2, r3
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b06:	f7ff ff43 	bl	8008990 <prvInsertTimerInActiveList>
					break;
 8008b0a:	e004      	b.n	8008b16 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8008b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b0e:	f000 fb4d 	bl	80091ac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b12:	e000      	b.n	8008b16 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b16:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <prvProcessReceivedCommands+0x124>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f107 0108 	add.w	r1, r7, #8
 8008b1e:	2200      	movs	r2, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fc2d 	bl	8007380 <xQueueReceive>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f47f af77 	bne.w	8008a1c <prvProcessReceivedCommands+0x8>
	}
}
 8008b2e:	bf00      	nop
 8008b30:	bf00      	nop
 8008b32:	3728      	adds	r7, #40	; 0x28
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	200001f8 	.word	0x200001f8

08008b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b42:	e045      	b.n	8008bd0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b44:	4b2c      	ldr	r3, [pc, #176]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b4e:	4b2a      	ldr	r3, [pc, #168]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fe f98c 	bl	8006e7a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d12e      	bne.n	8008bd0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4413      	add	r3, r2
 8008b7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d90e      	bls.n	8008ba2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fe f934 	bl	8006e08 <vListInsert>
 8008ba0:	e016      	b.n	8008bd0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7ff fdbd 	bl	800872c <xTimerGenericCommand>
 8008bb2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10a      	bne.n	8008bd0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	603b      	str	r3, [r7, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1b4      	bne.n	8008b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bda:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <prvSwitchTimerLists+0xc0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a04      	ldr	r2, [pc, #16]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008be6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008be8:	4a04      	ldr	r2, [pc, #16]	; (8008bfc <prvSwitchTimerLists+0xc0>)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	6013      	str	r3, [r2, #0]
}
 8008bee:	bf00      	nop
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200001f0 	.word	0x200001f0
 8008bfc:	200001f4 	.word	0x200001f4

08008c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c04:	f000 f95e 	bl	8008ec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c08:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <prvCheckForValidListAndQueue+0x54>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d11d      	bne.n	8008c4c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c10:	4811      	ldr	r0, [pc, #68]	; (8008c58 <prvCheckForValidListAndQueue+0x58>)
 8008c12:	f7fe f8a8 	bl	8006d66 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c16:	4811      	ldr	r0, [pc, #68]	; (8008c5c <prvCheckForValidListAndQueue+0x5c>)
 8008c18:	f7fe f8a5 	bl	8006d66 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <prvCheckForValidListAndQueue+0x60>)
 8008c1e:	4a0e      	ldr	r2, [pc, #56]	; (8008c58 <prvCheckForValidListAndQueue+0x58>)
 8008c20:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <prvCheckForValidListAndQueue+0x64>)
 8008c24:	4a0d      	ldr	r2, [pc, #52]	; (8008c5c <prvCheckForValidListAndQueue+0x5c>)
 8008c26:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008c28:	2200      	movs	r2, #0
 8008c2a:	210c      	movs	r1, #12
 8008c2c:	200a      	movs	r0, #10
 8008c2e:	f7fe f9b7 	bl	8006fa0 <xQueueGenericCreate>
 8008c32:	4603      	mov	r3, r0
 8008c34:	4a07      	ldr	r2, [pc, #28]	; (8008c54 <prvCheckForValidListAndQueue+0x54>)
 8008c36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c38:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <prvCheckForValidListAndQueue+0x54>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <prvCheckForValidListAndQueue+0x54>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4908      	ldr	r1, [pc, #32]	; (8008c68 <prvCheckForValidListAndQueue+0x68>)
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fd8a 	bl	8007760 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c4c:	f000 f96a 	bl	8008f24 <vPortExitCritical>
}
 8008c50:	bf00      	nop
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	200001f8 	.word	0x200001f8
 8008c58:	200001c8 	.word	0x200001c8
 8008c5c:	200001dc 	.word	0x200001dc
 8008c60:	200001f0 	.word	0x200001f0
 8008c64:	200001f4 	.word	0x200001f4
 8008c68:	0800f248 	.word	0x0800f248

08008c6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3b04      	subs	r3, #4
 8008c7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3b04      	subs	r3, #4
 8008c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f023 0201 	bic.w	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c9c:	4a0c      	ldr	r2, [pc, #48]	; (8008cd0 <pxPortInitialiseStack+0x64>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3b14      	subs	r3, #20
 8008ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3b04      	subs	r3, #4
 8008cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f06f 0202 	mvn.w	r2, #2
 8008cba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3b20      	subs	r3, #32
 8008cc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	08008cd5 	.word	0x08008cd5

08008cd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cde:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <prvTaskExitError+0x54>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce6:	d00a      	beq.n	8008cfe <prvTaskExitError+0x2a>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	60fb      	str	r3, [r7, #12]
}
 8008cfa:	bf00      	nop
 8008cfc:	e7fe      	b.n	8008cfc <prvTaskExitError+0x28>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	60bb      	str	r3, [r7, #8]
}
 8008d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d12:	bf00      	nop
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0fc      	beq.n	8008d14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	2000000c 	.word	0x2000000c
 8008d2c:	00000000 	.word	0x00000000

08008d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <pxCurrentTCBConst2>)
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	6808      	ldr	r0, [r1, #0]
 8008d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	f380 8809 	msr	PSP, r0
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8811 	msr	BASEPRI, r0
 8008d4a:	4770      	bx	lr
 8008d4c:	f3af 8000 	nop.w

08008d50 <pxCurrentTCBConst2>:
 8008d50:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop

08008d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d58:	4808      	ldr	r0, [pc, #32]	; (8008d7c <prvPortStartFirstTask+0x24>)
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	f380 8808 	msr	MSP, r0
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8814 	msr	CONTROL, r0
 8008d6a:	b662      	cpsie	i
 8008d6c:	b661      	cpsie	f
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	df00      	svc	0
 8008d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d7a:	bf00      	nop
 8008d7c:	e000ed08 	.word	0xe000ed08

08008d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d86:	4b46      	ldr	r3, [pc, #280]	; (8008ea0 <xPortStartScheduler+0x120>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a46      	ldr	r2, [pc, #280]	; (8008ea4 <xPortStartScheduler+0x124>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d10a      	bne.n	8008da6 <xPortStartScheduler+0x26>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	613b      	str	r3, [r7, #16]
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008da6:	4b3e      	ldr	r3, [pc, #248]	; (8008ea0 <xPortStartScheduler+0x120>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a3f      	ldr	r2, [pc, #252]	; (8008ea8 <xPortStartScheduler+0x128>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d10a      	bne.n	8008dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dc6:	4b39      	ldr	r3, [pc, #228]	; (8008eac <xPortStartScheduler+0x12c>)
 8008dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	22ff      	movs	r2, #255	; 0xff
 8008dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	4b31      	ldr	r3, [pc, #196]	; (8008eb0 <xPortStartScheduler+0x130>)
 8008dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dee:	4b31      	ldr	r3, [pc, #196]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008df0:	2207      	movs	r2, #7
 8008df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008df4:	e009      	b.n	8008e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008df6:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4a2d      	ldr	r2, [pc, #180]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d0ef      	beq.n	8008df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e16:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f1c3 0307 	rsb	r3, r3, #7
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d00a      	beq.n	8008e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	60bb      	str	r3, [r7, #8]
}
 8008e34:	bf00      	nop
 8008e36:	e7fe      	b.n	8008e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e38:	4b1e      	ldr	r3, [pc, #120]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	021b      	lsls	r3, r3, #8
 8008e3e:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e42:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e4a:	4a1a      	ldr	r2, [pc, #104]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e56:	4b18      	ldr	r3, [pc, #96]	; (8008eb8 <xPortStartScheduler+0x138>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a17      	ldr	r2, [pc, #92]	; (8008eb8 <xPortStartScheduler+0x138>)
 8008e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <xPortStartScheduler+0x138>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <xPortStartScheduler+0x138>)
 8008e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e6e:	f000 f8dd 	bl	800902c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <xPortStartScheduler+0x13c>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e78:	f000 f8fc 	bl	8009074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <xPortStartScheduler+0x140>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <xPortStartScheduler+0x140>)
 8008e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e88:	f7ff ff66 	bl	8008d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e8c:	f7fe ffbe 	bl	8007e0c <vTaskSwitchContext>
	prvTaskExitError();
 8008e90:	f7ff ff20 	bl	8008cd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	e000ed00 	.word	0xe000ed00
 8008ea4:	410fc271 	.word	0x410fc271
 8008ea8:	410fc270 	.word	0x410fc270
 8008eac:	e000e400 	.word	0xe000e400
 8008eb0:	20000204 	.word	0x20000204
 8008eb4:	20000208 	.word	0x20000208
 8008eb8:	e000ed20 	.word	0xe000ed20
 8008ebc:	2000000c 	.word	0x2000000c
 8008ec0:	e000ef34 	.word	0xe000ef34

08008ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	607b      	str	r3, [r7, #4]
}
 8008edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ede:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <vPortEnterCritical+0x58>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	4a0d      	ldr	r2, [pc, #52]	; (8008f1c <vPortEnterCritical+0x58>)
 8008ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ee8:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <vPortEnterCritical+0x58>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d10f      	bne.n	8008f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <vPortEnterCritical+0x5c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	603b      	str	r3, [r7, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <vPortEnterCritical+0x4a>
	}
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	2000000c 	.word	0x2000000c
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <vPortExitCritical+0x50>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <vPortExitCritical+0x24>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	607b      	str	r3, [r7, #4]
}
 8008f44:	bf00      	nop
 8008f46:	e7fe      	b.n	8008f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <vPortExitCritical+0x50>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <vPortExitCritical+0x50>)
 8008f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f52:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <vPortExitCritical+0x50>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <vPortExitCritical+0x42>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	f383 8811 	msr	BASEPRI, r3
}
 8008f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	2000000c 	.word	0x2000000c
	...

08008f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f80:	f3ef 8009 	mrs	r0, PSP
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <pxCurrentTCBConst>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	f01e 0f10 	tst.w	lr, #16
 8008f90:	bf08      	it	eq
 8008f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9a:	6010      	str	r0, [r2, #0]
 8008f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fa4:	f380 8811 	msr	BASEPRI, r0
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f7fe ff2c 	bl	8007e0c <vTaskSwitchContext>
 8008fb4:	f04f 0000 	mov.w	r0, #0
 8008fb8:	f380 8811 	msr	BASEPRI, r0
 8008fbc:	bc09      	pop	{r0, r3}
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc6:	f01e 0f10 	tst.w	lr, #16
 8008fca:	bf08      	it	eq
 8008fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fd0:	f380 8809 	msr	PSP, r0
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w

08008fe0 <pxCurrentTCBConst>:
 8008fe0:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
}
 8009000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009002:	f7fe fe45 	bl	8007c90 <xTaskIncrementTick>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <SysTick_Handler+0x40>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	2300      	movs	r3, #0
 8009016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	f383 8811 	msr	BASEPRI, r3
}
 800901e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <vPortSetupTimerInterrupt+0x34>)
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <vPortSetupTimerInterrupt+0x38>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <vPortSetupTimerInterrupt+0x3c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a0a      	ldr	r2, [pc, #40]	; (800906c <vPortSetupTimerInterrupt+0x40>)
 8009042:	fba2 2303 	umull	r2, r3, r2, r3
 8009046:	099b      	lsrs	r3, r3, #6
 8009048:	4a09      	ldr	r2, [pc, #36]	; (8009070 <vPortSetupTimerInterrupt+0x44>)
 800904a:	3b01      	subs	r3, #1
 800904c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800904e:	4b04      	ldr	r3, [pc, #16]	; (8009060 <vPortSetupTimerInterrupt+0x34>)
 8009050:	2207      	movs	r2, #7
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	e000e010 	.word	0xe000e010
 8009064:	e000e018 	.word	0xe000e018
 8009068:	20000000 	.word	0x20000000
 800906c:	10624dd3 	.word	0x10624dd3
 8009070:	e000e014 	.word	0xe000e014

08009074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009084 <vPortEnableVFP+0x10>
 8009078:	6801      	ldr	r1, [r0, #0]
 800907a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800907e:	6001      	str	r1, [r0, #0]
 8009080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009082:	bf00      	nop
 8009084:	e000ed88 	.word	0xe000ed88

08009088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800908e:	f3ef 8305 	mrs	r3, IPSR
 8009092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d914      	bls.n	80090c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800909a:	4a17      	ldr	r2, [pc, #92]	; (80090f8 <vPortValidateInterruptPriority+0x70>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090a4:	4b15      	ldr	r3, [pc, #84]	; (80090fc <vPortValidateInterruptPriority+0x74>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	7afa      	ldrb	r2, [r7, #11]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d20a      	bcs.n	80090c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	607b      	str	r3, [r7, #4]
}
 80090c0:	bf00      	nop
 80090c2:	e7fe      	b.n	80090c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090c4:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <vPortValidateInterruptPriority+0x78>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090cc:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <vPortValidateInterruptPriority+0x7c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d90a      	bls.n	80090ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	603b      	str	r3, [r7, #0]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <vPortValidateInterruptPriority+0x60>
	}
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	e000e3f0 	.word	0xe000e3f0
 80090fc:	20000204 	.word	0x20000204
 8009100:	e000ed0c 	.word	0xe000ed0c
 8009104:	20000208 	.word	0x20000208

08009108 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00e      	beq.n	800913c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f023 0307 	bic.w	r3, r3, #7
 8009124:	3308      	adds	r3, #8
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	429a      	cmp	r2, r3
 800912a:	d205      	bcs.n	8009138 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f023 0307 	bic.w	r3, r3, #7
 8009132:	3308      	adds	r3, #8
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	e001      	b.n	800913c <pvPortMalloc+0x34>
                } 
                else 
                {
                    xWantedSize = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 800913c:	f7fe fcee 	bl	8007b1c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8009140:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <pvPortMalloc+0x98>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d105      	bne.n	8009154 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009148:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <pvPortMalloc+0x9c>)
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	461a      	mov	r2, r3
 8009150:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <pvPortMalloc+0x98>)
 8009152:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01b      	beq.n	8009192 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800915a:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <pvPortMalloc+0xa0>)
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 8009162:	f241 32c7 	movw	r2, #5063	; 0x13c7
 8009166:	4293      	cmp	r3, r2
 8009168:	d813      	bhi.n	8009192 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <pvPortMalloc+0xa0>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	441a      	add	r2, r3
 8009172:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <pvPortMalloc+0xa0>)
 8009174:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009176:	429a      	cmp	r2, r3
 8009178:	d90b      	bls.n	8009192 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800917a:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <pvPortMalloc+0x98>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <pvPortMalloc+0xa0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4413      	add	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8009186:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <pvPortMalloc+0xa0>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4413      	add	r3, r2
 800918e:	4a06      	ldr	r2, [pc, #24]	; (80091a8 <pvPortMalloc+0xa0>)
 8009190:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009192:	f7fe fcd1 	bl	8007b38 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8009196:	68fb      	ldr	r3, [r7, #12]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	200015e0 	.word	0x200015e0
 80091a4:	20000214 	.word	0x20000214
 80091a8:	200015dc 	.word	0x200015dc

080091ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <vPortFree+0x24>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	60fb      	str	r3, [r7, #12]
}
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <vPortFree+0x22>
}
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	0a5a      	lsrs	r2, r3, #9
 80091ec:	490f      	ldr	r1, [pc, #60]	; (800922c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80091ee:	fba1 1202 	umull	r1, r2, r1, r2
 80091f2:	09d2      	lsrs	r2, r2, #7
 80091f4:	490e      	ldr	r1, [pc, #56]	; (8009230 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80091f6:	fb01 f202 	mul.w	r2, r1, r2
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	0a5b      	lsrs	r3, r3, #9
 8009204:	4a09      	ldr	r2, [pc, #36]	; (800922c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	09db      	lsrs	r3, r3, #7
 800920c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	441a      	add	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	601a      	str	r2, [r3, #0]
}
 8009220:	bf00      	nop
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	00044b83 	.word	0x00044b83
 8009230:	3b9aca00 	.word	0x3b9aca00

08009234 <_ZN14BatteryMonitorC1Ev>:

const uint32_t ADCTimeOut = 300;
const float Rup = 10000;
const float Rdown = 2700;

BatteryMonitor::BatteryMonitor()
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
//:capacity_current(CapacityCurrent), capacity_volt(CapacityVoltage)
:battery_voltage(CapacityVoltage), voltage_offset(VoltageOffset)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a06      	ldr	r2, [pc, #24]	; (8009258 <_ZN14BatteryMonitorC1Ev+0x24>)
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a05      	ldr	r2, [pc, #20]	; (800925c <_ZN14BatteryMonitorC1Ev+0x28>)
 8009246:	611a      	str	r2, [r3, #16]
{
}
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4618      	mov	r0, r3
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	3df5c28f 	.word	0x3df5c28f
 800925c:	4131999a 	.word	0x4131999a

08009260 <_ZN14BatteryMonitor4initEv>:

void BatteryMonitor::init()
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8009268:	2100      	movs	r1, #0
 800926a:	480e      	ldr	r0, [pc, #56]	; (80092a4 <_ZN14BatteryMonitor4initEv+0x44>)
 800926c:	f7f8 fb5b 	bl	8001926 <HAL_ADCEx_Calibration_Start>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d000      	beq.n	8009282 <_ZN14BatteryMonitor4initEv+0x22>
	{
		 /* Calibration Error */
		 while(1);
 8009280:	e7fe      	b.n	8009280 <_ZN14BatteryMonitor4initEv+0x20>
	}
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8009282:	4808      	ldr	r0, [pc, #32]	; (80092a4 <_ZN14BatteryMonitor4initEv+0x44>)
 8009284:	f7f8 f9c6 	bl	8001614 <HAL_ADC_Start>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf14      	ite	ne
 800928e:	2301      	movne	r3, #1
 8009290:	2300      	moveq	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d000      	beq.n	800929a <_ZN14BatteryMonitor4initEv+0x3a>
	{
	     /* Start Conversation Error */
		while(1);
 8009298:	e7fe      	b.n	8009298 <_ZN14BatteryMonitor4initEv+0x38>
	}
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200022ec 	.word	0x200022ec

080092a8 <_ZN14BatteryMonitor18calc_battery_stateEv>:

void BatteryMonitor::calc_battery_state(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_PollForConversion(&hadc1, ADCTimeOut) != HAL_OK)
 80092b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80092b4:	481d      	ldr	r0, [pc, #116]	; (800932c <_ZN14BatteryMonitor18calc_battery_stateEv+0x84>)
 80092b6:	f7f8 fa63 	bl	8001780 <HAL_ADC_PollForConversion>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bf14      	ite	ne
 80092c0:	2301      	movne	r3, #1
 80092c2:	2300      	moveq	r3, #0
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d000      	beq.n	80092cc <_ZN14BatteryMonitor18calc_battery_stateEv+0x24>
	{
		 /* End Of Conversion flag not set on time */
		 while(1);
 80092ca:	e7fe      	b.n	80092ca <_ZN14BatteryMonitor18calc_battery_stateEv+0x22>
	}
	else
	{
		/* ADC conversion completed */
		adc_value = HAL_ADC_GetValue(&hadc1);
 80092cc:	4817      	ldr	r0, [pc, #92]	; (800932c <_ZN14BatteryMonitor18calc_battery_stateEv+0x84>)
 80092ce:	f7f8 fb1d 	bl	800190c <HAL_ADC_GetValue>
 80092d2:	4603      	mov	r3, r0
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	801a      	strh	r2, [r3, #0]
	}
	adc_voltage = (float) 3.3 * adc_value / (2 << (8 - 1));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092e6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009330 <_ZN14BatteryMonitor18calc_battery_stateEv+0x88>
 80092ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80092ee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8009334 <_ZN14BatteryMonitor18calc_battery_stateEv+0x8c>
 80092f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	edc3 7a02 	vstr	s15, [r3, #8]
	battery_voltage = adc_voltage * (Rup + Rdown) / Rdown + voltage_offset;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8009302:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009338 <_ZN14BatteryMonitor18calc_battery_stateEv+0x90>
 8009306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800930a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800933c <_ZN14BatteryMonitor18calc_battery_stateEv+0x94>
 800930e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	edd3 7a03 	vldr	s15, [r3, #12]
 8009318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200022ec 	.word	0x200022ec
 8009330:	40533333 	.word	0x40533333
 8009334:	43800000 	.word	0x43800000
 8009338:	46467000 	.word	0x46467000
 800933c:	4528c000 	.word	0x4528c000

08009340 <init_dif_drive>:
DifferentialDriveController dif_drive_controller(DifDrivePeriod, ROBOT_FORWARD);

void test_sin();

void init_dif_drive()
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
	dif_drive_controller.init();
 8009344:	4802      	ldr	r0, [pc, #8]	; (8009350 <init_dif_drive+0x10>)
 8009346:	f000 fc61 	bl	8009c0c <_ZN27DifferentialDriveController4initEv>
}
 800934a:	bf00      	nop
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200015ec 	.word	0x200015ec

08009354 <init_dif_drive_task>:

void init_dif_drive_task()
{
 8009354:	b590      	push	{r4, r7, lr}
 8009356:	b083      	sub	sp, #12
 8009358:	af02      	add	r7, sp, #8
	/* Task Create */
	if (xTaskCreate(difDriveTask, "MotorFeedBackTask", 200, NULL, 4, &difDriveTaskHandle) != pdPASS)
 800935a:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <init_dif_drive_task+0x64>)
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	2304      	movs	r3, #4
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	22c8      	movs	r2, #200	; 0xc8
 8009366:	4915      	ldr	r1, [pc, #84]	; (80093bc <init_dif_drive_task+0x68>)
 8009368:	4815      	ldr	r0, [pc, #84]	; (80093c0 <init_dif_drive_task+0x6c>)
 800936a:	f7fe fa57 	bl	800781c <xTaskCreate>
 800936e:	4603      	mov	r3, r0
 8009370:	2b01      	cmp	r3, #1
 8009372:	bf14      	ite	ne
 8009374:	2301      	movne	r3, #1
 8009376:	2300      	moveq	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d000      	beq.n	8009380 <init_dif_drive_task+0x2c>
	{
		while(1);
 800937e:	e7fe      	b.n	800937e <init_dif_drive_task+0x2a>
//	{
//		while(1);
//	}

	/* Timer Create*/
	controllerRepeatTimerHandle = xTimerCreate("DifDriveControllerRepeatTimer", DifDrivePeriod/portTICK_PERIOD_MS, pdTRUE, NULL, difDriveCallBack);
 8009380:	4b10      	ldr	r3, [pc, #64]	; (80093c4 <init_dif_drive_task+0x70>)
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	2300      	movs	r3, #0
 8009386:	2201      	movs	r2, #1
 8009388:	2102      	movs	r1, #2
 800938a:	480f      	ldr	r0, [pc, #60]	; (80093c8 <init_dif_drive_task+0x74>)
 800938c:	f7ff f97e 	bl	800868c <xTimerCreate>
 8009390:	4603      	mov	r3, r0
 8009392:	4a0e      	ldr	r2, [pc, #56]	; (80093cc <init_dif_drive_task+0x78>)
 8009394:	6013      	str	r3, [r2, #0]
	assert_param(controllerRepeatTimerHandle != NULL);
	xTimerStart(controllerRepeatTimerHandle, 0);
 8009396:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <init_dif_drive_task+0x78>)
 8009398:	681c      	ldr	r4, [r3, #0]
 800939a:	f7fe fc69 	bl	8007c70 <xTaskGetTickCount>
 800939e:	4602      	mov	r2, r0
 80093a0:	2300      	movs	r3, #0
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	2300      	movs	r3, #0
 80093a6:	2101      	movs	r1, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff f9bf 	bl	800872c <xTimerGenericCommand>
//	driveInfoPubRepeatTimerHandle = xTimerCreate("DriveInfoPublishRepeatTimer", DriveInfoPublishPeriod/portTICK_PERIOD_MS, pdTRUE, NULL, driveInfoPubCallBack);
//	assert_param(driveInfoPubRepeatTimerHandle != NULL);
//	xTimerStart(driveInfoPubRepeatTimerHandle, 0);
}
 80093ae:	bf00      	nop
 80093b0:	3704      	adds	r7, #4
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd90      	pop	{r4, r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200015e4 	.word	0x200015e4
 80093bc:	0800f250 	.word	0x0800f250
 80093c0:	080093d1 	.word	0x080093d1
 80093c4:	080093fd 	.word	0x080093fd
 80093c8:	0800f264 	.word	0x0800f264
 80093cc:	200015e8 	.word	0x200015e8

080093d0 <_Z12difDriveTaskPv>:

void difDriveTask(void * argument)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		if (ulTaskNotifyTake(pdFALSE, 2 * DifDrivePeriod/portTICK_PERIOD_MS) != 0)
 80093d8:	2104      	movs	r1, #4
 80093da:	2000      	movs	r0, #0
 80093dc:	f7fe ffe4 	bl	80083a8 <ulTaskNotifyTake>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf14      	ite	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	2300      	moveq	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0f3      	beq.n	80093d8 <_Z12difDriveTaskPv+0x8>
		{
			//SEGGER_SYSVIEW_PrintfHost("start motor MotorFeedBackTask");
			dif_drive_controller.control_periodic();
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <_Z12difDriveTaskPv+0x28>)
 80093f2:	f000 fc89 	bl	8009d08 <_ZN27DifferentialDriveController16control_periodicEv>
		if (ulTaskNotifyTake(pdFALSE, 2 * DifDrivePeriod/portTICK_PERIOD_MS) != 0)
 80093f6:	e7ef      	b.n	80093d8 <_Z12difDriveTaskPv+0x8>
 80093f8:	200015ec 	.word	0x200015ec

080093fc <_Z16difDriveCallBackPv>:
//		}
//	}
//}

void difDriveCallBack(TimerHandle_t xTimer)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	//SEGGER_SYSVIEW_PrintfHost("DifDriveControllerRepeatTimer start");
	xTaskNotifyGive(difDriveTaskHandle);
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <_Z16difDriveCallBackPv+0x20>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	2300      	movs	r3, #0
 800940a:	2202      	movs	r2, #2
 800940c:	2100      	movs	r1, #0
 800940e:	f7ff f813 	bl	8008438 <xTaskGenericNotify>
}
 8009412:	bf00      	nop
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200015e4 	.word	0x200015e4

08009420 <_Z41__static_initialization_and_destruction_0ii>:
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d109      	bne.n	8009444 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009436:	4293      	cmp	r3, r2
 8009438:	d104      	bne.n	8009444 <_Z41__static_initialization_and_destruction_0ii+0x24>
DifferentialDriveController dif_drive_controller(DifDrivePeriod, ROBOT_FORWARD);
 800943a:	2201      	movs	r2, #1
 800943c:	2102      	movs	r1, #2
 800943e:	4803      	ldr	r0, [pc, #12]	; (800944c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8009440:	f000 fb94 	bl	8009b6c <_ZN27DifferentialDriveControllerC1Eta>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	200015ec 	.word	0x200015ec

08009450 <_GLOBAL__sub_I_difDriveTaskHandle>:
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
 8009454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009458:	2001      	movs	r0, #1
 800945a:	f7ff ffe1 	bl	8009420 <_Z41__static_initialization_and_destruction_0ii>
 800945e:	bd80      	pop	{r7, pc}

08009460 <_ZN11MotorDriverC1E12enm_motor_idi>:
static uint16_t IN2_Pin[2] = {IN2_LEFT_Pin, IN2_RIGHT_Pin};

static uint32_t TIM_CHANNEL[2] = {TIM_CHANNEL_2, TIM_CHANNEL_1};
static const uint32_t HTIMPeriod = 999;

MotorDriver::MotorDriver(motor_id_t id, motor_direction_pol_t direction)
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	460b      	mov	r3, r1
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	72fb      	strb	r3, [r7, #11]
: motor_id(id), motor_direction(direction)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7afa      	ldrb	r2, [r7, #11]
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]
{}
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <_ZN11MotorDriver4initEv>:
MotorDriver::MotorDriver(const MotorDriver& motor_driver)
: motor_id(motor_driver.motor_id)
{}

void MotorDriver::init()
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL[motor_id]);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <_ZN11MotorDriver4initEv+0x40>)
 8009498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949c:	4619      	mov	r1, r3
 800949e:	480b      	ldr	r0, [pc, #44]	; (80094cc <_ZN11MotorDriver4initEv+0x44>)
 80094a0:	f7fb fb26 	bl	8004af0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 80094a4:	2200      	movs	r2, #0
 80094a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094ae:	f7f9 fb4d 	bl	8002b4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET);
 80094b2:	2201      	movs	r2, #1
 80094b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094bc:	f7f9 fb46 	bl	8002b4c <HAL_GPIO_WritePin>
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000028 	.word	0x20000028
 80094cc:	20002484 	.word	0x20002484

080094d0 <_ZN11MotorDriver16drive_motor_dutyEfi>:

void MotorDriver::drive_motor_duty(float duty, motor_direction_t direction)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80094dc:	6079      	str	r1, [r7, #4]
	switch (direction * motor_direction)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	fb02 f303 	mul.w	r3, r2, r3
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ec:	d022      	beq.n	8009534 <_ZN11MotorDriver16drive_motor_dutyEfi+0x64>
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d140      	bne.n	8009574 <_ZN11MotorDriver16drive_motor_dutyEfi+0xa4>
	{
		case FORWARD:
			HAL_GPIO_WritePin(IN1_GPIO_Port[motor_id], IN1_Pin[motor_id], GPIO_PIN_SET);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b23      	ldr	r3, [pc, #140]	; (8009588 <_ZN11MotorDriver16drive_motor_dutyEfi+0xb8>)
 80094fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	4b21      	ldr	r3, [pc, #132]	; (800958c <_ZN11MotorDriver16drive_motor_dutyEfi+0xbc>)
 8009506:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800950a:	2201      	movs	r2, #1
 800950c:	4619      	mov	r1, r3
 800950e:	f7f9 fb1d 	bl	8002b4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port[motor_id], IN2_Pin[motor_id], GPIO_PIN_RESET);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	4b1d      	ldr	r3, [pc, #116]	; (8009590 <_ZN11MotorDriver16drive_motor_dutyEfi+0xc0>)
 800951a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <_ZN11MotorDriver16drive_motor_dutyEfi+0xc4>)
 8009526:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800952a:	2200      	movs	r2, #0
 800952c:	4619      	mov	r1, r3
 800952e:	f7f9 fb0d 	bl	8002b4c <HAL_GPIO_WritePin>
			break;
 8009532:	e020      	b.n	8009576 <_ZN11MotorDriver16drive_motor_dutyEfi+0xa6>
		case BACKWARD:
			HAL_GPIO_WritePin(IN1_GPIO_Port[motor_id], IN1_Pin[motor_id], GPIO_PIN_RESET);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	461a      	mov	r2, r3
 800953a:	4b13      	ldr	r3, [pc, #76]	; (8009588 <_ZN11MotorDriver16drive_motor_dutyEfi+0xb8>)
 800953c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	4b11      	ldr	r3, [pc, #68]	; (800958c <_ZN11MotorDriver16drive_motor_dutyEfi+0xbc>)
 8009548:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800954c:	2200      	movs	r2, #0
 800954e:	4619      	mov	r1, r3
 8009550:	f7f9 fafc 	bl	8002b4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port[motor_id], IN2_Pin[motor_id], GPIO_PIN_SET);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	4b0d      	ldr	r3, [pc, #52]	; (8009590 <_ZN11MotorDriver16drive_motor_dutyEfi+0xc0>)
 800955c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <_ZN11MotorDriver16drive_motor_dutyEfi+0xc4>)
 8009568:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800956c:	2201      	movs	r2, #1
 800956e:	4619      	mov	r1, r3
 8009570:	f7f9 faec 	bl	8002b4c <HAL_GPIO_WritePin>
		default:
			assert_param(1);
			break;
 8009574:	bf00      	nop
	}
	drive_pwm(duty);
 8009576:	ed97 0a02 	vldr	s0, [r7, #8]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f80c 	bl	8009598 <_ZN11MotorDriver9drive_pwmEf>
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000010 	.word	0x20000010
 800958c:	20000020 	.word	0x20000020
 8009590:	20000018 	.word	0x20000018
 8009594:	20000024 	.word	0x20000024

08009598 <_ZN11MotorDriver9drive_pwmEf>:
 * @details PWM frequency = 64 MHz / (Prescaler + 1) / (CounterPeriod + 1) = 64 MHz / (1 + 1) / (999 + 1) = 32 kHz
 * @param duty 0 ~ 100 [%]
 * 
 */
void MotorDriver::drive_pwm(float duty)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	ed87 0a00 	vstr	s0, [r7]
	if (duty < 0) {
 80095a4:	edd7 7a00 	vldr	s15, [r7]
 80095a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b0:	d503      	bpl.n	80095ba <_ZN11MotorDriver9drive_pwmEf+0x22>
		duty = 0;
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	e00a      	b.n	80095d0 <_ZN11MotorDriver9drive_pwmEf+0x38>
	} else if (duty > 100) {
 80095ba:	edd7 7a00 	vldr	s15, [r7]
 80095be:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009684 <_ZN11MotorDriver9drive_pwmEf+0xec>
 80095c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ca:	dd01      	ble.n	80095d0 <_ZN11MotorDriver9drive_pwmEf+0x38>
		duty = 100;
 80095cc:	4b2e      	ldr	r3, [pc, #184]	; (8009688 <_ZN11MotorDriver9drive_pwmEf+0xf0>)
 80095ce:	603b      	str	r3, [r7, #0]
	}
	uint32_t pulse = (uint32_t)(HTIMPeriod * duty / 100);
 80095d0:	edd7 7a00 	vldr	s15, [r7]
 80095d4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800968c <_ZN11MotorDriver9drive_pwmEf+0xf4>
 80095d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80095dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009684 <_ZN11MotorDriver9drive_pwmEf+0xec>
 80095e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e8:	ee17 3a90 	vmov	r3, s15
 80095ec:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL[motor_id], pulse);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	4b26      	ldr	r3, [pc, #152]	; (8009690 <_ZN11MotorDriver9drive_pwmEf+0xf8>)
 80095f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d104      	bne.n	8009608 <_ZN11MotorDriver9drive_pwmEf+0x70>
 80095fe:	4b25      	ldr	r3, [pc, #148]	; (8009694 <_ZN11MotorDriver9drive_pwmEf+0xfc>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009606:	e037      	b.n	8009678 <_ZN11MotorDriver9drive_pwmEf+0xe0>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL[motor_id], pulse);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	4b20      	ldr	r3, [pc, #128]	; (8009690 <_ZN11MotorDriver9drive_pwmEf+0xf8>)
 8009610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009614:	2b04      	cmp	r3, #4
 8009616:	d104      	bne.n	8009622 <_ZN11MotorDriver9drive_pwmEf+0x8a>
 8009618:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <_ZN11MotorDriver9drive_pwmEf+0xfc>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009620:	e02a      	b.n	8009678 <_ZN11MotorDriver9drive_pwmEf+0xe0>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL[motor_id], pulse);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	4b19      	ldr	r3, [pc, #100]	; (8009690 <_ZN11MotorDriver9drive_pwmEf+0xf8>)
 800962a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962e:	2b08      	cmp	r3, #8
 8009630:	d104      	bne.n	800963c <_ZN11MotorDriver9drive_pwmEf+0xa4>
 8009632:	4b18      	ldr	r3, [pc, #96]	; (8009694 <_ZN11MotorDriver9drive_pwmEf+0xfc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800963a:	e01d      	b.n	8009678 <_ZN11MotorDriver9drive_pwmEf+0xe0>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL[motor_id], pulse);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	4b13      	ldr	r3, [pc, #76]	; (8009690 <_ZN11MotorDriver9drive_pwmEf+0xf8>)
 8009644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009648:	2b0c      	cmp	r3, #12
 800964a:	d104      	bne.n	8009656 <_ZN11MotorDriver9drive_pwmEf+0xbe>
 800964c:	4b11      	ldr	r3, [pc, #68]	; (8009694 <_ZN11MotorDriver9drive_pwmEf+0xfc>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009654:	e010      	b.n	8009678 <_ZN11MotorDriver9drive_pwmEf+0xe0>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL[motor_id], pulse);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <_ZN11MotorDriver9drive_pwmEf+0xf8>)
 800965e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009662:	2b10      	cmp	r3, #16
 8009664:	d104      	bne.n	8009670 <_ZN11MotorDriver9drive_pwmEf+0xd8>
 8009666:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <_ZN11MotorDriver9drive_pwmEf+0xfc>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800966e:	e003      	b.n	8009678 <_ZN11MotorDriver9drive_pwmEf+0xe0>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL[motor_id], pulse);
 8009670:	4b08      	ldr	r3, [pc, #32]	; (8009694 <_ZN11MotorDriver9drive_pwmEf+0xfc>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009678:	bf00      	nop
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	42c80000 	.word	0x42c80000
 8009688:	42c80000 	.word	0x42c80000
 800968c:	4479c000 	.word	0x4479c000
 8009690:	20000028 	.word	0x20000028
 8009694:	20002484 	.word	0x20002484

08009698 <_ZN7EncoderC1E12enm_motor_idta>:
#include "tim.h"

TIM_HandleTypeDef* htim_encoder[] = {&htim3, &htim1};
#define ResetCntConstValue 32768

Encoder::Encoder(motor_id_t id, uint16_t t_period, encoder_polarity_t polarity)
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	4608      	mov	r0, r1
 80096a2:	4611      	mov	r1, r2
 80096a4:	461a      	mov	r2, r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	70fb      	strb	r3, [r7, #3]
 80096aa:	460b      	mov	r3, r1
 80096ac:	803b      	strh	r3, [r7, #0]
 80096ae:	4613      	mov	r3, r2
 80096b0:	70bb      	strb	r3, [r7, #2]
:htim(htim_encoder[id]), Tperiod(t_period), enc_pol(polarity), ResetCntValue(ResetCntConstValue), rotation_angle(0)
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	4a0c      	ldr	r2, [pc, #48]	; (80096e8 <_ZN7EncoderC1E12enm_motor_idta+0x50>)
 80096b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	883a      	ldrh	r2, [r7, #0]
 80096c2:	809a      	strh	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	78ba      	ldrb	r2, [r7, #2]
 80096c8:	719a      	strb	r2, [r3, #6]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80096d0:	611a      	str	r2, [r3, #16]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	615a      	str	r2, [r3, #20]
{}
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	20000030 	.word	0x20000030

080096ec <_ZN7Encoder4initEv>:
Encoder::Encoder(const Encoder & encoder)
:htim(encoder.htim), Tperiod(encoder.Tperiod), enc_pol(encoder.enc_pol), ResetCntValue(ResetCntConstValue), rotation_angle(0)
{}

void Encoder::init()
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	reset_count();
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f8b3 	bl	8009860 <_ZN7Encoder11reset_countEv>
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	213c      	movs	r1, #60	; 0x3c
 8009700:	4618      	mov	r0, r3
 8009702:	f7fb fb87 	bl	8004e14 <HAL_TIM_Encoder_Start>
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <_ZN7Encoder12get_velocityEv>:

float Encoder::get_velocity()
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
	velocity = nrps2velocity(nrps);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	edd3 7a07 	vldr	s15, [r3, #28]
 800971c:	eeb0 0a67 	vmov.f32	s0, s15
 8009720:	f000 f8ae 	bl	8009880 <_Z13nrps2velocityf>
 8009724:	eef0 7a40 	vmov.f32	s15, s0
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	edc3 7a06 	vstr	s15, [r3, #24]
	return velocity;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	ee07 3a90 	vmov	s15, r3
}
 8009736:	eeb0 0a67 	vmov.f32	s0, s15
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <_ZN7Encoder14count_periodicEv>:

void Encoder::count_periodic()
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	calc_count_dif();
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f80a 	bl	8009762 <_ZN7Encoder14calc_count_difEv>
	calc_nrps();
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f82c 	bl	80097ac <_ZN7Encoder9calc_nrpsEv>
	calc_rotation_angle();
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f859 	bl	800980c <_ZN7Encoder19calc_rotation_angleEv>
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <_ZN7Encoder14calc_count_difEv>:

int32_t Encoder::calc_count_dif()
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 800976a:	f7ff fbab 	bl	8008ec4 <vPortEnterCritical>
	enc_count = htim->Instance->CNT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60da      	str	r2, [r3, #12]
	reset_count();
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f870 	bl	8009860 <_ZN7Encoder11reset_countEv>
	count_dif = (int32_t) ((enc_count - ResetCntValue) * enc_pol);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	f992 2006 	ldrsb.w	r2, [r2, #6]
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	609a      	str	r2, [r3, #8]
	taskEXIT_CRITICAL();
 800979a:	f7ff fbc3 	bl	8008f24 <vPortExitCritical>
	return count_dif;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <_ZN7Encoder9calc_nrpsEv>:

float Encoder::calc_nrps()
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	nrps = 1000 * ((float)count_dif) / ((float)EncPPR * 4) / ((float)Tperiod) / ((float)GearRatio);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	ee07 3a90 	vmov	s15, r3
 80097bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009804 <_ZN7Encoder9calc_nrpsEv+0x58>
 80097c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009808 <_ZN7Encoder9calc_nrpsEv+0x5c>
 80097cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	889b      	ldrh	r3, [r3, #4]
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80097e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	edc3 7a07 	vstr	s15, [r3, #28]
	return nrps;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	ee07 3a90 	vmov	s15, r3
}
 80097f6:	eeb0 0a67 	vmov.f32	s0, s15
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	447a0000 	.word	0x447a0000
 8009808:	44e00000 	.word	0x44e00000

0800980c <_ZN7Encoder19calc_rotation_angleEv>:

float Encoder::calc_rotation_angle()
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	rotation_angle += nrps * Tperiod * 2 * simple_math::PI;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	ed93 7a05 	vldr	s14, [r3, #20]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	edd3 6a07 	vldr	s13, [r3, #28]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	889b      	ldrh	r3, [r3, #4]
 8009824:	ee07 3a90 	vmov	s15, r3
 8009828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800982c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009830:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009834:	eddf 6a09 	vldr	s13, [pc, #36]	; 800985c <_ZN7Encoder19calc_rotation_angleEv+0x50>
 8009838:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800983c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	edc3 7a05 	vstr	s15, [r3, #20]
//	rotation_angle = simple_math::get_mpi_pi(rotation_angle);
	return rotation_angle;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	ee07 3a90 	vmov	s15, r3
}
 800984e:	eeb0 0a67 	vmov.f32	s0, s15
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	40490fda 	.word	0x40490fda

08009860 <_ZN7Encoder11reset_countEv>:

void Encoder::reset_count()
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
	htim->Instance->CNT = ResetCntValue;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	6912      	ldr	r2, [r2, #16]
 8009872:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_Z13nrps2velocityf>:

float nrps2velocity(float nrps)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	ed87 0a01 	vstr	s0, [r7, #4]
	return simple_math::PI * DiameterWheel * nrps;
 800988a:	edd7 7a01 	vldr	s15, [r7, #4]
 800988e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80098a4 <_Z13nrps2velocityf+0x24>
 8009892:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009896:	eeb0 0a67 	vmov.f32	s0, s15
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	3e545246 	.word	0x3e545246

080098a8 <_ZN23FeedbackMotorControllerC1E12enm_motor_idta>:
extern ros::NodeHandle nh;

const float MaxVelocity = nrps2velocity(MaxMotorNrps);
const float Velocity2Duty = 100/MaxVelocity;

FeedbackMotorController::FeedbackMotorController(motor_id_t id, uint16_t t_period, encoder_polarity_t polarity)
 80098a8:	b590      	push	{r4, r7, lr}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	70fb      	strb	r3, [r7, #3]
 80098ba:	460b      	mov	r3, r1
 80098bc:	803b      	strh	r3, [r7, #0]
 80098be:	4613      	mov	r3, r2
 80098c0:	70bb      	strb	r3, [r7, #2]
:Pgain(PgainMotor), Igain(IgainMotor), Dgain(DgainMotor)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a18      	ldr	r2, [pc, #96]	; (8009928 <_ZN23FeedbackMotorControllerC1E12enm_motor_idta+0x80>)
 80098c6:	611a      	str	r2, [r3, #16]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a18      	ldr	r2, [pc, #96]	; (800992c <_ZN23FeedbackMotorControllerC1E12enm_motor_idta+0x84>)
 80098cc:	615a      	str	r2, [r3, #20]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a16      	ldr	r2, [pc, #88]	; (800992c <_ZN23FeedbackMotorControllerC1E12enm_motor_idta+0x84>)
 80098d2:	619a      	str	r2, [r3, #24]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098da:	839a      	strh	r2, [r3, #28]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24
{
	driver = new MotorDriver(id, polarity);
 80098e4:	2008      	movs	r0, #8
 80098e6:	f005 fadb 	bl	800eea0 <_Znwj>
 80098ea:	4603      	mov	r3, r0
 80098ec:	461c      	mov	r4, r3
 80098ee:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	4619      	mov	r1, r3
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff fdb2 	bl	8009460 <_ZN11MotorDriverC1E12enm_motor_idi>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	629c      	str	r4, [r3, #40]	; 0x28
	encoder = new Encoder(id, t_period, polarity);
 8009900:	2020      	movs	r0, #32
 8009902:	f005 facd 	bl	800eea0 <_Znwj>
 8009906:	4603      	mov	r3, r0
 8009908:	461c      	mov	r4, r3
 800990a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800990e:	883a      	ldrh	r2, [r7, #0]
 8009910:	78f9      	ldrb	r1, [r7, #3]
 8009912:	4620      	mov	r0, r4
 8009914:	f7ff fec0 	bl	8009698 <_ZN7EncoderC1E12enm_motor_idta>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	62dc      	str	r4, [r3, #44]	; 0x2c
}
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bd90      	pop	{r4, r7, pc}
 8009926:	bf00      	nop
 8009928:	4039999a 	.word	0x4039999a
 800992c:	3dcccccd 	.word	0x3dcccccd

08009930 <_ZN23FeedbackMotorController4initEv>:

void FeedbackMotorController::init()
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
	driver->init();
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fda3 	bl	8009488 <_ZN11MotorDriver4initEv>
	encoder->init();
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fed0 	bl	80096ec <_ZN7Encoder4initEv>
	reset();
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f804 	bl	800995a <_ZN23FeedbackMotorController5resetEv>
}
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <_ZN23FeedbackMotorController5resetEv>:

void FeedbackMotorController::reset()
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
	target_velocity = 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
	old_velocity = 0;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	605a      	str	r2, [r3, #4]
	i_term = 0;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	609a      	str	r2, [r3, #8]
	d_term = 0;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f04f 0200 	mov.w	r2, #0
 8009980:	60da      	str	r2, [r3, #12]
	encoder->reset_count();
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff ff6a 	bl	8009860 <_ZN7Encoder11reset_countEv>
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <_ZN23FeedbackMotorController19set_target_velocityEf>:

void FeedbackMotorController::set_target_velocity(float velocity)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	ed87 0a00 	vstr	s0, [r7]
	if (velocity < -MaxVelocity) {
 80099a0:	4b14      	ldr	r3, [pc, #80]	; (80099f4 <_ZN23FeedbackMotorController19set_target_velocityEf+0x60>)
 80099a2:	edd3 7a00 	vldr	s15, [r3]
 80099a6:	eef1 7a67 	vneg.f32	s15, s15
 80099aa:	ed97 7a00 	vldr	s14, [r7]
 80099ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b6:	d507      	bpl.n	80099c8 <_ZN23FeedbackMotorController19set_target_velocityEf+0x34>
		velocity = -MaxVelocity;
 80099b8:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <_ZN23FeedbackMotorController19set_target_velocityEf+0x60>)
 80099ba:	edd3 7a00 	vldr	s15, [r3]
 80099be:	eef1 7a67 	vneg.f32	s15, s15
 80099c2:	edc7 7a00 	vstr	s15, [r7]
 80099c6:	e00c      	b.n	80099e2 <_ZN23FeedbackMotorController19set_target_velocityEf+0x4e>
	} else if (velocity > MaxVelocity) {
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <_ZN23FeedbackMotorController19set_target_velocityEf+0x60>)
 80099ca:	edd3 7a00 	vldr	s15, [r3]
 80099ce:	ed97 7a00 	vldr	s14, [r7]
 80099d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099da:	dd02      	ble.n	80099e2 <_ZN23FeedbackMotorController19set_target_velocityEf+0x4e>
		velocity = MaxVelocity;
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <_ZN23FeedbackMotorController19set_target_velocityEf+0x60>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	603b      	str	r3, [r7, #0]
	}
	target_velocity = velocity;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	601a      	str	r2, [r3, #0]
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	20001620 	.word	0x20001620

080099f8 <_ZN23FeedbackMotorController19fb_control_periodicEv>:

void FeedbackMotorController::fb_control_periodic()
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	float dif_velocity;
	float err_sig;
	encoder->count_periodic();
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff fe9b 	bl	8009740 <_ZN7Encoder14count_periodicEv>
	velocity_now = encoder->get_velocity();
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff fe7d 	bl	800970e <_ZN7Encoder12get_velocityEv>
 8009a14:	eef0 7a40 	vmov.f32	s15, s0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d_term = velocity_now - old_velocity;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	edc3 7a03 	vstr	s15, [r3, #12]
	old_velocity = velocity_now;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	605a      	str	r2, [r3, #4]
	dif_velocity = target_velocity - velocity_now;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	ed93 7a00 	vldr	s14, [r3]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a4c:	edc7 7a03 	vstr	s15, [r7, #12]
	err_sig = Velocity2Duty * dif_velocity;
 8009a50:	4b45      	ldr	r3, [pc, #276]	; (8009b68 <_ZN23FeedbackMotorController19fb_control_periodicEv+0x170>)
 8009a52:	edd3 7a00 	vldr	s15, [r3]
 8009a56:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5e:	edc7 7a02 	vstr	s15, [r7, #8]
	i_term += err_sig;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	edc3 7a02 	vstr	s15, [r3, #8]
	if (i_term > MaxIterm) {
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a92:	dd0a      	ble.n	8009aaa <_ZN23FeedbackMotorController19fb_control_periodicEv+0xb2>
		i_term = MaxIterm;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	edc3 7a02 	vstr	s15, [r3, #8]
 8009aa8:	e01a      	b.n	8009ae0 <_ZN23FeedbackMotorController19fb_control_periodicEv+0xe8>
	} else if (i_term < -MaxIterm) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	ed93 7a02 	vldr	s14, [r3, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009ab6:	425b      	negs	r3, r3
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac8:	d50a      	bpl.n	8009ae0 <_ZN23FeedbackMotorController19fb_control_periodicEv+0xe8>
		i_term = -MaxIterm;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009ad0:	425b      	negs	r3, r3
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	motor_duty = Pgain * err_sig + Igain * i_term + Dgain * d_term;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	ed93 7a04 	vldr	s14, [r3, #16]
 8009ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8009aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	edd3 6a05 	vldr	s13, [r3, #20]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	edd3 7a02 	vldr	s15, [r3, #8]
 8009afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	edd3 6a06 	vldr	s13, [r3, #24]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8009b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	edc3 7a08 	vstr	s15, [r3, #32]
	if (motor_duty < 0) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2a:	d50e      	bpl.n	8009b4a <_ZN23FeedbackMotorController19fb_control_periodicEv+0x152>
		driver->drive_motor_duty(-motor_duty, BACKWARD);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	edd3 7a08 	vldr	s15, [r3, #32]
 8009b36:	eef1 7a67 	vneg.f32	s15, s15
 8009b3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7ff fcc4 	bl	80094d0 <_ZN11MotorDriver16drive_motor_dutyEfi>
	} else {
		driver->drive_motor_duty(motor_duty, FORWARD);
	}
}
 8009b48:	e00a      	b.n	8009b60 <_ZN23FeedbackMotorController19fb_control_periodicEv+0x168>
		driver->drive_motor_duty(motor_duty, FORWARD);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	edd3 7a08 	vldr	s15, [r3, #32]
 8009b54:	2101      	movs	r1, #1
 8009b56:	eeb0 0a67 	vmov.f32	s0, s15
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f7ff fcb8 	bl	80094d0 <_ZN11MotorDriver16drive_motor_dutyEfi>
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20001624 	.word	0x20001624

08009b6c <_ZN27DifferentialDriveControllerC1Eta>:


DifferentialDriveController::DifferentialDriveController(uint16_t interval_time, robot_direction_t direction)
 8009b6c:	b590      	push	{r4, r7, lr}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	807b      	strh	r3, [r7, #2]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	707b      	strb	r3, [r7, #1]
:step_time(interval_time)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	609a      	str	r2, [r3, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f04f 0200 	mov.w	r2, #0
 8009b8a:	60da      	str	r2, [r3, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3310      	adds	r3, #16
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	605a      	str	r2, [r3, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	887a      	ldrh	r2, [r7, #2]
 8009b9a:	831a      	strh	r2, [r3, #24]
{
	fb_controller_left = new FeedbackMotorController(LEFT, interval_time, direction);
 8009b9c:	2030      	movs	r0, #48	; 0x30
 8009b9e:	f005 f97f 	bl	800eea0 <_Znwj>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461c      	mov	r4, r3
 8009ba6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8009baa:	887a      	ldrh	r2, [r7, #2]
 8009bac:	2100      	movs	r1, #0
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f7ff fe7a 	bl	80098a8 <_ZN23FeedbackMotorControllerC1E12enm_motor_idta>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	601c      	str	r4, [r3, #0]
	fb_controller_right = new FeedbackMotorController(RIGHT, interval_time, -direction);
 8009bb8:	2030      	movs	r0, #48	; 0x30
 8009bba:	f005 f971 	bl	800eea0 <_Znwj>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	461c      	mov	r4, r3
 8009bc2:	787b      	ldrb	r3, [r7, #1]
 8009bc4:	425b      	negs	r3, r3
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	b25b      	sxtb	r3, r3
 8009bca:	887a      	ldrh	r2, [r7, #2]
 8009bcc:	2101      	movs	r1, #1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f7ff fe6a 	bl	80098a8 <_ZN23FeedbackMotorControllerC1E12enm_motor_idta>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	605c      	str	r4, [r3, #4]
}
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd90      	pop	{r4, r7, pc}

08009be2 <_ZN27DifferentialDriveController5resetEv>:

void DifferentialDriveController::reset()
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
	fb_controller_left->reset();
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff feb3 	bl	800995a <_ZN23FeedbackMotorController5resetEv>
	fb_controller_right->reset();
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff feae 	bl	800995a <_ZN23FeedbackMotorController5resetEv>
	reset_odom();
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f819 	bl	8009c36 <_ZN27DifferentialDriveController10reset_odomEv>
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <_ZN27DifferentialDriveController4initEv>:

void DifferentialDriveController::init()
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	fb_controller_left->init();
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fe89 	bl	8009930 <_ZN23FeedbackMotorController4initEv>
	fb_controller_right->init();
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fe84 	bl	8009930 <_ZN23FeedbackMotorController4initEv>
	reset_odom();
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f804 	bl	8009c36 <_ZN27DifferentialDriveController10reset_odomEv>
}
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <_ZN27DifferentialDriveController10reset_odomEv>:

void DifferentialDriveController::reset_odom()
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
	odom.position = {0, 0, 0};
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	61da      	str	r2, [r3, #28]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f04f 0200 	mov.w	r2, #0
 8009c4c:	621a      	str	r2, [r3, #32]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	625a      	str	r2, [r3, #36]	; 0x24
	odom.velocity = {0, 0};
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <_ZN27DifferentialDriveController11set_cmd_velEff>:

void DifferentialDriveController::set_cmd_vel(float cmd_lin_vel, float cmd_ang_vel)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8009c80:	edc7 0a01 	vstr	s1, [r7, #4]
	target_lin_vel = cmd_lin_vel;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	609a      	str	r2, [r3, #8]
	target_ang_vel = cmd_ang_vel;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
	wheel_velocity_cmd[LEFT]   = cmd_lin_vel - (cmd_ang_vel * WheelSeparation / 2);
 8009c90:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c94:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009d04 <_ZN27DifferentialDriveController11set_cmd_velEff+0x90>
 8009c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009c9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ca4:	ed97 7a02 	vldr	s14, [r7, #8]
 8009ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	edc3 7a04 	vstr	s15, [r3, #16]
	wheel_velocity_cmd[RIGHT]  = cmd_lin_vel + (cmd_ang_vel * WheelSeparation / 2);
 8009cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009cb6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009d04 <_ZN27DifferentialDriveController11set_cmd_velEff+0x90>
 8009cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009cc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009cc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8009cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	edc3 7a05 	vstr	s15, [r3, #20]
	fb_controller_left->set_target_velocity(wheel_velocity_cmd[LEFT]);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8009cde:	eeb0 0a67 	vmov.f32	s0, s15
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7ff fe56 	bl	8009994 <_ZN23FeedbackMotorController19set_target_velocityEf>
	fb_controller_right->set_target_velocity(wheel_velocity_cmd[RIGHT]);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8009cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7ff fe4c 	bl	8009994 <_ZN23FeedbackMotorController19set_target_velocityEf>
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	3e3d70a4 	.word	0x3e3d70a4

08009d08 <_ZN27DifferentialDriveController16control_periodicEv>:

void DifferentialDriveController::control_periodic()
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	fb_motor_control_periodic();
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f807 	bl	8009d24 <_ZN27DifferentialDriveController25fb_motor_control_periodicEv>
	odom_calc_periodic();
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f816 	bl	8009d48 <_ZN27DifferentialDriveController18odom_calc_periodicEv>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <_ZN27DifferentialDriveController25fb_motor_control_periodicEv>:

void DifferentialDriveController::fb_motor_control_periodic()
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	fb_controller_left->fb_control_periodic();
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fe61 	bl	80099f8 <_ZN23FeedbackMotorController19fb_control_periodicEv>
	fb_controller_right->fb_control_periodic();
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff fe5c 	bl	80099f8 <_ZN23FeedbackMotorController19fb_control_periodicEv>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <_ZN27DifferentialDriveController18odom_calc_periodicEv>:

void DifferentialDriveController::odom_calc_periodic()
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	ed2d 8b02 	vpush	{d8}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
	float vel_left_wheel = 0;
 8009d54:	f04f 0300 	mov.w	r3, #0
 8009d58:	60fb      	str	r3, [r7, #12]
	float vel_right_wheel = 0;
 8009d5a:	f04f 0300 	mov.w	r3, #0
 8009d5e:	60bb      	str	r3, [r7, #8]
//	float turning_r;
	vel_left_wheel = fb_controller_left->encoder->get_velocity();
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fcd1 	bl	800970e <_ZN7Encoder12get_velocityEv>
 8009d6c:	ed87 0a03 	vstr	s0, [r7, #12]
	vel_right_wheel = fb_controller_right->encoder->get_velocity();
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff fcc9 	bl	800970e <_ZN7Encoder12get_velocityEv>
 8009d7c:	ed87 0a02 	vstr	s0, [r7, #8]
	odom.velocity.lin = (vel_left_wheel + vel_right_wheel)/2;
 8009d80:	ed97 7a03 	vldr	s14, [r7, #12]
 8009d84:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	odom.velocity.ang = (vel_right_wheel - vel_left_wheel)/WheelSeparation;
 8009d9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8009d9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009da6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8009ed4 <_ZN27DifferentialDriveController18odom_calc_periodicEv+0x18c>
 8009daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	odom.position.x += odom.velocity.lin * simple_math::cos(odom.position.theta + (odom.velocity.ang/2) * step_time/1000) * step_time/1000;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009dc6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009dca:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8b1b      	ldrh	r3, [r3, #24]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009dde:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8009ed8 <_ZN27DifferentialDriveController18odom_calc_periodicEv+0x190>
 8009de2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dea:	eeb0 0a67 	vmov.f32	s0, s15
 8009dee:	f004 ffbd 	bl	800ed6c <_ZN11simple_math3cosEf>
 8009df2:	eef0 7a40 	vmov.f32	s15, s0
 8009df6:	ee28 7a27 	vmul.f32	s14, s16, s15
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	8b1b      	ldrh	r3, [r3, #24]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8009ed8 <_ZN27DifferentialDriveController18odom_calc_periodicEv+0x190>
 8009e0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	edd3 7a07 	vldr	s15, [r3, #28]
 8009e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	edc3 7a07 	vstr	s15, [r3, #28]
	odom.position.y += odom.velocity.lin * simple_math::sin(odom.position.theta + (odom.velocity.ang/2) * step_time/1000) * step_time/1000;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009e34:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009e38:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8b1b      	ldrh	r3, [r3, #24]
 8009e40:	ee07 3a90 	vmov	s15, r3
 8009e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009e4c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8009ed8 <_ZN27DifferentialDriveController18odom_calc_periodicEv+0x190>
 8009e50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e58:	eeb0 0a67 	vmov.f32	s0, s15
 8009e5c:	f004 ff2a 	bl	800ecb4 <_ZN11simple_math3sinEf>
 8009e60:	eef0 7a40 	vmov.f32	s15, s0
 8009e64:	ee28 7a27 	vmul.f32	s14, s16, s15
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	8b1b      	ldrh	r3, [r3, #24]
 8009e6c:	ee07 3a90 	vmov	s15, r3
 8009e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e78:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009ed8 <_ZN27DifferentialDriveController18odom_calc_periodicEv+0x190>
 8009e7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	edd3 7a08 	vldr	s15, [r3, #32]
 8009e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	edc3 7a08 	vstr	s15, [r3, #32]
	odom.position.theta += odom.velocity.ang * step_time / 1000;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	8b1b      	ldrh	r3, [r3, #24]
 8009ea0:	ee07 3a90 	vmov	s15, r3
 8009ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ea8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009eac:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8009ed8 <_ZN27DifferentialDriveController18odom_calc_periodicEv+0x190>
 8009eb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	odom.time_stamp = (uint32_t) xTaskGetTickCount();
 8009ebe:	f7fd fed7 	bl	8007c70 <xTaskGetTickCount>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	631a      	str	r2, [r3, #48]	; 0x30
	//	turning_r = odom.velocity.lin/odom.velocity.ang;
	//	odom.position.x += -turning_r * sin(odom.position.theta) + turning_r * sin(odom.position.theta + odom.velocity.ang * step_time/1000);
	//	odom.position.y += turning_r * cos(odom.position.theta) - turning_r * cos(odom.position.theta + odom.velocity.ang * step_time/1000);
	//	odom.position.theta += odom.velocity.ang * step_time / 1000;
}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	ecbd 8b02 	vpop	{d8}
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	3e3d70a4 	.word	0x3e3d70a4
 8009ed8:	447a0000 	.word	0x447a0000

08009edc <_ZN27DifferentialDriveController16get_wheel_anglesEPd>:

void DifferentialDriveController::get_wheel_angles(double * wheel_angles)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
	wheel_angles[0] = (double)fb_controller_left->encoder->rotation_angle;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7f6 fada 	bl	80004a8 <__aeabi_f2d>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	e9c1 2300 	strd	r2, r3, [r1]
	wheel_angles[1] = (double)fb_controller_right->encoder->rotation_angle;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	695a      	ldr	r2, [r3, #20]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	f103 0408 	add.w	r4, r3, #8
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7f6 facb 	bl	80004a8 <__aeabi_f2d>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	e9c4 2300 	strd	r2, r3, [r4]
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}
	...

08009f24 <_ZN27DifferentialDriveController26get_wheel_angle_velocitiesEPd>:

void DifferentialDriveController::get_wheel_angle_velocities(double * wheel_angle_velocities)
{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
	wheel_angle_velocities[0] = fb_controller_left->encoder->nrps * 2 * simple_math::PI;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	edd3 7a07 	vldr	s15, [r3, #28]
 8009f38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f3c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009f8c <_ZN27DifferentialDriveController26get_wheel_angle_velocitiesEPd+0x68>
 8009f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f44:	ee17 0a90 	vmov	r0, s15
 8009f48:	f7f6 faae 	bl	80004a8 <__aeabi_f2d>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	e9c1 2300 	strd	r2, r3, [r1]
	wheel_angle_velocities[1] = fb_controller_right->encoder->nrps * 2 * simple_math::PI;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8009f60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f64:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009f8c <_ZN27DifferentialDriveController26get_wheel_angle_velocitiesEPd+0x68>
 8009f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f103 0408 	add.w	r4, r3, #8
 8009f72:	ee17 0a90 	vmov	r0, s15
 8009f76:	f7f6 fa97 	bl	80004a8 <__aeabi_f2d>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd90      	pop	{r4, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	40490fda 	.word	0x40490fda

08009f90 <_Z41__static_initialization_and_destruction_0ii>:
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d117      	bne.n	8009fd0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d112      	bne.n	8009fd0 <_Z41__static_initialization_and_destruction_0ii+0x40>
const float MaxVelocity = nrps2velocity(MaxMotorNrps);
 8009faa:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8009fae:	f7ff fc67 	bl	8009880 <_Z13nrps2velocityf>
 8009fb2:	eef0 7a40 	vmov.f32	s15, s0
 8009fb6:	4b08      	ldr	r3, [pc, #32]	; (8009fd8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009fb8:	edc3 7a00 	vstr	s15, [r3]
const float Velocity2Duty = 100/MaxVelocity;
 8009fbc:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009fbe:	ed93 7a00 	vldr	s14, [r3]
 8009fc2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8009fdc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8009fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009fcc:	edc3 7a00 	vstr	s15, [r3]
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20001620 	.word	0x20001620
 8009fdc:	42c80000 	.word	0x42c80000
 8009fe0:	20001624 	.word	0x20001624

08009fe4 <_GLOBAL__sub_I__ZN23FeedbackMotorControllerC2E12enm_motor_idta>:
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fec:	2001      	movs	r0, #1
 8009fee:	f7ff ffcf 	bl	8009f90 <_Z41__static_initialization_and_destruction_0ii>
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <vApplicationStackOverflowHook>:
//}
#ifdef __cplusplus
 extern "C" {
#endif
void vApplicationStackOverflowHook( TaskHandle_t xTask, char * pcTaskName )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	while(1);
 8009ffe:	e7fe      	b.n	8009ffe <vApplicationStackOverflowHook+0xa>

0800a000 <HAL_GetTick>:
}

uint32_t HAL_GetTick(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  return (uint32_t) xTaskGetTickCount();
 800a004:	f7fd fe34 	bl	8007c70 <xTaskGetTickCount>
 800a008:	4603      	mov	r3, r0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800a010:	b590      	push	{r4, r7, lr}
 800a012:	b083      	sub	sp, #12
 800a014:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */

	init_rosserial();
 800a016:	f003 fd65 	bl	800dae4 <init_rosserial>
	init_dif_drive_task();
 800a01a:	f7ff f99b 	bl	8009354 <init_dif_drive_task>
	if (xTaskCreate(DiagTask, "DiagTask", 96, NULL, tskIDLE_PRIORITY+1, &diagTaskHandle) != pdPASS)
 800a01e:	4b17      	ldr	r3, [pc, #92]	; (800a07c <MX_FREERTOS_Init+0x6c>)
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	2301      	movs	r3, #1
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	2300      	movs	r3, #0
 800a028:	2260      	movs	r2, #96	; 0x60
 800a02a:	4915      	ldr	r1, [pc, #84]	; (800a080 <MX_FREERTOS_Init+0x70>)
 800a02c:	4815      	ldr	r0, [pc, #84]	; (800a084 <MX_FREERTOS_Init+0x74>)
 800a02e:	f7fd fbf5 	bl	800781c <xTaskCreate>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	bf14      	ite	ne
 800a038:	2301      	movne	r3, #1
 800a03a:	2300      	moveq	r3, #0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d000      	beq.n	800a044 <MX_FREERTOS_Init+0x34>
	{
		while(1);
 800a042:	e7fe      	b.n	800a042 <MX_FREERTOS_Init+0x32>
//	}

//	repeatIMUHandle = xTimerCreate("IMURepeatTimer", IMUPeriod/portTICK_PERIOD_MS, pdTRUE, NULL, repeatIMUCallBack);
//	assert_param(repeatIMUHandle != NULL);
//	xTimerStart(repeatIMUHandle, 0);
	repeatDiagHandle = xTimerCreate("DiagRepeatTimer", DiagPeriod/portTICK_PERIOD_MS, pdTRUE, NULL, repeatDiagCallBack);
 800a044:	4b10      	ldr	r3, [pc, #64]	; (800a088 <MX_FREERTOS_Init+0x78>)
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	2300      	movs	r3, #0
 800a04a:	2201      	movs	r2, #1
 800a04c:	2140      	movs	r1, #64	; 0x40
 800a04e:	480f      	ldr	r0, [pc, #60]	; (800a08c <MX_FREERTOS_Init+0x7c>)
 800a050:	f7fe fb1c 	bl	800868c <xTimerCreate>
 800a054:	4603      	mov	r3, r0
 800a056:	4a0e      	ldr	r2, [pc, #56]	; (800a090 <MX_FREERTOS_Init+0x80>)
 800a058:	6013      	str	r3, [r2, #0]
	assert_param(repeatDiagHandle != NULL);
	xTimerStart(repeatDiagHandle, 0);
 800a05a:	4b0d      	ldr	r3, [pc, #52]	; (800a090 <MX_FREERTOS_Init+0x80>)
 800a05c:	681c      	ldr	r4, [r3, #0]
 800a05e:	f7fd fe07 	bl	8007c70 <xTaskGetTickCount>
 800a062:	4602      	mov	r2, r0
 800a064:	2300      	movs	r3, #0
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2300      	movs	r3, #0
 800a06a:	2101      	movs	r1, #1
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7fe fb5d 	bl	800872c <xTimerGenericCommand>

}
 800a072:	bf00      	nop
 800a074:	3704      	adds	r7, #4
 800a076:	46bd      	mov	sp, r7
 800a078:	bd90      	pop	{r4, r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20001628 	.word	0x20001628
 800a080:	0800f284 	.word	0x0800f284
 800a084:	0800a095 	.word	0x0800a095
 800a088:	0800a0c9 	.word	0x0800a0c9
 800a08c:	0800f290 	.word	0x0800f290
 800a090:	2000162c 	.word	0x2000162c

0800a094 <_Z8DiagTaskPv>:

#include "battery_monitor.h"
BatteryMonitor battery_monitor = BatteryMonitor();

void DiagTask(void * argument)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	battery_monitor.init();
 800a09c:	4809      	ldr	r0, [pc, #36]	; (800a0c4 <_Z8DiagTaskPv+0x30>)
 800a09e:	f7ff f8df 	bl	8009260 <_ZN14BatteryMonitor4initEv>
	for(;;)
	{
		if (ulTaskNotifyTake(pdFALSE, 2 * DiagPeriod / portTICK_PERIOD_MS) != 0)
 800a0a2:	2180      	movs	r1, #128	; 0x80
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	f7fe f97f 	bl	80083a8 <ulTaskNotifyTake>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bf14      	ite	ne
 800a0b0:	2301      	movne	r3, #1
 800a0b2:	2300      	moveq	r3, #0
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <_Z8DiagTaskPv+0x2e>
		{
			battery_monitor.calc_battery_state();
 800a0ba:	4802      	ldr	r0, [pc, #8]	; (800a0c4 <_Z8DiagTaskPv+0x30>)
 800a0bc:	f7ff f8f4 	bl	80092a8 <_ZN14BatteryMonitor18calc_battery_stateEv>
 800a0c0:	e7ef      	b.n	800a0a2 <_Z8DiagTaskPv+0xe>
		}
		else
		{
			while(1);
 800a0c2:	e7fe      	b.n	800a0c2 <_Z8DiagTaskPv+0x2e>
 800a0c4:	20001630 	.word	0x20001630

0800a0c8 <_Z18repeatDiagCallBackPv>:
{
	xTaskNotifyGive(IMUTaskHandle);
}

void repeatDiagCallBack(TimerHandle_t xTimer)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	xTaskNotifyGive(diagTaskHandle);
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <_Z18repeatDiagCallBackPv+0x20>)
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	2100      	movs	r1, #0
 800a0da:	f7fe f9ad 	bl	8008438 <xTaskGenericNotify>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20001628 	.word	0x20001628

0800a0ec <_Z41__static_initialization_and_destruction_0ii>:
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d107      	bne.n	800a10c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a102:	4293      	cmp	r3, r2
 800a104:	d102      	bne.n	800a10c <_Z41__static_initialization_and_destruction_0ii+0x20>
BatteryMonitor battery_monitor = BatteryMonitor();
 800a106:	4803      	ldr	r0, [pc, #12]	; (800a114 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800a108:	f7ff f894 	bl	8009234 <_ZN14BatteryMonitorC1Ev>
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20001630 	.word	0x20001630

0800a118 <_GLOBAL__sub_I_IMUTaskHandle>:
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a120:	2001      	movs	r0, #1
 800a122:	f7ff ffe3 	bl	800a0ec <_Z41__static_initialization_and_destruction_0ii>
 800a126:	bd80      	pop	{r7, pc}

0800a128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a12c:	f7f7 f8b6 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a130:	f000 f817 	bl	800a162 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a134:	f7f6 fb32 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 800a138:	f7f6 fb0a 	bl	8000750 <MX_DMA_Init>
  MX_ADC1_Init();
 800a13c:	f7f6 fa5c 	bl	80005f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800a140:	f7f6 fd8a 	bl	8000c58 <MX_TIM1_Init>
  MX_TIM2_Init();
 800a144:	f7f6 fde2 	bl	8000d0c <MX_TIM2_Init>
  MX_TIM3_Init();
 800a148:	f7f6 fe72 	bl	8000e30 <MX_TIM3_Init>
  init_imu();
 800a14c:	f004 fe26 	bl	800ed9c <init_imu>
//  MX_SPI1_Init();
//  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
 800a150:	f7f6 ffa4 	bl	800109c <MX_USART1_UART_Init>
  init_dif_drive();
 800a154:	f7ff f8f4 	bl	8009340 <init_dif_drive>
//  SEGGER_SYSVIEW_Conf();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800a158:	f7ff ff5a 	bl	800a010 <MX_FREERTOS_Init>
  /* Start scheduler */
  vTaskStartScheduler();
 800a15c:	f7fd fc90 	bl	8007a80 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a160:	e7fe      	b.n	800a160 <main+0x38>

0800a162 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b090      	sub	sp, #64	; 0x40
 800a166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a168:	f107 0318 	add.w	r3, r7, #24
 800a16c:	2228      	movs	r2, #40	; 0x28
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f004 ff0b 	bl	800ef8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a176:	1d3b      	adds	r3, r7, #4
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	605a      	str	r2, [r3, #4]
 800a17e:	609a      	str	r2, [r3, #8]
 800a180:	60da      	str	r2, [r3, #12]
 800a182:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a184:	2302      	movs	r3, #2
 800a186:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a188:	2301      	movs	r3, #1
 800a18a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a18c:	2310      	movs	r3, #16
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a190:	2302      	movs	r3, #2
 800a192:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a194:	2300      	movs	r3, #0
 800a196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800a198:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800a19c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a19e:	f107 0318 	add.w	r3, r7, #24
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f8 fcea 	bl	8002b7c <HAL_RCC_OscConfig>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bf14      	ite	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	2300      	moveq	r3, #0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800a1b8:	f000 f830 	bl	800a21c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1bc:	230f      	movs	r3, #15
 800a1be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a1c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a1d2:	1d3b      	adds	r3, r7, #4
 800a1d4:	2102      	movs	r1, #2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f9 fbd8 	bl	800398c <HAL_RCC_ClockConfig>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bf14      	ite	ne
 800a1e2:	2301      	movne	r3, #1
 800a1e4:	2300      	moveq	r3, #0
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800a1ec:	f000 f816 	bl	800a21c <Error_Handler>
  }
}
 800a1f0:	bf00      	nop
 800a1f2:	3740      	adds	r7, #64	; 0x40
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a04      	ldr	r2, [pc, #16]	; (800a218 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a20a:	f7f7 f85d 	bl	80012c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	40014000 	.word	0x40014000

0800a21c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a220:	b672      	cpsid	i
}
 800a222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a224:	e7fe      	b.n	800a224 <Error_Handler+0x8>

0800a226 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	605a      	str	r2, [r3, #4]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	4a04      	ldr	r2, [pc, #16]	; (800a264 <_ZN3ros3MsgC1Ev+0x1c>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	0800f830 	.word	0x0800f830

0800a268 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
      data()
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff ffe8 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800a278:	4a06      	ldr	r2, [pc, #24]	; (800a294 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3304      	adds	r3, #4
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff ffcf 	bl	800a226 <_ZN3ros4TimeC1Ev>
    {
    }
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	0800f818 	.word	0x0800f818

0800a298 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6859      	ldr	r1, [r3, #4]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	b2ca      	uxtb	r2, r1
 800a2b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	0a19      	lsrs	r1, r3, #8
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	b2ca      	uxtb	r2, r1
 800a2c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	0c19      	lsrs	r1, r3, #16
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3302      	adds	r3, #2
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	b2ca      	uxtb	r2, r1
 800a2d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	0e19      	lsrs	r1, r3, #24
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3303      	adds	r3, #3
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	b2ca      	uxtb	r2, r1
 800a2e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6899      	ldr	r1, [r3, #8]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	b2ca      	uxtb	r2, r1
 800a2fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	0a19      	lsrs	r1, r3, #8
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3301      	adds	r3, #1
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	4413      	add	r3, r2
 800a30c:	b2ca      	uxtb	r2, r1
 800a30e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	0c19      	lsrs	r1, r3, #16
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3302      	adds	r3, #2
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4413      	add	r3, r2
 800a31e:	b2ca      	uxtb	r2, r1
 800a320:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	0e19      	lsrs	r1, r3, #24
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3303      	adds	r3, #3
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	4413      	add	r3, r2
 800a330:	b2ca      	uxtb	r2, r1
 800a332:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3304      	adds	r3, #4
 800a338:	60fb      	str	r3, [r7, #12]
      return offset;
 800a33a:	68fb      	ldr	r3, [r7, #12]
    }
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	4413      	add	r3, r2
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	440b      	add	r3, r1
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3302      	adds	r3, #2
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	440b      	add	r3, r1
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	041b      	lsls	r3, r3, #16
 800a38a:	431a      	orrs	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3303      	adds	r3, #3
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	440b      	add	r3, r1
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	061b      	lsls	r3, r3, #24
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	440b      	add	r3, r1
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	021b      	lsls	r3, r3, #8
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	440b      	add	r3, r1
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3303      	adds	r3, #3
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	440b      	add	r3, r1
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	061b      	lsls	r3, r3, #24
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3304      	adds	r3, #4
 800a400:	60fb      	str	r3, [r7, #12]
     return offset;
 800a402:	68fb      	ldr	r3, [r7, #12]
    }
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	0800f2a0 	.word	0x0800f2a0

0800a42c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	4b03      	ldr	r3, [pc, #12]	; (800a444 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	0800f2b0 	.word	0x0800f2b0

0800a448 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff fef8 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800a458:	4a0b      	ldr	r2, [pc, #44]	; (800a488 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	809a      	strh	r2, [r3, #4]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a09      	ldr	r2, [pc, #36]	; (800a48c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800a468:	609a      	str	r2, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a07      	ldr	r2, [pc, #28]	; (800a48c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800a46e:	60da      	str	r2, [r3, #12]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a06      	ldr	r2, [pc, #24]	; (800a48c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800a474:	611a      	str	r2, [r3, #16]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	615a      	str	r2, [r3, #20]
    {
    }
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	0800f800 	.word	0x0800f800
 800a48c:	0800f2d4 	.word	0x0800f2d4

0800a490 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	8899      	ldrh	r1, [r3, #4]
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	b2ca      	uxtb	r2, r1
 800a4aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	889b      	ldrh	r3, [r3, #4]
 800a4b0:	0a1b      	lsrs	r3, r3, #8
 800a4b2:	b299      	uxth	r1, r3
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	b2ca      	uxtb	r2, r1
 800a4be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7f5 fe80 	bl	80001d0 <strlen>
 800a4d0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	69b9      	ldr	r1, [r7, #24]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f003 fc8c 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	18d0      	adds	r0, r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	f004 fd3c 	bl	800ef70 <memcpy>
      offset += length_topic_name;
 800a4f8:	69fa      	ldr	r2, [r7, #28]
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	4618      	mov	r0, r3
 800a506:	f7f5 fe63 	bl	80001d0 <strlen>
 800a50a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	4413      	add	r3, r2
 800a512:	6979      	ldr	r1, [r7, #20]
 800a514:	4618      	mov	r0, r3
 800a516:	f003 fc6f 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	3304      	adds	r3, #4
 800a51e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	18d0      	adds	r0, r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	4619      	mov	r1, r3
 800a52e:	f004 fd1f 	bl	800ef70 <memcpy>
      offset += length_message_type;
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	4413      	add	r3, r2
 800a538:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f5 fe46 	bl	80001d0 <strlen>
 800a544:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	4413      	add	r3, r2
 800a54c:	6939      	ldr	r1, [r7, #16]
 800a54e:	4618      	mov	r0, r3
 800a550:	f003 fc52 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	3304      	adds	r3, #4
 800a558:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	18d0      	adds	r0, r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4619      	mov	r1, r3
 800a568:	f004 fd02 	bl	800ef70 <memcpy>
      offset += length_md5sum;
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	4413      	add	r3, r2
 800a572:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4413      	add	r3, r2
 800a582:	b2ca      	uxtb	r2, r1
 800a584:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	0a19      	lsrs	r1, r3, #8
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4413      	add	r3, r2
 800a592:	b2ca      	uxtb	r2, r1
 800a594:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	0c19      	lsrs	r1, r3, #16
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	3302      	adds	r3, #2
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	b2ca      	uxtb	r2, r1
 800a5a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	0e19      	lsrs	r1, r3, #24
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	3303      	adds	r3, #3
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	b2ca      	uxtb	r2, r1
 800a5b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	61fb      	str	r3, [r7, #28]
      return offset;
 800a5bc:	69fb      	ldr	r3, [r7, #28]
    }
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b08a      	sub	sp, #40	; 0x28
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4413      	add	r3, r2
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	889b      	ldrh	r3, [r3, #4]
 800a5e6:	b21a      	sxth	r2, r3
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	440b      	add	r3, r1
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	b21b      	sxth	r3, r3
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	b21b      	sxth	r3, r3
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	3302      	adds	r3, #2
 800a604:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	441a      	add	r2, r3
 800a60c:	f107 0314 	add.w	r3, r7, #20
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f003 fc0e 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	3304      	adds	r3, #4
 800a61c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	4413      	add	r3, r2
 800a628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d20c      	bcs.n	800a648 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	441a      	add	r2, r3
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	3b01      	subs	r3, #1
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	440b      	add	r3, r1
 800a63c:	7812      	ldrb	r2, [r2, #0]
 800a63e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	3301      	adds	r3, #1
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
 800a646:	e7ec      	b.n	800a622 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800a648:	69ba      	ldr	r2, [r7, #24]
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	4413      	add	r3, r2
 800a64e:	3b01      	subs	r3, #1
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	4413      	add	r3, r2
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	441a      	add	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	4413      	add	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	441a      	add	r2, r3
 800a672:	f107 0310 	add.w	r3, r7, #16
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f003 fbdb 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	3304      	adds	r3, #4
 800a682:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	623b      	str	r3, [r7, #32]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	4413      	add	r3, r2
 800a68e:	6a3a      	ldr	r2, [r7, #32]
 800a690:	429a      	cmp	r2, r3
 800a692:	d20c      	bcs.n	800a6ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	441a      	add	r2, r3
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	440b      	add	r3, r1
 800a6a2:	7812      	ldrb	r2, [r2, #0]
 800a6a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	623b      	str	r3, [r7, #32]
 800a6ac:	e7ec      	b.n	800a688 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	441a      	add	r2, r3
 800a6d8:	f107 030c 	add.w	r3, r7, #12
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f003 fba8 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	61fb      	str	r3, [r7, #28]
 800a6ee:	69ba      	ldr	r2, [r7, #24]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d20c      	bcs.n	800a714 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	441a      	add	r2, r3
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	3b01      	subs	r3, #1
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	440b      	add	r3, r1
 800a708:	7812      	ldrb	r2, [r2, #0]
 800a70a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	3301      	adds	r3, #1
 800a710:	61fb      	str	r3, [r7, #28]
 800a712:	e7ec      	b.n	800a6ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	3b01      	subs	r3, #1
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	4413      	add	r3, r2
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	3b01      	subs	r3, #1
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	441a      	add	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	440a      	add	r2, r1
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	4313      	orrs	r3, r2
 800a748:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	3301      	adds	r3, #1
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	440b      	add	r3, r1
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	4313      	orrs	r3, r2
 800a75a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	3302      	adds	r3, #2
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	440b      	add	r3, r1
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	3303      	adds	r3, #3
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	440b      	add	r3, r1
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	061b      	lsls	r3, r3, #24
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	3304      	adds	r3, #4
 800a78a:	61bb      	str	r3, [r7, #24]
     return offset;
 800a78c:	69bb      	ldr	r3, [r7, #24]
    }
 800a78e:	4618      	mov	r0, r3
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	0800f2d8 	.word	0x0800f2d8

0800a7b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	0800f2f4 	.word	0x0800f2f4

0800a7d0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff fd34 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800a7e0:	4a06      	ldr	r2, [pc, #24]	; (800a7fc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	711a      	strb	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a04      	ldr	r2, [pc, #16]	; (800a800 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800a7f0:	609a      	str	r2, [r3, #8]
    {
    }
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	0800f7e8 	.word	0x0800f7e8
 800a800:	0800f2d4 	.word	0x0800f2d4

0800a804 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	4413      	add	r3, r2
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	7912      	ldrb	r2, [r2, #4]
 800a81c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3301      	adds	r3, #1
 800a822:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7f5 fcd1 	bl	80001d0 <strlen>
 800a82e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4413      	add	r3, r2
 800a836:	68b9      	ldr	r1, [r7, #8]
 800a838:	4618      	mov	r0, r3
 800a83a:	f003 fadd 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3304      	adds	r3, #4
 800a842:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	18d0      	adds	r0, r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4619      	mov	r1, r3
 800a852:	f004 fb8d 	bl	800ef70 <memcpy>
      offset += length_msg;
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4413      	add	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
      return offset;
 800a85e:	68fb      	ldr	r3, [r7, #12]
    }
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	4413      	add	r3, r2
 800a87c:	781a      	ldrb	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	3301      	adds	r3, #1
 800a886:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	441a      	add	r2, r3
 800a88e:	f107 030c 	add.w	r3, r7, #12
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f003 facd 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	3304      	adds	r3, #4
 800a89e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d20c      	bcs.n	800a8ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	441a      	add	r2, r3
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	440b      	add	r3, r1
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e7ec      	b.n	800a8a4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	441a      	add	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]
     return offset;
 800a8ee:	693b      	ldr	r3, [r7, #16]
    }
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	4b03      	ldr	r3, [pc, #12]	; (800a910 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	0800f318 	.word	0x0800f318

0800a914 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	4b03      	ldr	r3, [pc, #12]	; (800a92c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	0800f32c 	.word	0x0800f32c

0800a930 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff fc84 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800a940:	4a0c      	ldr	r2, [pc, #48]	; (800a974 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	605a      	str	r2, [r3, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	60da      	str	r2, [r3, #12]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	611a      	str	r2, [r3, #16]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	619a      	str	r2, [r3, #24]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	61da      	str	r2, [r3, #28]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	0800f7d0 	.word	0x0800f7d0

0800a978 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6859      	ldr	r1, [r3, #4]
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	4413      	add	r3, r2
 800a990:	b2ca      	uxtb	r2, r1
 800a992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	0a19      	lsrs	r1, r3, #8
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	3301      	adds	r3, #1
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	b2ca      	uxtb	r2, r1
 800a9a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	0c19      	lsrs	r1, r3, #16
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	3302      	adds	r3, #2
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	b2ca      	uxtb	r2, r1
 800a9b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	0e19      	lsrs	r1, r3, #24
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	b2ca      	uxtb	r2, r1
 800a9c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	623b      	str	r3, [r7, #32]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	6a3a      	ldr	r2, [r7, #32]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d22b      	bcs.n	800aa36 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800a9ec:	6939      	ldr	r1, [r7, #16]
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	b2ca      	uxtb	r2, r1
 800a9f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	0a19      	lsrs	r1, r3, #8
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	3301      	adds	r3, #1
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	4413      	add	r3, r2
 800aa04:	b2ca      	uxtb	r2, r1
 800aa06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	0c19      	lsrs	r1, r3, #16
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	3302      	adds	r3, #2
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	4413      	add	r3, r2
 800aa14:	b2ca      	uxtb	r2, r1
 800aa16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	0e19      	lsrs	r1, r3, #24
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	3303      	adds	r3, #3
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	4413      	add	r3, r2
 800aa24:	b2ca      	uxtb	r2, r1
 800aa26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	3301      	adds	r3, #1
 800aa32:	623b      	str	r3, [r7, #32]
 800aa34:	e7ce      	b.n	800a9d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6919      	ldr	r1, [r3, #16]
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	4413      	add	r3, r2
 800aa40:	b2ca      	uxtb	r2, r1
 800aa42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	0a19      	lsrs	r1, r3, #8
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	4413      	add	r3, r2
 800aa52:	b2ca      	uxtb	r2, r1
 800aa54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	0c19      	lsrs	r1, r3, #16
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	3302      	adds	r3, #2
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	4413      	add	r3, r2
 800aa64:	b2ca      	uxtb	r2, r1
 800aa66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	0e19      	lsrs	r1, r3, #24
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	3303      	adds	r3, #3
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	4413      	add	r3, r2
 800aa76:	b2ca      	uxtb	r2, r1
 800aa78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800aa80:	2300      	movs	r3, #0
 800aa82:	61fb      	str	r3, [r7, #28]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d22b      	bcs.n	800aae6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800aa9c:	68f9      	ldr	r1, [r7, #12]
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	b2ca      	uxtb	r2, r1
 800aaa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	0a19      	lsrs	r1, r3, #8
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	3301      	adds	r3, #1
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	4413      	add	r3, r2
 800aab4:	b2ca      	uxtb	r2, r1
 800aab6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	0c19      	lsrs	r1, r3, #16
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	3302      	adds	r3, #2
 800aac0:	683a      	ldr	r2, [r7, #0]
 800aac2:	4413      	add	r3, r2
 800aac4:	b2ca      	uxtb	r2, r1
 800aac6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	0e19      	lsrs	r1, r3, #24
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	3303      	adds	r3, #3
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	4413      	add	r3, r2
 800aad4:	b2ca      	uxtb	r2, r1
 800aad6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	3304      	adds	r3, #4
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	3301      	adds	r3, #1
 800aae2:	61fb      	str	r3, [r7, #28]
 800aae4:	e7ce      	b.n	800aa84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69d9      	ldr	r1, [r3, #28]
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	4413      	add	r3, r2
 800aaf0:	b2ca      	uxtb	r2, r1
 800aaf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	69db      	ldr	r3, [r3, #28]
 800aaf8:	0a19      	lsrs	r1, r3, #8
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	3301      	adds	r3, #1
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	4413      	add	r3, r2
 800ab02:	b2ca      	uxtb	r2, r1
 800ab04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	0c19      	lsrs	r1, r3, #16
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	3302      	adds	r3, #2
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4413      	add	r3, r2
 800ab14:	b2ca      	uxtb	r2, r1
 800ab16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	0e19      	lsrs	r1, r3, #24
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	3303      	adds	r3, #3
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	4413      	add	r3, r2
 800ab26:	b2ca      	uxtb	r2, r1
 800ab28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800ab30:	2300      	movs	r3, #0
 800ab32:	61bb      	str	r3, [r7, #24]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d228      	bcs.n	800ab90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7f5 fb40 	bl	80001d0 <strlen>
 800ab50:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	4413      	add	r3, r2
 800ab58:	6979      	ldr	r1, [r7, #20]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f003 f94c 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	3304      	adds	r3, #4
 800ab64:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	18d0      	adds	r0, r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f004 f9f8 	bl	800ef70 <memcpy>
      offset += length_stringsi;
 800ab80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	4413      	add	r3, r2
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	e7d1      	b.n	800ab34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800ab92:	4618      	mov	r0, r3
 800ab94:	3728      	adds	r7, #40	; 0x28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b08e      	sub	sp, #56	; 0x38
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4413      	add	r3, r2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800abb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb4:	3301      	adds	r3, #1
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	4413      	add	r3, r2
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	6a3a      	ldr	r2, [r7, #32]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800abc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc6:	3302      	adds	r3, #2
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	4413      	add	r3, r2
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	041b      	lsls	r3, r3, #16
 800abd0:	6a3a      	ldr	r2, [r7, #32]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	3303      	adds	r3, #3
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	4413      	add	r3, r2
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	061b      	lsls	r3, r3, #24
 800abe2:	6a3a      	ldr	r2, [r7, #32]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800abe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abea:	3304      	adds	r3, #4
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	6a3a      	ldr	r2, [r7, #32]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d90a      	bls.n	800ac0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f004 fa74 	bl	800f0f0 <realloc>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a3a      	ldr	r2, [r7, #32]
 800ac12:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800ac14:	2300      	movs	r3, #0
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d236      	bcs.n	800ac90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	440a      	add	r2, r1
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac38:	3301      	adds	r3, #1
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	440b      	add	r3, r1
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4a:	3302      	adds	r3, #2
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	440b      	add	r3, r1
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	041b      	lsls	r3, r3, #16
 800ac54:	4313      	orrs	r3, r2
 800ac56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5c:	3303      	adds	r3, #3
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	440b      	add	r3, r1
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	061b      	lsls	r3, r3, #24
 800ac66:	4313      	orrs	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800ac70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac72:	3304      	adds	r3, #4
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	3208      	adds	r2, #8
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	633b      	str	r3, [r7, #48]	; 0x30
 800ac8e:	e7c3      	b.n	800ac18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800ac9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	4413      	add	r3, r2
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	3302      	adds	r3, #2
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	4413      	add	r3, r2
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	4313      	orrs	r3, r2
 800acbc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800acbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc0:	3303      	adds	r3, #3
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	4413      	add	r3, r2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	061b      	lsls	r3, r3, #24
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	4313      	orrs	r3, r2
 800acce:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	3304      	adds	r3, #4
 800acd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d90a      	bls.n	800acf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f004 fa00 	bl	800f0f0 <realloc>
 800acf0:	4602      	mov	r2, r0
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	69fa      	ldr	r2, [r7, #28]
 800acfa:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800acfc:	2300      	movs	r3, #0
 800acfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d236      	bcs.n	800ad78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	440a      	add	r2, r1
 800ad16:	7812      	ldrb	r2, [r2, #0]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	3301      	adds	r3, #1
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	440b      	add	r3, r1
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	3302      	adds	r3, #2
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	440b      	add	r3, r1
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	041b      	lsls	r3, r3, #16
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	3303      	adds	r3, #3
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	440b      	add	r3, r1
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	061b      	lsls	r3, r3, #24
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	3214      	adds	r2, #20
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	3301      	adds	r3, #1
 800ad74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad76:	e7c3      	b.n	800ad00 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800ad82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad84:	3301      	adds	r3, #1
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	4413      	add	r3, r2
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	3302      	adds	r3, #2
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	041b      	lsls	r3, r3, #16
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	3303      	adds	r3, #3
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	4413      	add	r3, r2
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	061b      	lsls	r3, r3, #24
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adba:	3304      	adds	r3, #4
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d90a      	bls.n	800adde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f004 f98c 	bl	800f0f0 <realloc>
 800add8:	4602      	mov	r2, r0
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800ade4:	2300      	movs	r3, #0
 800ade6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adee:	429a      	cmp	r2, r3
 800adf0:	d23f      	bcs.n	800ae72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800adf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	441a      	add	r2, r3
 800adf8:	f107 030c 	add.w	r3, r7, #12
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f003 f818 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	3304      	adds	r3, #4
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d20c      	bcs.n	800ae34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	441a      	add	r2, r3
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	3b01      	subs	r3, #1
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	440b      	add	r3, r1
 800ae28:	7812      	ldrb	r2, [r2, #0]
 800ae2a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	3301      	adds	r3, #1
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
 800ae32:	e7ec      	b.n	800ae0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800ae34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4413      	add	r3, r2
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	4413      	add	r3, r2
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800ae44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae46:	3b01      	subs	r3, #1
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	441a      	add	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800ae50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4413      	add	r3, r2
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	3220      	adds	r2, #32
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae70:	e7ba      	b.n	800ade8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800ae72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800ae74:	4618      	mov	r0, r3
 800ae76:	3738      	adds	r7, #56	; 0x38
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	4b03      	ldr	r3, [pc, #12]	; (800ae94 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	0800f67c 	.word	0x0800f67c

0800ae98 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	0800f350 	.word	0x0800f350

0800aeb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	605a      	str	r2, [r3, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	611a      	str	r2, [r3, #16]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68d8      	ldr	r0, [r3, #12]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	6891      	ldr	r1, [r2, #8]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	4798      	blx	r3
 800af00:	4603      	mov	r3, r0
  };
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
  }
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = RBufLen;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
	...

0800af48 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = TBufLen;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a0a      	ldr	r2, [pc, #40]	; (800af7c <_ZN13STM32HardwareC1Ev+0x34>)
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    }
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	20002558 	.word	0x20002558

0800af80 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f804 	bl	800af96 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800af8e:	bf00      	nop
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <_ZN13STM32Hardware10reset_rbufEv>:
    	rind = 0;
    	twind = 0;
    	tfind = 0;
    }

    void reset_rbuf(void){
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3304      	adds	r3, #4
 800afa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afaa:	4619      	mov	r1, r3
 800afac:	f7fb f814 	bl	8005fd8 <HAL_UART_Receive_DMA>
    }
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <_ZN13STM32Hardware4readEv>:

    int read(){
 800afb8:	b590      	push	{r4, r7, lr}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
      int c = -1;
 800afc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afc4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ffa8 	bl	800af22 <_ZN13STM32Hardware10getRdmaIndEv>
 800afd2:	4603      	mov	r3, r0
 800afd4:	429c      	cmp	r4, r3
 800afd6:	bf14      	ite	ne
 800afd8:	2301      	movne	r3, #1
 800afda:	2300      	moveq	r3, #0
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d011      	beq.n	800b006 <_ZN13STM32Hardware4readEv+0x4e>
        c = rbuf[rind++];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800afe8:	1c59      	adds	r1, r3, #1
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	4413      	add	r3, r2
 800aff4:	791b      	ldrb	r3, [r3, #4]
 800aff6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800affe:	b2da      	uxtb	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
      }
      return c;
 800b006:	68fb      	ldr	r3, [r7, #12]
    }
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd90      	pop	{r4, r7, pc}

0800b010 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b01e:	2b20      	cmp	r3, #32
 800b020:	d108      	bne.n	800b034 <_ZN13STM32Hardware5flushEv+0x24>
 800b022:	4b28      	ldr	r3, [pc, #160]	; (800b0c4 <_ZN13STM32Hardware5flushEv+0xb4>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	f083 0301 	eor.w	r3, r3, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <_ZN13STM32Hardware5flushEv+0x24>
 800b030:	2301      	movs	r3, #1
 800b032:	e000      	b.n	800b036 <_ZN13STM32Hardware5flushEv+0x26>
 800b034:	2300      	movs	r3, #0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d03f      	beq.n	800b0ba <_ZN13STM32Hardware5flushEv+0xaa>
        mutex = true;
 800b03a:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <_ZN13STM32Hardware5flushEv+0xb4>)
 800b03c:	2201      	movs	r2, #1
 800b03e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d031      	beq.n	800b0b4 <_ZN13STM32Hardware5flushEv+0xa4>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d20a      	bcs.n	800b076 <_ZN13STM32Hardware5flushEv+0x66>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b066:	b29a      	uxth	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800b06e:	b29b      	uxth	r3, r3
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	b29b      	uxth	r3, r3
 800b074:	e006      	b.n	800b084 <_ZN13STM32Hardware5flushEv+0x74>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b082:	b29b      	uxth	r3, r3
 800b084:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800b090:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4413      	add	r3, r2
 800b098:	89fa      	ldrh	r2, [r7, #14]
 800b09a:	4619      	mov	r1, r3
 800b09c:	f7fa ff1e 	bl	8005edc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
 800b0a6:	89fb      	ldrh	r3, [r7, #14]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
        }
        mutex = false;
 800b0b4:	4b03      	ldr	r3, [pc, #12]	; (800b0c4 <_ZN13STM32Hardware5flushEv+0xb4>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
      }
    }
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20001645 	.word	0x20001645

0800b0c8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
      int n = length;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0de:	bfa8      	it	ge
 800b0e0:	f44f 6380 	movge.w	r3, #1024	; 0x400
 800b0e4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= int (tbuflen - twind) ? n : tbuflen - twind;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0ec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	bfa8      	it	ge
 800b0f8:	4613      	movge	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b102:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	4413      	add	r3, r2
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	68b9      	ldr	r1, [r7, #8]
 800b10e:	4618      	mov	r0, r3
 800b110:	f003 ff2e 	bl	800ef70 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	4413      	add	r3, r2
 800b11e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

      if(n != n_tail){
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d00b      	beq.n	800b148 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f503 7084 	add.w	r0, r3, #264	; 0x108
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	18d1      	adds	r1, r2, r3
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	461a      	mov	r2, r3
 800b144:	f003 ff14 	bl	800ef70 <memcpy>
      }

      flush();
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f7ff ff61 	bl	800b010 <_ZN13STM32Hardware5flushEv>
    }
 800b14e:	bf00      	nop
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return (uint32_t) xTaskGetTickCount(); }
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	f7fc fd87 	bl	8007c70 <xTaskGetTickCount>
 800b162:	4603      	mov	r3, r0
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
      data(0)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff f866 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800b17c:	4a05      	ldr	r2, [pc, #20]	; (800b194 <_ZN8std_msgs7Float32C1Ev+0x28>)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	605a      	str	r2, [r3, #4]
    {
    }
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	0800f78c 	.word	0x0800f78c

0800b198 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	b2ca      	uxtb	r2, r1
 800b1b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	0a19      	lsrs	r1, r3, #8
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	b2ca      	uxtb	r2, r1
 800b1c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	0c19      	lsrs	r1, r3, #16
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	b2ca      	uxtb	r2, r1
 800b1d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	0e19      	lsrs	r1, r3, #24
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3303      	adds	r3, #3
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	b2ca      	uxtb	r2, r1
 800b1e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	60fb      	str	r3, [r7, #12]
      return offset;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
    }
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	440a      	add	r2, r1
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	440b      	add	r3, r1
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	021b      	lsls	r3, r3, #8
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3302      	adds	r3, #2
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	440b      	add	r3, r1
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	041b      	lsls	r3, r3, #16
 800b23c:	4313      	orrs	r3, r2
 800b23e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3303      	adds	r3, #3
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	440b      	add	r3, r1
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	061b      	lsls	r3, r3, #24
 800b24e:	4313      	orrs	r3, r2
 800b250:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3304      	adds	r3, #4
 800b25c:	60fb      	str	r3, [r7, #12]
     return offset;
 800b25e:	68fb      	ldr	r3, [r7, #12]
    }
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	4b03      	ldr	r3, [pc, #12]	; (800b284 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800b276:	4618      	mov	r0, r3
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	0800f374 	.word	0x0800f374

0800b288 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	0800f388 	.word	0x0800f388

0800b2a4 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
    {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe ffca 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800b2b4:	4a03      	ldr	r2, [pc, #12]	; (800b2c4 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	601a      	str	r2, [r3, #0]
    }
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	0800f774 	.word	0x0800f774

0800b2c8 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
      return offset;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
    }
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
     return offset;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
    }
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <_ZN8std_msgs5Empty7getTypeEv>:

    const char * getType(){ return "std_msgs/Empty"; };
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	4b03      	ldr	r3, [pc, #12]	; (800b318 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	0800f3ac 	.word	0x0800f3ac

0800b31c <_ZN8std_msgs5Empty6getMD5Ev>:
    const char * getMD5(){ return "d41d8cd98f00b204e9800998ecf8427e"; };
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	4b03      	ldr	r3, [pc, #12]	; (800b334 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	0800f3bc 	.word	0x0800f3bc

0800b338 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe ff80 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800b348:	4a09      	ldr	r2, [pc, #36]	; (800b370 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	605a      	str	r2, [r3, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3308      	adds	r3, #8
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe ff64 	bl	800a226 <_ZN3ros4TimeC1Ev>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a04      	ldr	r2, [pc, #16]	; (800b374 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800b362:	611a      	str	r2, [r3, #16]
    {
    }
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	0800f75c 	.word	0x0800f75c
 800b374:	0800f2d4 	.word	0x0800f2d4

0800b378 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6859      	ldr	r1, [r3, #4]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	4413      	add	r3, r2
 800b390:	b2ca      	uxtb	r2, r1
 800b392:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	0a19      	lsrs	r1, r3, #8
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	b2ca      	uxtb	r2, r1
 800b3a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	0c19      	lsrs	r1, r3, #16
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3302      	adds	r3, #2
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	b2ca      	uxtb	r2, r1
 800b3b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	0e19      	lsrs	r1, r3, #24
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3303      	adds	r3, #3
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	b2ca      	uxtb	r2, r1
 800b3c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6899      	ldr	r1, [r3, #8]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4413      	add	r3, r2
 800b3da:	b2ca      	uxtb	r2, r1
 800b3dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	0a19      	lsrs	r1, r3, #8
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	b2ca      	uxtb	r2, r1
 800b3ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	0c19      	lsrs	r1, r3, #16
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3302      	adds	r3, #2
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	b2ca      	uxtb	r2, r1
 800b400:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	0e19      	lsrs	r1, r3, #24
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3303      	adds	r3, #3
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	4413      	add	r3, r2
 800b410:	b2ca      	uxtb	r2, r1
 800b412:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3304      	adds	r3, #4
 800b418:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68d9      	ldr	r1, [r3, #12]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	4413      	add	r3, r2
 800b424:	b2ca      	uxtb	r2, r1
 800b426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	0a19      	lsrs	r1, r3, #8
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3301      	adds	r3, #1
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4413      	add	r3, r2
 800b436:	b2ca      	uxtb	r2, r1
 800b438:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	0c19      	lsrs	r1, r3, #16
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3302      	adds	r3, #2
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	4413      	add	r3, r2
 800b448:	b2ca      	uxtb	r2, r1
 800b44a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	0e19      	lsrs	r1, r3, #24
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3303      	adds	r3, #3
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	4413      	add	r3, r2
 800b45a:	b2ca      	uxtb	r2, r1
 800b45c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3304      	adds	r3, #4
 800b462:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f4 feb1 	bl	80001d0 <strlen>
 800b46e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	4413      	add	r3, r2
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fcbd 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3304      	adds	r3, #4
 800b482:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	18d0      	adds	r0, r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	4619      	mov	r1, r3
 800b492:	f003 fd6d 	bl	800ef70 <memcpy>
      offset += length_frame_id;
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	4413      	add	r3, r2
 800b49c:	60fb      	str	r3, [r7, #12]
      return offset;
 800b49e:	68fb      	ldr	r3, [r7, #12]
    }
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	440b      	add	r3, r1
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	021b      	lsls	r3, r3, #8
 800b4d4:	431a      	orrs	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	440b      	add	r3, r1
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	041b      	lsls	r3, r3, #16
 800b4ea:	431a      	orrs	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	3303      	adds	r3, #3
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	440b      	add	r3, r1
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	061b      	lsls	r3, r3, #24
 800b500:	431a      	orrs	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	3304      	adds	r3, #4
 800b50a:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	4413      	add	r3, r2
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	461a      	mov	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	3301      	adds	r3, #1
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	440b      	add	r3, r1
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689a      	ldr	r2, [r3, #8]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3302      	adds	r3, #2
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	440b      	add	r3, r1
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	041b      	lsls	r3, r3, #16
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689a      	ldr	r2, [r3, #8]
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3303      	adds	r3, #3
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	440b      	add	r3, r1
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	061b      	lsls	r3, r3, #24
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	3304      	adds	r3, #4
 800b560:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	4413      	add	r3, r2
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	3301      	adds	r3, #1
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	440b      	add	r3, r1
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	021b      	lsls	r3, r3, #8
 800b580:	431a      	orrs	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68da      	ldr	r2, [r3, #12]
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	3302      	adds	r3, #2
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	440b      	add	r3, r1
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	041b      	lsls	r3, r3, #16
 800b596:	431a      	orrs	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	3303      	adds	r3, #3
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	440b      	add	r3, r1
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	061b      	lsls	r3, r3, #24
 800b5ac:	431a      	orrs	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	441a      	add	r2, r3
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f002 fc35 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	617b      	str	r3, [r7, #20]
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	4413      	add	r3, r2
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d20c      	bcs.n	800b5fa <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	441a      	add	r2, r3
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	440b      	add	r3, r1
 800b5ee:	7812      	ldrb	r2, [r2, #0]
 800b5f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	617b      	str	r3, [r7, #20]
 800b5f8:	e7ec      	b.n	800b5d4 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	3b01      	subs	r3, #1
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	4413      	add	r3, r2
 800b606:	2200      	movs	r2, #0
 800b608:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	441a      	add	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	613b      	str	r3, [r7, #16]
     return offset;
 800b61e:	693b      	ldr	r3, [r7, #16]
    }
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	0800f3e0 	.word	0x0800f3e0

0800b644 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	0800f3f0 	.word	0x0800f3f0

0800b660 <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fdec 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800b670:	4a12      	ldr	r2, [pc, #72]	; (800b6bc <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3304      	adds	r3, #4
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff fe5c 	bl	800b338 <_ZN8std_msgs6HeaderC1Ev>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	619a      	str	r2, [r3, #24]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	621a      	str	r2, [r3, #32]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	625a      	str	r2, [r3, #36]	; 0x24
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	631a      	str	r2, [r3, #48]	; 0x30
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	635a      	str	r2, [r3, #52]	; 0x34
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	641a      	str	r2, [r3, #64]	; 0x40
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	645a      	str	r2, [r3, #68]	; 0x44
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	0800f744 	.word	0x0800f744

0800b6c0 <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	; 0x38
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	1d18      	adds	r0, r3, #4
 800b6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	f7ff fe4d 	bl	800b378 <_ZNK8std_msgs6Header9serializeEPh>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e2:	4413      	add	r3, r2
 800b6e4:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6999      	ldr	r1, [r3, #24]
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	b2ca      	uxtb	r2, r1
 800b6f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	0a19      	lsrs	r1, r3, #8
 800b6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	4413      	add	r3, r2
 800b702:	b2ca      	uxtb	r2, r1
 800b704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	0c19      	lsrs	r1, r3, #16
 800b70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70e:	3302      	adds	r3, #2
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	4413      	add	r3, r2
 800b714:	b2ca      	uxtb	r2, r1
 800b716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	0e19      	lsrs	r1, r3, #24
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	3303      	adds	r3, #3
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4413      	add	r3, r2
 800b726:	b2ca      	uxtb	r2, r1
 800b728:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72c:	3304      	adds	r3, #4
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 800b730:	2300      	movs	r3, #0
 800b732:	633b      	str	r3, [r7, #48]	; 0x30
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d228      	bcs.n	800b790 <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a1a      	ldr	r2, [r3, #32]
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7f4 fd40 	bl	80001d0 <strlen>
 800b750:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	4413      	add	r3, r2
 800b758:	6a39      	ldr	r1, [r7, #32]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f002 fb4c 	bl	800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b762:	3304      	adds	r3, #4
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 800b766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	18d0      	adds	r0, r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a1a      	ldr	r2, [r3, #32]
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6a3a      	ldr	r2, [r7, #32]
 800b77a:	4619      	mov	r1, r3
 800b77c:	f003 fbf8 	bl	800ef70 <memcpy>
      offset += length_namei;
 800b780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	4413      	add	r3, r2
 800b786:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78a:	3301      	adds	r3, #1
 800b78c:	633b      	str	r3, [r7, #48]	; 0x30
 800b78e:	e7d1      	b.n	800b734 <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4413      	add	r3, r2
 800b79a:	b2ca      	uxtb	r2, r1
 800b79c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	0a19      	lsrs	r1, r3, #8
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	b2ca      	uxtb	r2, r1
 800b7ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b4:	0c19      	lsrs	r1, r3, #16
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b8:	3302      	adds	r3, #2
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	4413      	add	r3, r2
 800b7be:	b2ca      	uxtb	r2, r1
 800b7c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	0e19      	lsrs	r1, r3, #24
 800b7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ca:	3303      	adds	r3, #3
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	b2ca      	uxtb	r2, r1
 800b7d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 800b7da:	2300      	movs	r3, #0
 800b7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d27e      	bcs.n	800b8e6 <_ZNK11sensor_msgs10JointState9serializeEPh+0x226>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4413      	add	r3, r2
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 800b7fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b800:	6838      	ldr	r0, [r7, #0]
 800b802:	4401      	add	r1, r0
 800b804:	b2d3      	uxtb	r3, r2
 800b806:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 800b808:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b80c:	f04f 0200 	mov.w	r2, #0
 800b810:	f04f 0300 	mov.w	r3, #0
 800b814:	0a02      	lsrs	r2, r0, #8
 800b816:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b81a:	0a0b      	lsrs	r3, r1, #8
 800b81c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b81e:	3101      	adds	r1, #1
 800b820:	6838      	ldr	r0, [r7, #0]
 800b822:	4401      	add	r1, r0
 800b824:	b2d3      	uxtb	r3, r2
 800b826:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 800b828:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b82c:	f04f 0200 	mov.w	r2, #0
 800b830:	f04f 0300 	mov.w	r3, #0
 800b834:	0c02      	lsrs	r2, r0, #16
 800b836:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b83a:	0c0b      	lsrs	r3, r1, #16
 800b83c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b83e:	3102      	adds	r1, #2
 800b840:	6838      	ldr	r0, [r7, #0]
 800b842:	4401      	add	r1, r0
 800b844:	b2d3      	uxtb	r3, r2
 800b846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 800b848:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b84c:	f04f 0200 	mov.w	r2, #0
 800b850:	f04f 0300 	mov.w	r3, #0
 800b854:	0e02      	lsrs	r2, r0, #24
 800b856:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b85a:	0e0b      	lsrs	r3, r1, #24
 800b85c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b85e:	3103      	adds	r1, #3
 800b860:	6838      	ldr	r0, [r7, #0]
 800b862:	4401      	add	r1, r0
 800b864:	b2d3      	uxtb	r3, r2
 800b866:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 800b868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b86c:	f04f 0200 	mov.w	r2, #0
 800b870:	f04f 0300 	mov.w	r3, #0
 800b874:	000a      	movs	r2, r1
 800b876:	2300      	movs	r3, #0
 800b878:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b87a:	3104      	adds	r1, #4
 800b87c:	6838      	ldr	r0, [r7, #0]
 800b87e:	4401      	add	r1, r0
 800b880:	b2d3      	uxtb	r3, r2
 800b882:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 800b884:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b888:	f04f 0200 	mov.w	r2, #0
 800b88c:	f04f 0300 	mov.w	r3, #0
 800b890:	0a0a      	lsrs	r2, r1, #8
 800b892:	2300      	movs	r3, #0
 800b894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b896:	3105      	adds	r1, #5
 800b898:	6838      	ldr	r0, [r7, #0]
 800b89a:	4401      	add	r1, r0
 800b89c:	b2d3      	uxtb	r3, r2
 800b89e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 800b8a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8a4:	f04f 0200 	mov.w	r2, #0
 800b8a8:	f04f 0300 	mov.w	r3, #0
 800b8ac:	0c0a      	lsrs	r2, r1, #16
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8b2:	3106      	adds	r1, #6
 800b8b4:	6838      	ldr	r0, [r7, #0]
 800b8b6:	4401      	add	r1, r0
 800b8b8:	b2d3      	uxtb	r3, r2
 800b8ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 800b8bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8c0:	f04f 0200 	mov.w	r2, #0
 800b8c4:	f04f 0300 	mov.w	r3, #0
 800b8c8:	0e0a      	lsrs	r2, r1, #24
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8ce:	3107      	adds	r1, #7
 800b8d0:	6838      	ldr	r0, [r7, #0]
 800b8d2:	4401      	add	r1, r0
 800b8d4:	b2d3      	uxtb	r3, r2
 800b8d6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->position[i]);
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8da:	3308      	adds	r3, #8
 800b8dc:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8e4:	e77b      	b.n	800b7de <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	b2ca      	uxtb	r2, r1
 800b8f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f8:	0a19      	lsrs	r1, r3, #8
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4413      	add	r3, r2
 800b902:	b2ca      	uxtb	r2, r1
 800b904:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90a:	0c19      	lsrs	r1, r3, #16
 800b90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90e:	3302      	adds	r3, #2
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	4413      	add	r3, r2
 800b914:	b2ca      	uxtb	r2, r1
 800b916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91c:	0e19      	lsrs	r1, r3, #24
 800b91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b920:	3303      	adds	r3, #3
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	4413      	add	r3, r2
 800b926:	b2ca      	uxtb	r2, r1
 800b928:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 800b92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92c:	3304      	adds	r3, #4
 800b92e:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800b930:	2300      	movs	r3, #0
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d27e      	bcs.n	800ba3c <_ZNK11sensor_msgs10JointState9serializeEPh+0x37c>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4413      	add	r3, r2
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 800b950:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b954:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b956:	6838      	ldr	r0, [r7, #0]
 800b958:	4401      	add	r1, r0
 800b95a:	b2d3      	uxtb	r3, r2
 800b95c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 800b95e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b962:	f04f 0200 	mov.w	r2, #0
 800b966:	f04f 0300 	mov.w	r3, #0
 800b96a:	0a02      	lsrs	r2, r0, #8
 800b96c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b970:	0a0b      	lsrs	r3, r1, #8
 800b972:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b974:	3101      	adds	r1, #1
 800b976:	6838      	ldr	r0, [r7, #0]
 800b978:	4401      	add	r1, r0
 800b97a:	b2d3      	uxtb	r3, r2
 800b97c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 800b97e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	f04f 0300 	mov.w	r3, #0
 800b98a:	0c02      	lsrs	r2, r0, #16
 800b98c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b990:	0c0b      	lsrs	r3, r1, #16
 800b992:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b994:	3102      	adds	r1, #2
 800b996:	6838      	ldr	r0, [r7, #0]
 800b998:	4401      	add	r1, r0
 800b99a:	b2d3      	uxtb	r3, r2
 800b99c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 800b99e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9a2:	f04f 0200 	mov.w	r2, #0
 800b9a6:	f04f 0300 	mov.w	r3, #0
 800b9aa:	0e02      	lsrs	r2, r0, #24
 800b9ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b9b0:	0e0b      	lsrs	r3, r1, #24
 800b9b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9b4:	3103      	adds	r1, #3
 800b9b6:	6838      	ldr	r0, [r7, #0]
 800b9b8:	4401      	add	r1, r0
 800b9ba:	b2d3      	uxtb	r3, r2
 800b9bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 800b9be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9c2:	f04f 0200 	mov.w	r2, #0
 800b9c6:	f04f 0300 	mov.w	r3, #0
 800b9ca:	000a      	movs	r2, r1
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9d0:	3104      	adds	r1, #4
 800b9d2:	6838      	ldr	r0, [r7, #0]
 800b9d4:	4401      	add	r1, r0
 800b9d6:	b2d3      	uxtb	r3, r2
 800b9d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 800b9da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9de:	f04f 0200 	mov.w	r2, #0
 800b9e2:	f04f 0300 	mov.w	r3, #0
 800b9e6:	0a0a      	lsrs	r2, r1, #8
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9ec:	3105      	adds	r1, #5
 800b9ee:	6838      	ldr	r0, [r7, #0]
 800b9f0:	4401      	add	r1, r0
 800b9f2:	b2d3      	uxtb	r3, r2
 800b9f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 800b9f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9fa:	f04f 0200 	mov.w	r2, #0
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	0c0a      	lsrs	r2, r1, #16
 800ba04:	2300      	movs	r3, #0
 800ba06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba08:	3106      	adds	r1, #6
 800ba0a:	6838      	ldr	r0, [r7, #0]
 800ba0c:	4401      	add	r1, r0
 800ba0e:	b2d3      	uxtb	r3, r2
 800ba10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 800ba12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ba16:	f04f 0200 	mov.w	r2, #0
 800ba1a:	f04f 0300 	mov.w	r3, #0
 800ba1e:	0e0a      	lsrs	r2, r1, #24
 800ba20:	2300      	movs	r3, #0
 800ba22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba24:	3107      	adds	r1, #7
 800ba26:	6838      	ldr	r0, [r7, #0]
 800ba28:	4401      	add	r1, r0
 800ba2a:	b2d3      	uxtb	r3, r2
 800ba2c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->velocity[i]);
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	3308      	adds	r3, #8
 800ba32:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	3301      	adds	r3, #1
 800ba38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba3a:	e77b      	b.n	800b934 <_ZNK11sensor_msgs10JointState9serializeEPh+0x274>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800ba40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	4413      	add	r3, r2
 800ba46:	b2ca      	uxtb	r2, r1
 800ba48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4e:	0a19      	lsrs	r1, r3, #8
 800ba50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba52:	3301      	adds	r3, #1
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	4413      	add	r3, r2
 800ba58:	b2ca      	uxtb	r2, r1
 800ba5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba60:	0c19      	lsrs	r1, r3, #16
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	3302      	adds	r3, #2
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4413      	add	r3, r2
 800ba6a:	b2ca      	uxtb	r2, r1
 800ba6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba72:	0e19      	lsrs	r1, r3, #24
 800ba74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba76:	3303      	adds	r3, #3
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	b2ca      	uxtb	r2, r1
 800ba7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 800ba80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba82:	3304      	adds	r3, #4
 800ba84:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 800ba86:	2300      	movs	r3, #0
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d27e      	bcs.n	800bb92 <_ZNK11sensor_msgs10JointState9serializeEPh+0x4d2>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	4413      	add	r3, r2
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 800baa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800baaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800baac:	6838      	ldr	r0, [r7, #0]
 800baae:	4401      	add	r1, r0
 800bab0:	b2d3      	uxtb	r3, r2
 800bab2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 800bab4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bab8:	f04f 0200 	mov.w	r2, #0
 800babc:	f04f 0300 	mov.w	r3, #0
 800bac0:	0a02      	lsrs	r2, r0, #8
 800bac2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bac6:	0a0b      	lsrs	r3, r1, #8
 800bac8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800baca:	3101      	adds	r1, #1
 800bacc:	6838      	ldr	r0, [r7, #0]
 800bace:	4401      	add	r1, r0
 800bad0:	b2d3      	uxtb	r3, r2
 800bad2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 800bad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bad8:	f04f 0200 	mov.w	r2, #0
 800badc:	f04f 0300 	mov.w	r3, #0
 800bae0:	0c02      	lsrs	r2, r0, #16
 800bae2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bae6:	0c0b      	lsrs	r3, r1, #16
 800bae8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800baea:	3102      	adds	r1, #2
 800baec:	6838      	ldr	r0, [r7, #0]
 800baee:	4401      	add	r1, r0
 800baf0:	b2d3      	uxtb	r3, r2
 800baf2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 800baf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800baf8:	f04f 0200 	mov.w	r2, #0
 800bafc:	f04f 0300 	mov.w	r3, #0
 800bb00:	0e02      	lsrs	r2, r0, #24
 800bb02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bb06:	0e0b      	lsrs	r3, r1, #24
 800bb08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb0a:	3103      	adds	r1, #3
 800bb0c:	6838      	ldr	r0, [r7, #0]
 800bb0e:	4401      	add	r1, r0
 800bb10:	b2d3      	uxtb	r3, r2
 800bb12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 800bb14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb18:	f04f 0200 	mov.w	r2, #0
 800bb1c:	f04f 0300 	mov.w	r3, #0
 800bb20:	000a      	movs	r2, r1
 800bb22:	2300      	movs	r3, #0
 800bb24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb26:	3104      	adds	r1, #4
 800bb28:	6838      	ldr	r0, [r7, #0]
 800bb2a:	4401      	add	r1, r0
 800bb2c:	b2d3      	uxtb	r3, r2
 800bb2e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 800bb30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb34:	f04f 0200 	mov.w	r2, #0
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	0a0a      	lsrs	r2, r1, #8
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb42:	3105      	adds	r1, #5
 800bb44:	6838      	ldr	r0, [r7, #0]
 800bb46:	4401      	add	r1, r0
 800bb48:	b2d3      	uxtb	r3, r2
 800bb4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 800bb4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	f04f 0300 	mov.w	r3, #0
 800bb58:	0c0a      	lsrs	r2, r1, #16
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb5e:	3106      	adds	r1, #6
 800bb60:	6838      	ldr	r0, [r7, #0]
 800bb62:	4401      	add	r1, r0
 800bb64:	b2d3      	uxtb	r3, r2
 800bb66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 800bb68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb6c:	f04f 0200 	mov.w	r2, #0
 800bb70:	f04f 0300 	mov.w	r3, #0
 800bb74:	0e0a      	lsrs	r2, r1, #24
 800bb76:	2300      	movs	r3, #0
 800bb78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb7a:	3107      	adds	r1, #7
 800bb7c:	6838      	ldr	r0, [r7, #0]
 800bb7e:	4401      	add	r1, r0
 800bb80:	b2d3      	uxtb	r3, r2
 800bb82:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->effort[i]);
 800bb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb86:	3308      	adds	r3, #8
 800bb88:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb90:	e77b      	b.n	800ba8a <_ZNK11sensor_msgs10JointState9serializeEPh+0x3ca>
      }
      return offset;
 800bb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800bb94:	4618      	mov	r0, r3
 800bb96:	3738      	adds	r7, #56	; 0x38
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800bb9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bba0:	b0c6      	sub	sp, #280	; 0x118
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800bba8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      offset += this->header.deserialize(inbuffer + offset);
 800bbb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bbb6:	1d18      	adds	r0, r3, #4
 800bbb8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bbbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbc0:	4413      	add	r3, r2
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	f7ff fc70 	bl	800b4a8 <_ZN8std_msgs6Header11deserializeEPh>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbce:	4413      	add	r3, r2
 800bbd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800bbd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bbd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbdc:	4413      	add	r3, r2
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800bbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbee:	4413      	add	r3, r2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	021a      	lsls	r2, r3, #8
 800bbf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800bbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc02:	1c9a      	adds	r2, r3, #2
 800bc04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc08:	4413      	add	r3, r2
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	041a      	lsls	r2, r3, #16
 800bc0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc12:	4313      	orrs	r3, r2
 800bc14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800bc18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1c:	1cda      	adds	r2, r3, #3
 800bc1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc22:	4413      	add	r3, r2
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	061a      	lsls	r2, r3, #24
 800bc28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      offset += sizeof(this->name_length);
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	3304      	adds	r3, #4
 800bc38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(name_lengthT > name_length)
 800bc3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc40:	699a      	ldr	r2, [r3, #24]
 800bc42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d90d      	bls.n	800bc66 <_ZN11sensor_msgs10JointState11deserializeEPh+0xca>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 800bc4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc4e:	6a1a      	ldr	r2, [r3, #32]
 800bc50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f003 fa49 	bl	800f0f0 <realloc>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc64:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 800bc66:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bc6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc6e:	6193      	str	r3, [r2, #24]
      for( uint32_t i = 0; i < name_length; i++){
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bc76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc7a:	699a      	ldr	r2, [r3, #24]
 800bc7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d25c      	bcs.n	800bd3e <_ZN11sensor_msgs10JointState11deserializeEPh+0x1a2>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 800bc84:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bc88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc8c:	441a      	add	r2, r3
 800bc8e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bc92:	4611      	mov	r1, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f002 f8cd 	bl	800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800bc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9e:	3304      	adds	r3, #4
 800bca0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 800bca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bcac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bcb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcb4:	441a      	add	r2, r3
 800bcb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d212      	bcs.n	800bce4 <_ZN11sensor_msgs10JointState11deserializeEPh+0x148>
          inbuffer[k-1]=inbuffer[k];
 800bcbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bcc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcc6:	18d1      	adds	r1, r2, r3
 800bcc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bccc:	1e5a      	subs	r2, r3, #1
 800bcce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcd2:	441a      	add	r2, r3
 800bcd4:	780b      	ldrb	r3, [r1, #0]
 800bcd6:	7013      	strb	r3, [r2, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 800bcd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcdc:	3301      	adds	r3, #1
 800bcde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bce2:	e7e3      	b.n	800bcac <_ZN11sensor_msgs10JointState11deserializeEPh+0x110>
      }
      inbuffer[offset+length_st_name-1]=0;
 800bce4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bce8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcec:	4413      	add	r3, r2
 800bcee:	1e5a      	subs	r2, r3, #1
 800bcf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bcf4:	441a      	add	r2, r3
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	7013      	strb	r3, [r2, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 800bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfe:	1e5a      	subs	r2, r3, #1
 800bd00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd04:	441a      	add	r2, r3
 800bd06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bd0a:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 800bd0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bd10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bd14:	4413      	add	r3, r2
 800bd16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 800bd1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bd1e:	6a1a      	ldr	r2, [r3, #32]
 800bd20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	441a      	add	r2, r3
 800bd28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bd2c:	331c      	adds	r3, #28
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6013      	str	r3, [r2, #0]
      for( uint32_t i = 0; i < name_length; i++){
 800bd32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bd36:	3301      	adds	r3, #1
 800bd38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bd3c:	e79b      	b.n	800bc76 <_ZN11sensor_msgs10JointState11deserializeEPh+0xda>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800bd3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bd42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd46:	4413      	add	r3, r2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd58:	4413      	add	r3, r2
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	021a      	lsls	r2, r3, #8
 800bd5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd62:	4313      	orrs	r3, r2
 800bd64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800bd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6c:	1c9a      	adds	r2, r3, #2
 800bd6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd72:	4413      	add	r3, r2
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	041a      	lsls	r2, r3, #16
 800bd78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800bd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd86:	1cda      	adds	r2, r3, #3
 800bd88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd8c:	4413      	add	r3, r2
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	061a      	lsls	r2, r3, #24
 800bd92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd96:	4313      	orrs	r3, r2
 800bd98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      offset += sizeof(this->position_length);
 800bd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda0:	3304      	adds	r3, #4
 800bda2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(position_lengthT > position_length)
 800bda6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bdaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d90d      	bls.n	800bdd0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x234>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 800bdb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bdb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	f003 f994 	bl	800f0f0 <realloc>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bdce:	631a      	str	r2, [r3, #48]	; 0x30
      position_length = position_lengthT;
 800bdd0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bdd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdd8:	6253      	str	r3, [r2, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 800bdda:	2300      	movs	r3, #0
 800bddc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bde0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bde4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bde6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bdea:	4293      	cmp	r3, r2
 800bdec:	f080 810f 	bcs.w	800c00e <_ZN11sensor_msgs10JointState11deserializeEPh+0x472>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	f04f 0300 	mov.w	r3, #0
 800bdf8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800bdfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be00:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800be04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be08:	4413      	add	r3, r2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	f04f 0300 	mov.w	r3, #0
 800be12:	ea40 0402 	orr.w	r4, r0, r2
 800be16:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800be1a:	430b      	orrs	r3, r1
 800be1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be20:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800be24:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800be28:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800be2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be36:	4413      	add	r3, r2
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	f04f 0300 	mov.w	r3, #0
 800be40:	f04f 0000 	mov.w	r0, #0
 800be44:	f04f 0100 	mov.w	r1, #0
 800be48:	0219      	lsls	r1, r3, #8
 800be4a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800be4e:	0210      	lsls	r0, r2, #8
 800be50:	ea44 0300 	orr.w	r3, r4, r0
 800be54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be58:	ea45 0301 	orr.w	r3, r5, r1
 800be5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be60:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800be64:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800be68:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be70:	1c9a      	adds	r2, r3, #2
 800be72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be76:	4413      	add	r3, r2
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	f04f 0300 	mov.w	r3, #0
 800be80:	f04f 0000 	mov.w	r0, #0
 800be84:	f04f 0100 	mov.w	r1, #0
 800be88:	0419      	lsls	r1, r3, #16
 800be8a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800be8e:	0410      	lsls	r0, r2, #16
 800be90:	ea44 0300 	orr.w	r3, r4, r0
 800be94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be98:	ea45 0301 	orr.w	r3, r5, r1
 800be9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bea0:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800bea4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800bea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800beac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb0:	1cda      	adds	r2, r3, #3
 800beb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800beb6:	4413      	add	r3, r2
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	f04f 0300 	mov.w	r3, #0
 800bec0:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800bec4:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800bec8:	ea40 0308 	orr.w	r3, r0, r8
 800becc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bed0:	ea41 0309 	orr.w	r3, r1, r9
 800bed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bed8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800bedc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800bee0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800bee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee8:	1d1a      	adds	r2, r3, #4
 800beea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800beee:	4413      	add	r3, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	f04f 0300 	mov.w	r3, #0
 800bef8:	f04f 0000 	mov.w	r0, #0
 800befc:	f04f 0100 	mov.w	r1, #0
 800bf00:	0011      	movs	r1, r2
 800bf02:	2000      	movs	r0, #0
 800bf04:	ea44 0300 	orr.w	r3, r4, r0
 800bf08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf0c:	ea45 0301 	orr.w	r3, r5, r1
 800bf10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf14:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800bf18:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800bf1c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800bf20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf24:	1d5a      	adds	r2, r3, #5
 800bf26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf2a:	4413      	add	r3, r2
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	f04f 0300 	mov.w	r3, #0
 800bf34:	f04f 0000 	mov.w	r0, #0
 800bf38:	f04f 0100 	mov.w	r1, #0
 800bf3c:	0211      	lsls	r1, r2, #8
 800bf3e:	2000      	movs	r0, #0
 800bf40:	ea44 0300 	orr.w	r3, r4, r0
 800bf44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf48:	ea45 0301 	orr.w	r3, r5, r1
 800bf4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf50:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800bf54:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800bf58:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800bf5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf60:	1d9a      	adds	r2, r3, #6
 800bf62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	f04f 0300 	mov.w	r3, #0
 800bf70:	f04f 0000 	mov.w	r0, #0
 800bf74:	f04f 0100 	mov.w	r1, #0
 800bf78:	0411      	lsls	r1, r2, #16
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	ea44 0300 	orr.w	r3, r4, r0
 800bf80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf84:	ea45 0301 	orr.w	r3, r5, r1
 800bf88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf8c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800bf90:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800bf94:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800bf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9c:	1dda      	adds	r2, r3, #7
 800bf9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfa2:	4413      	add	r3, r2
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	f04f 0000 	mov.w	r0, #0
 800bfb0:	f04f 0100 	mov.w	r1, #0
 800bfb4:	0611      	lsls	r1, r2, #24
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	ea44 0300 	orr.w	r3, r4, r0
 800bfbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfc0:	ea45 0301 	orr.w	r3, r5, r1
 800bfc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bfc8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800bfcc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      this->st_position = u_st_position.real;
 800bfd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bfd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfd8:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
      offset += sizeof(this->st_position);
 800bfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 800bfe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	18d0      	adds	r0, r2, r3
 800bff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bff8:	3328      	adds	r3, #40	; 0x28
 800bffa:	2208      	movs	r2, #8
 800bffc:	4619      	mov	r1, r3
 800bffe:	f002 ffb7 	bl	800ef70 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 800c002:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c006:	3301      	adds	r3, #1
 800c008:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c00c:	e6e8      	b.n	800bde0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x244>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800c00e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c016:	4413      	add	r3, r2
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800c01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c028:	4413      	add	r3, r2
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	021a      	lsls	r2, r3, #8
 800c02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c032:	4313      	orrs	r3, r2
 800c034:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800c038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c03c:	1c9a      	adds	r2, r3, #2
 800c03e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c042:	4413      	add	r3, r2
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	041a      	lsls	r2, r3, #16
 800c048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c04c:	4313      	orrs	r3, r2
 800c04e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800c052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c056:	1cda      	adds	r2, r3, #3
 800c058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c05c:	4413      	add	r3, r2
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	061a      	lsls	r2, r3, #24
 800c062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c066:	4313      	orrs	r3, r2
 800c068:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += sizeof(this->velocity_length);
 800c06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c070:	3304      	adds	r3, #4
 800c072:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(velocity_lengthT > velocity_length)
 800c076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c07a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c07c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c080:	4293      	cmp	r3, r2
 800c082:	d90d      	bls.n	800c0a0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x504>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 800c084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	4619      	mov	r1, r3
 800c092:	4610      	mov	r0, r2
 800c094:	f003 f82c 	bl	800f0f0 <realloc>
 800c098:	4602      	mov	r2, r0
 800c09a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c09e:	641a      	str	r2, [r3, #64]	; 0x40
      velocity_length = velocity_lengthT;
 800c0a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	6353      	str	r3, [r2, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c0b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	f080 8101 	bcs.w	800c2c2 <_ZN11sensor_msgs10JointState11deserializeEPh+0x726>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 800c0c0:	f04f 0200 	mov.w	r2, #0
 800c0c4:	f04f 0300 	mov.w	r3, #0
 800c0c8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800c0cc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c0d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c0d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0d8:	4413      	add	r3, r2
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	f04f 0300 	mov.w	r3, #0
 800c0e2:	ea40 0402 	orr.w	r4, r0, r2
 800c0e6:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800c0ea:	430b      	orrs	r3, r1
 800c0ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0f0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c0f4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800c0f8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c100:	1c5a      	adds	r2, r3, #1
 800c102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c106:	4413      	add	r3, r2
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	f04f 0300 	mov.w	r3, #0
 800c110:	f04f 0000 	mov.w	r0, #0
 800c114:	f04f 0100 	mov.w	r1, #0
 800c118:	0219      	lsls	r1, r3, #8
 800c11a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c11e:	0210      	lsls	r0, r2, #8
 800c120:	ea44 0300 	orr.w	r3, r4, r0
 800c124:	67bb      	str	r3, [r7, #120]	; 0x78
 800c126:	ea45 0301 	orr.w	r3, r5, r1
 800c12a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c12c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c130:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800c134:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13c:	1c9a      	adds	r2, r3, #2
 800c13e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c142:	4413      	add	r3, r2
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b2da      	uxtb	r2, r3
 800c148:	f04f 0300 	mov.w	r3, #0
 800c14c:	f04f 0000 	mov.w	r0, #0
 800c150:	f04f 0100 	mov.w	r1, #0
 800c154:	0419      	lsls	r1, r3, #16
 800c156:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800c15a:	0410      	lsls	r0, r2, #16
 800c15c:	ea44 0300 	orr.w	r3, r4, r0
 800c160:	673b      	str	r3, [r7, #112]	; 0x70
 800c162:	ea45 0301 	orr.w	r3, r5, r1
 800c166:	677b      	str	r3, [r7, #116]	; 0x74
 800c168:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c16c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800c170:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c178:	1cda      	adds	r2, r3, #3
 800c17a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c17e:	4413      	add	r3, r2
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	b2da      	uxtb	r2, r3
 800c184:	f04f 0300 	mov.w	r3, #0
 800c188:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 800c18c:	ea4f 6a02 	mov.w	sl, r2, lsl #24
 800c190:	ea40 030a 	orr.w	r3, r0, sl
 800c194:	66bb      	str	r3, [r7, #104]	; 0x68
 800c196:	ea41 030b 	orr.w	r3, r1, fp
 800c19a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c19c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800c1a0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800c1a4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ac:	1d1a      	adds	r2, r3, #4
 800c1ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1b2:	4413      	add	r3, r2
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	f04f 0300 	mov.w	r3, #0
 800c1bc:	f04f 0000 	mov.w	r0, #0
 800c1c0:	f04f 0100 	mov.w	r1, #0
 800c1c4:	0011      	movs	r1, r2
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	ea44 0300 	orr.w	r3, r4, r0
 800c1cc:	663b      	str	r3, [r7, #96]	; 0x60
 800c1ce:	ea45 0301 	orr.w	r3, r5, r1
 800c1d2:	667b      	str	r3, [r7, #100]	; 0x64
 800c1d4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c1d8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800c1dc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1e4:	1d5a      	adds	r2, r3, #5
 800c1e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1ea:	4413      	add	r3, r2
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	f04f 0300 	mov.w	r3, #0
 800c1f4:	f04f 0000 	mov.w	r0, #0
 800c1f8:	f04f 0100 	mov.w	r1, #0
 800c1fc:	0211      	lsls	r1, r2, #8
 800c1fe:	2000      	movs	r0, #0
 800c200:	ea44 0300 	orr.w	r3, r4, r0
 800c204:	65bb      	str	r3, [r7, #88]	; 0x58
 800c206:	ea45 0301 	orr.w	r3, r5, r1
 800c20a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c20c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c210:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800c214:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21c:	1d9a      	adds	r2, r3, #6
 800c21e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c222:	4413      	add	r3, r2
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	b2da      	uxtb	r2, r3
 800c228:	f04f 0300 	mov.w	r3, #0
 800c22c:	f04f 0000 	mov.w	r0, #0
 800c230:	f04f 0100 	mov.w	r1, #0
 800c234:	0411      	lsls	r1, r2, #16
 800c236:	2000      	movs	r0, #0
 800c238:	ea44 0300 	orr.w	r3, r4, r0
 800c23c:	653b      	str	r3, [r7, #80]	; 0x50
 800c23e:	ea45 0301 	orr.w	r3, r5, r1
 800c242:	657b      	str	r3, [r7, #84]	; 0x54
 800c244:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c248:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800c24c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c254:	1dda      	adds	r2, r3, #7
 800c256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c25a:	4413      	add	r3, r2
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	f04f 0300 	mov.w	r3, #0
 800c264:	f04f 0000 	mov.w	r0, #0
 800c268:	f04f 0100 	mov.w	r1, #0
 800c26c:	0611      	lsls	r1, r2, #24
 800c26e:	2000      	movs	r0, #0
 800c270:	ea44 0300 	orr.w	r3, r4, r0
 800c274:	64bb      	str	r3, [r7, #72]	; 0x48
 800c276:	ea45 0301 	orr.w	r3, r5, r1
 800c27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c27c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c280:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->st_velocity = u_st_velocity.real;
 800c284:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c28c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
      offset += sizeof(this->st_velocity);
 800c290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c294:	3308      	adds	r3, #8
 800c296:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 800c29a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c29e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a4:	00db      	lsls	r3, r3, #3
 800c2a6:	18d0      	adds	r0, r2, r3
 800c2a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c2ac:	3338      	adds	r3, #56	; 0x38
 800c2ae:	2208      	movs	r2, #8
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f002 fe5d 	bl	800ef70 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 800c2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c2c0:	e6f6      	b.n	800c0b0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x514>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800c2c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c2c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2ca:	4413      	add	r3, r2
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800c2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2dc:	4413      	add	r3, r2
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	021a      	lsls	r2, r3, #8
 800c2e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800c2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f0:	1c9a      	adds	r2, r3, #2
 800c2f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2f6:	4413      	add	r3, r2
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	041a      	lsls	r2, r3, #16
 800c2fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c300:	4313      	orrs	r3, r2
 800c302:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800c306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30a:	1cda      	adds	r2, r3, #3
 800c30c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c310:	4413      	add	r3, r2
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	061a      	lsls	r2, r3, #24
 800c316:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c31a:	4313      	orrs	r3, r2
 800c31c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      offset += sizeof(this->effort_length);
 800c320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c324:	3304      	adds	r3, #4
 800c326:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      if(effort_lengthT > effort_length)
 800c32a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c32e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c330:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c334:	4293      	cmp	r3, r2
 800c336:	d90d      	bls.n	800c354 <_ZN11sensor_msgs10JointState11deserializeEPh+0x7b8>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 800c338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c33c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c33e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f002 fed2 	bl	800f0f0 <realloc>
 800c34c:	4602      	mov	r2, r0
 800c34e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c352:	651a      	str	r2, [r3, #80]	; 0x50
      effort_length = effort_lengthT;
 800c354:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c358:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c35c:	6453      	str	r3, [r2, #68]	; 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 800c35e:	2300      	movs	r3, #0
 800c360:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c36a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c36e:	4293      	cmp	r3, r2
 800c370:	f080 8101 	bcs.w	800c576 <_ZN11sensor_msgs10JointState11deserializeEPh+0x9da>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 800c374:	f04f 0200 	mov.w	r2, #0
 800c378:	f04f 0300 	mov.w	r3, #0
 800c37c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800c380:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c384:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c38c:	4413      	add	r3, r2
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	b2da      	uxtb	r2, r3
 800c392:	f04f 0300 	mov.w	r3, #0
 800c396:	ea40 0402 	orr.w	r4, r0, r2
 800c39a:	643c      	str	r4, [r7, #64]	; 0x40
 800c39c:	430b      	orrs	r3, r1
 800c39e:	647b      	str	r3, [r7, #68]	; 0x44
 800c3a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c3a4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800c3a8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800c3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3b6:	4413      	add	r3, r2
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	f04f 0300 	mov.w	r3, #0
 800c3c0:	f04f 0000 	mov.w	r0, #0
 800c3c4:	f04f 0100 	mov.w	r1, #0
 800c3c8:	0219      	lsls	r1, r3, #8
 800c3ca:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c3ce:	0210      	lsls	r0, r2, #8
 800c3d0:	ea44 0300 	orr.w	r3, r4, r0
 800c3d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3d6:	ea45 0301 	orr.w	r3, r5, r1
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c3e0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800c3e4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800c3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ec:	1c9a      	adds	r2, r3, #2
 800c3ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3f2:	4413      	add	r3, r2
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	b2da      	uxtb	r2, r3
 800c3f8:	f04f 0300 	mov.w	r3, #0
 800c3fc:	f04f 0000 	mov.w	r0, #0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	0419      	lsls	r1, r3, #16
 800c406:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800c40a:	0410      	lsls	r0, r2, #16
 800c40c:	ea44 0300 	orr.w	r3, r4, r0
 800c410:	633b      	str	r3, [r7, #48]	; 0x30
 800c412:	ea45 0301 	orr.w	r3, r5, r1
 800c416:	637b      	str	r3, [r7, #52]	; 0x34
 800c418:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c41c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800c420:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c428:	1cda      	adds	r2, r3, #3
 800c42a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c42e:	4413      	add	r3, r2
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	b2da      	uxtb	r2, r3
 800c434:	f04f 0300 	mov.w	r3, #0
 800c438:	0a14      	lsrs	r4, r2, #8
 800c43a:	62fc      	str	r4, [r7, #44]	; 0x2c
 800c43c:	0613      	lsls	r3, r2, #24
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c440:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800c444:	4623      	mov	r3, r4
 800c446:	4303      	orrs	r3, r0
 800c448:	623b      	str	r3, [r7, #32]
 800c44a:	462b      	mov	r3, r5
 800c44c:	430b      	orrs	r3, r1
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
 800c450:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c454:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800c458:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800c45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c460:	1d1a      	adds	r2, r3, #4
 800c462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c466:	4413      	add	r3, r2
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	f04f 0000 	mov.w	r0, #0
 800c474:	f04f 0100 	mov.w	r1, #0
 800c478:	0011      	movs	r1, r2
 800c47a:	2000      	movs	r0, #0
 800c47c:	ea44 0300 	orr.w	r3, r4, r0
 800c480:	61bb      	str	r3, [r7, #24]
 800c482:	ea45 0301 	orr.w	r3, r5, r1
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c48c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800c490:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800c494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c498:	1d5a      	adds	r2, r3, #5
 800c49a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c49e:	4413      	add	r3, r2
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	f04f 0300 	mov.w	r3, #0
 800c4a8:	f04f 0000 	mov.w	r0, #0
 800c4ac:	f04f 0100 	mov.w	r1, #0
 800c4b0:	0211      	lsls	r1, r2, #8
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	ea44 0300 	orr.w	r3, r4, r0
 800c4b8:	613b      	str	r3, [r7, #16]
 800c4ba:	ea45 0301 	orr.w	r3, r5, r1
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c4c4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800c4c8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800c4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d0:	1d9a      	adds	r2, r3, #6
 800c4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4d6:	4413      	add	r3, r2
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	f04f 0300 	mov.w	r3, #0
 800c4e0:	f04f 0000 	mov.w	r0, #0
 800c4e4:	f04f 0100 	mov.w	r1, #0
 800c4e8:	0411      	lsls	r1, r2, #16
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	ea44 0300 	orr.w	r3, r4, r0
 800c4f0:	60bb      	str	r3, [r7, #8]
 800c4f2:	ea45 0301 	orr.w	r3, r5, r1
 800c4f6:	60fb      	str	r3, [r7, #12]
 800c4f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c4fc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800c500:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800c504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c508:	1dda      	adds	r2, r3, #7
 800c50a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c50e:	4413      	add	r3, r2
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b2da      	uxtb	r2, r3
 800c514:	f04f 0300 	mov.w	r3, #0
 800c518:	f04f 0000 	mov.w	r0, #0
 800c51c:	f04f 0100 	mov.w	r1, #0
 800c520:	0611      	lsls	r1, r2, #24
 800c522:	2000      	movs	r0, #0
 800c524:	ea44 0300 	orr.w	r3, r4, r0
 800c528:	603b      	str	r3, [r7, #0]
 800c52a:	ea45 0301 	orr.w	r3, r5, r1
 800c52e:	607b      	str	r3, [r7, #4]
 800c530:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c534:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->st_effort = u_st_effort.real;
 800c538:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c53c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c540:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
      offset += sizeof(this->st_effort);
 800c544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c548:	3308      	adds	r3, #8
 800c54a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 800c54e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c554:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	18d0      	adds	r0, r2, r3
 800c55c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c560:	3348      	adds	r3, #72	; 0x48
 800c562:	2208      	movs	r2, #8
 800c564:	4619      	mov	r1, r3
 800c566:	f002 fd03 	bl	800ef70 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 800c56a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c56e:	3301      	adds	r3, #1
 800c570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c574:	e6f6      	b.n	800c364 <_ZN11sensor_msgs10JointState11deserializeEPh+0x7c8>
      }
     return offset;
 800c576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    }
 800c57a:	4618      	mov	r0, r3
 800c57c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c580:	46bd      	mov	sp, r7
 800c582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c588 <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	4b03      	ldr	r3, [pc, #12]	; (800c5a0 <_ZN11sensor_msgs10JointState7getTypeEv+0x18>)
 800c592:	4618      	mov	r0, r3
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	0800f414 	.word	0x0800f414

0800c5a4 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	4b03      	ldr	r3, [pc, #12]	; (800c5bc <_ZN11sensor_msgs10JointState6getMD5Ev+0x18>)
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	0800f42c 	.word	0x0800f42c

0800c5c0 <_ZN13geometry_msgs6Pose2DC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _theta_type;
      _theta_type theta;

    Pose2D():
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      theta(0)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fd fe3c 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800c5d0:	4a0e      	ldr	r2, [pc, #56]	; (800c60c <_ZN13geometry_msgs6Pose2DC1Ev+0x4c>)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	f04f 0200 	mov.w	r2, #0
 800c5dc:	f04f 0300 	mov.w	r3, #0
 800c5e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c5e4:	6879      	ldr	r1, [r7, #4]
 800c5e6:	f04f 0200 	mov.w	r2, #0
 800c5ea:	f04f 0300 	mov.w	r3, #0
 800c5ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	0800f72c 	.word	0x0800f72c

0800c610 <_ZNK13geometry_msgs6Pose2D9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800c610:	b480      	push	{r7}
 800c612:	b08b      	sub	sp, #44	; 0x2c
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800c61a:	2300      	movs	r3, #0
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c624:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800c628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c62c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c62e:	6838      	ldr	r0, [r7, #0]
 800c630:	4401      	add	r1, r0
 800c632:	b2d3      	uxtb	r3, r2
 800c634:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800c636:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c63a:	f04f 0200 	mov.w	r2, #0
 800c63e:	f04f 0300 	mov.w	r3, #0
 800c642:	0a02      	lsrs	r2, r0, #8
 800c644:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c648:	0a0b      	lsrs	r3, r1, #8
 800c64a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c64c:	3101      	adds	r1, #1
 800c64e:	6838      	ldr	r0, [r7, #0]
 800c650:	4401      	add	r1, r0
 800c652:	b2d3      	uxtb	r3, r2
 800c654:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800c656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c65a:	f04f 0200 	mov.w	r2, #0
 800c65e:	f04f 0300 	mov.w	r3, #0
 800c662:	0c02      	lsrs	r2, r0, #16
 800c664:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c668:	0c0b      	lsrs	r3, r1, #16
 800c66a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c66c:	3102      	adds	r1, #2
 800c66e:	6838      	ldr	r0, [r7, #0]
 800c670:	4401      	add	r1, r0
 800c672:	b2d3      	uxtb	r3, r2
 800c674:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800c676:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	f04f 0300 	mov.w	r3, #0
 800c682:	0e02      	lsrs	r2, r0, #24
 800c684:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c688:	0e0b      	lsrs	r3, r1, #24
 800c68a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c68c:	3103      	adds	r1, #3
 800c68e:	6838      	ldr	r0, [r7, #0]
 800c690:	4401      	add	r1, r0
 800c692:	b2d3      	uxtb	r3, r2
 800c694:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800c696:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c69a:	f04f 0200 	mov.w	r2, #0
 800c69e:	f04f 0300 	mov.w	r3, #0
 800c6a2:	000a      	movs	r2, r1
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6a8:	3104      	adds	r1, #4
 800c6aa:	6838      	ldr	r0, [r7, #0]
 800c6ac:	4401      	add	r1, r0
 800c6ae:	b2d3      	uxtb	r3, r2
 800c6b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800c6b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c6b6:	f04f 0200 	mov.w	r2, #0
 800c6ba:	f04f 0300 	mov.w	r3, #0
 800c6be:	0a0a      	lsrs	r2, r1, #8
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6c4:	3105      	adds	r1, #5
 800c6c6:	6838      	ldr	r0, [r7, #0]
 800c6c8:	4401      	add	r1, r0
 800c6ca:	b2d3      	uxtb	r3, r2
 800c6cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800c6ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	f04f 0300 	mov.w	r3, #0
 800c6da:	0c0a      	lsrs	r2, r1, #16
 800c6dc:	2300      	movs	r3, #0
 800c6de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6e0:	3106      	adds	r1, #6
 800c6e2:	6838      	ldr	r0, [r7, #0]
 800c6e4:	4401      	add	r1, r0
 800c6e6:	b2d3      	uxtb	r3, r2
 800c6e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800c6ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c6ee:	f04f 0200 	mov.w	r2, #0
 800c6f2:	f04f 0300 	mov.w	r3, #0
 800c6f6:	0e0a      	lsrs	r2, r1, #24
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6fc:	3107      	adds	r1, #7
 800c6fe:	6838      	ldr	r0, [r7, #0]
 800c700:	4401      	add	r1, r0
 800c702:	b2d3      	uxtb	r3, r2
 800c704:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800c706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c708:	3308      	adds	r3, #8
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c712:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800c716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c71a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c71c:	6838      	ldr	r0, [r7, #0]
 800c71e:	4401      	add	r1, r0
 800c720:	b2d3      	uxtb	r3, r2
 800c722:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800c724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c728:	f04f 0200 	mov.w	r2, #0
 800c72c:	f04f 0300 	mov.w	r3, #0
 800c730:	0a02      	lsrs	r2, r0, #8
 800c732:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c736:	0a0b      	lsrs	r3, r1, #8
 800c738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c73a:	3101      	adds	r1, #1
 800c73c:	6838      	ldr	r0, [r7, #0]
 800c73e:	4401      	add	r1, r0
 800c740:	b2d3      	uxtb	r3, r2
 800c742:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800c744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c748:	f04f 0200 	mov.w	r2, #0
 800c74c:	f04f 0300 	mov.w	r3, #0
 800c750:	0c02      	lsrs	r2, r0, #16
 800c752:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c756:	0c0b      	lsrs	r3, r1, #16
 800c758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c75a:	3102      	adds	r1, #2
 800c75c:	6838      	ldr	r0, [r7, #0]
 800c75e:	4401      	add	r1, r0
 800c760:	b2d3      	uxtb	r3, r2
 800c762:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800c764:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c768:	f04f 0200 	mov.w	r2, #0
 800c76c:	f04f 0300 	mov.w	r3, #0
 800c770:	0e02      	lsrs	r2, r0, #24
 800c772:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c776:	0e0b      	lsrs	r3, r1, #24
 800c778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c77a:	3103      	adds	r1, #3
 800c77c:	6838      	ldr	r0, [r7, #0]
 800c77e:	4401      	add	r1, r0
 800c780:	b2d3      	uxtb	r3, r2
 800c782:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800c784:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c788:	f04f 0200 	mov.w	r2, #0
 800c78c:	f04f 0300 	mov.w	r3, #0
 800c790:	000a      	movs	r2, r1
 800c792:	2300      	movs	r3, #0
 800c794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c796:	3104      	adds	r1, #4
 800c798:	6838      	ldr	r0, [r7, #0]
 800c79a:	4401      	add	r1, r0
 800c79c:	b2d3      	uxtb	r3, r2
 800c79e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800c7a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	f04f 0300 	mov.w	r3, #0
 800c7ac:	0a0a      	lsrs	r2, r1, #8
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7b2:	3105      	adds	r1, #5
 800c7b4:	6838      	ldr	r0, [r7, #0]
 800c7b6:	4401      	add	r1, r0
 800c7b8:	b2d3      	uxtb	r3, r2
 800c7ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800c7bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7c0:	f04f 0200 	mov.w	r2, #0
 800c7c4:	f04f 0300 	mov.w	r3, #0
 800c7c8:	0c0a      	lsrs	r2, r1, #16
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7ce:	3106      	adds	r1, #6
 800c7d0:	6838      	ldr	r0, [r7, #0]
 800c7d2:	4401      	add	r1, r0
 800c7d4:	b2d3      	uxtb	r3, r2
 800c7d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800c7d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7dc:	f04f 0200 	mov.w	r2, #0
 800c7e0:	f04f 0300 	mov.w	r3, #0
 800c7e4:	0e0a      	lsrs	r2, r1, #24
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7ea:	3107      	adds	r1, #7
 800c7ec:	6838      	ldr	r0, [r7, #0]
 800c7ee:	4401      	add	r1, r0
 800c7f0:	b2d3      	uxtb	r3, r2
 800c7f2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_theta;
      u_theta.real = this->theta;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c800:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_theta.base >> (8 * 0)) & 0xFF;
 800c804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c80a:	6838      	ldr	r0, [r7, #0]
 800c80c:	4401      	add	r1, r0
 800c80e:	b2d3      	uxtb	r3, r2
 800c810:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_theta.base >> (8 * 1)) & 0xFF;
 800c812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	0a02      	lsrs	r2, r0, #8
 800c820:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c824:	0a0b      	lsrs	r3, r1, #8
 800c826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c828:	3101      	adds	r1, #1
 800c82a:	6838      	ldr	r0, [r7, #0]
 800c82c:	4401      	add	r1, r0
 800c82e:	b2d3      	uxtb	r3, r2
 800c830:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_theta.base >> (8 * 2)) & 0xFF;
 800c832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c836:	f04f 0200 	mov.w	r2, #0
 800c83a:	f04f 0300 	mov.w	r3, #0
 800c83e:	0c02      	lsrs	r2, r0, #16
 800c840:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c844:	0c0b      	lsrs	r3, r1, #16
 800c846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c848:	3102      	adds	r1, #2
 800c84a:	6838      	ldr	r0, [r7, #0]
 800c84c:	4401      	add	r1, r0
 800c84e:	b2d3      	uxtb	r3, r2
 800c850:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_theta.base >> (8 * 3)) & 0xFF;
 800c852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c856:	f04f 0200 	mov.w	r2, #0
 800c85a:	f04f 0300 	mov.w	r3, #0
 800c85e:	0e02      	lsrs	r2, r0, #24
 800c860:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c864:	0e0b      	lsrs	r3, r1, #24
 800c866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c868:	3103      	adds	r1, #3
 800c86a:	6838      	ldr	r0, [r7, #0]
 800c86c:	4401      	add	r1, r0
 800c86e:	b2d3      	uxtb	r3, r2
 800c870:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_theta.base >> (8 * 4)) & 0xFF;
 800c872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c876:	f04f 0200 	mov.w	r2, #0
 800c87a:	f04f 0300 	mov.w	r3, #0
 800c87e:	000a      	movs	r2, r1
 800c880:	2300      	movs	r3, #0
 800c882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c884:	3104      	adds	r1, #4
 800c886:	6838      	ldr	r0, [r7, #0]
 800c888:	4401      	add	r1, r0
 800c88a:	b2d3      	uxtb	r3, r2
 800c88c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_theta.base >> (8 * 5)) & 0xFF;
 800c88e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c892:	f04f 0200 	mov.w	r2, #0
 800c896:	f04f 0300 	mov.w	r3, #0
 800c89a:	0a0a      	lsrs	r2, r1, #8
 800c89c:	2300      	movs	r3, #0
 800c89e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8a0:	3105      	adds	r1, #5
 800c8a2:	6838      	ldr	r0, [r7, #0]
 800c8a4:	4401      	add	r1, r0
 800c8a6:	b2d3      	uxtb	r3, r2
 800c8a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_theta.base >> (8 * 6)) & 0xFF;
 800c8aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	0c0a      	lsrs	r2, r1, #16
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8bc:	3106      	adds	r1, #6
 800c8be:	6838      	ldr	r0, [r7, #0]
 800c8c0:	4401      	add	r1, r0
 800c8c2:	b2d3      	uxtb	r3, r2
 800c8c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_theta.base >> (8 * 7)) & 0xFF;
 800c8c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8ca:	f04f 0200 	mov.w	r2, #0
 800c8ce:	f04f 0300 	mov.w	r3, #0
 800c8d2:	0e0a      	lsrs	r2, r1, #24
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8d8:	3107      	adds	r1, #7
 800c8da:	6838      	ldr	r0, [r7, #0]
 800c8dc:	4401      	add	r1, r0
 800c8de:	b2d3      	uxtb	r3, r2
 800c8e0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->theta);
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	372c      	adds	r7, #44	; 0x2c
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <_ZN13geometry_msgs6Pose2D11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800c8f6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c8fa:	b0bb      	sub	sp, #236	; 0xec
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800c902:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800c918:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c91c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c924:	4413      	add	r3, r2
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	f04f 0300 	mov.w	r3, #0
 800c92e:	ea40 0402 	orr.w	r4, r0, r2
 800c932:	ea41 0503 	orr.w	r5, r1, r3
 800c936:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800c93a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	f04f 0300 	mov.w	r3, #0
 800c952:	f04f 0000 	mov.w	r0, #0
 800c956:	f04f 0100 	mov.w	r1, #0
 800c95a:	0219      	lsls	r1, r3, #8
 800c95c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c960:	0210      	lsls	r0, r2, #8
 800c962:	ea44 0a00 	orr.w	sl, r4, r0
 800c966:	ea45 0b01 	orr.w	fp, r5, r1
 800c96a:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800c96e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c976:	1c9a      	adds	r2, r3, #2
 800c978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c97c:	4413      	add	r3, r2
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	b2da      	uxtb	r2, r3
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	f04f 0000 	mov.w	r0, #0
 800c98a:	f04f 0100 	mov.w	r1, #0
 800c98e:	0419      	lsls	r1, r3, #16
 800c990:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800c994:	0410      	lsls	r0, r2, #16
 800c996:	ea44 0300 	orr.w	r3, r4, r0
 800c99a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c99e:	ea45 0301 	orr.w	r3, r5, r1
 800c9a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c9a6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800c9aa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800c9ae:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9b6:	1cda      	adds	r2, r3, #3
 800c9b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9bc:	4413      	add	r3, r2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	f04f 0300 	mov.w	r3, #0
 800c9c6:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800c9ca:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800c9ce:	ea40 0308 	orr.w	r3, r0, r8
 800c9d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9d6:	ea41 0309 	orr.w	r3, r1, r9
 800c9da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9de:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800c9e2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800c9e6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800c9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9f4:	4413      	add	r3, r2
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	f04f 0300 	mov.w	r3, #0
 800c9fe:	f04f 0000 	mov.w	r0, #0
 800ca02:	f04f 0100 	mov.w	r1, #0
 800ca06:	0011      	movs	r1, r2
 800ca08:	2000      	movs	r0, #0
 800ca0a:	ea44 0300 	orr.w	r3, r4, r0
 800ca0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca12:	ea45 0301 	orr.w	r3, r5, r1
 800ca16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca1a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800ca1e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800ca22:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800ca26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca2a:	1d5a      	adds	r2, r3, #5
 800ca2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca30:	4413      	add	r3, r2
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	f04f 0300 	mov.w	r3, #0
 800ca3a:	f04f 0000 	mov.w	r0, #0
 800ca3e:	f04f 0100 	mov.w	r1, #0
 800ca42:	0211      	lsls	r1, r2, #8
 800ca44:	2000      	movs	r0, #0
 800ca46:	ea44 0300 	orr.w	r3, r4, r0
 800ca4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca4e:	ea45 0301 	orr.w	r3, r5, r1
 800ca52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ca56:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800ca5a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800ca5e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800ca62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca66:	1d9a      	adds	r2, r3, #6
 800ca68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca6c:	4413      	add	r3, r2
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	f04f 0300 	mov.w	r3, #0
 800ca76:	f04f 0000 	mov.w	r0, #0
 800ca7a:	f04f 0100 	mov.w	r1, #0
 800ca7e:	0411      	lsls	r1, r2, #16
 800ca80:	2000      	movs	r0, #0
 800ca82:	ea44 0300 	orr.w	r3, r4, r0
 800ca86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca8a:	ea45 0301 	orr.w	r3, r5, r1
 800ca8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca92:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800ca96:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800ca9a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800ca9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa2:	1dda      	adds	r2, r3, #7
 800caa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800caa8:	4413      	add	r3, r2
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	b2da      	uxtb	r2, r3
 800caae:	f04f 0300 	mov.w	r3, #0
 800cab2:	f04f 0000 	mov.w	r0, #0
 800cab6:	f04f 0100 	mov.w	r1, #0
 800caba:	0611      	lsls	r1, r2, #24
 800cabc:	2000      	movs	r0, #0
 800cabe:	ea44 0300 	orr.w	r3, r4, r0
 800cac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cac6:	ea45 0301 	orr.w	r3, r5, r1
 800caca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cace:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800cad2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 800cad6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800cada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cade:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800cae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cae6:	3308      	adds	r3, #8
 800cae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800caec:	f04f 0200 	mov.w	r2, #0
 800caf0:	f04f 0300 	mov.w	r3, #0
 800caf4:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800caf8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cafc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb04:	4413      	add	r3, r2
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	f04f 0300 	mov.w	r3, #0
 800cb0e:	ea40 0402 	orr.w	r4, r0, r2
 800cb12:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800cb16:	430b      	orrs	r3, r1
 800cb18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb1c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800cb20:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800cb24:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800cb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb2c:	1c5a      	adds	r2, r3, #1
 800cb2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb32:	4413      	add	r3, r2
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	f04f 0300 	mov.w	r3, #0
 800cb3c:	f04f 0000 	mov.w	r0, #0
 800cb40:	f04f 0100 	mov.w	r1, #0
 800cb44:	0219      	lsls	r1, r3, #8
 800cb46:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cb4a:	0210      	lsls	r0, r2, #8
 800cb4c:	ea44 0300 	orr.w	r3, r4, r0
 800cb50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb54:	ea45 0301 	orr.w	r3, r5, r1
 800cb58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb5c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800cb60:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800cb64:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800cb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb6c:	1c9a      	adds	r2, r3, #2
 800cb6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb72:	4413      	add	r3, r2
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	f04f 0300 	mov.w	r3, #0
 800cb7c:	f04f 0000 	mov.w	r0, #0
 800cb80:	f04f 0100 	mov.w	r1, #0
 800cb84:	0419      	lsls	r1, r3, #16
 800cb86:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800cb8a:	0410      	lsls	r0, r2, #16
 800cb8c:	ea44 0300 	orr.w	r3, r4, r0
 800cb90:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb92:	ea45 0301 	orr.w	r3, r5, r1
 800cb96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb98:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800cb9c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800cba0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cba8:	1cda      	adds	r2, r3, #3
 800cbaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cbae:	4413      	add	r3, r2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	f04f 0300 	mov.w	r3, #0
 800cbb8:	0a14      	lsrs	r4, r2, #8
 800cbba:	677c      	str	r4, [r7, #116]	; 0x74
 800cbbc:	0613      	lsls	r3, r2, #24
 800cbbe:	673b      	str	r3, [r7, #112]	; 0x70
 800cbc0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800cbc4:	4623      	mov	r3, r4
 800cbc6:	4303      	orrs	r3, r0
 800cbc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbca:	462b      	mov	r3, r5
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbd0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800cbd4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800cbd8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800cbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbe0:	1d1a      	adds	r2, r3, #4
 800cbe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cbe6:	4413      	add	r3, r2
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	f04f 0300 	mov.w	r3, #0
 800cbf0:	f04f 0000 	mov.w	r0, #0
 800cbf4:	f04f 0100 	mov.w	r1, #0
 800cbf8:	0011      	movs	r1, r2
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	ea44 0300 	orr.w	r3, r4, r0
 800cc00:	663b      	str	r3, [r7, #96]	; 0x60
 800cc02:	ea45 0301 	orr.w	r3, r5, r1
 800cc06:	667b      	str	r3, [r7, #100]	; 0x64
 800cc08:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800cc0c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800cc10:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800cc14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc18:	1d5a      	adds	r2, r3, #5
 800cc1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc1e:	4413      	add	r3, r2
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	f04f 0300 	mov.w	r3, #0
 800cc28:	f04f 0000 	mov.w	r0, #0
 800cc2c:	f04f 0100 	mov.w	r1, #0
 800cc30:	0211      	lsls	r1, r2, #8
 800cc32:	2000      	movs	r0, #0
 800cc34:	ea44 0300 	orr.w	r3, r4, r0
 800cc38:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc3a:	ea45 0301 	orr.w	r3, r5, r1
 800cc3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc40:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800cc44:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800cc48:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800cc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc50:	1d9a      	adds	r2, r3, #6
 800cc52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc56:	4413      	add	r3, r2
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	f04f 0300 	mov.w	r3, #0
 800cc60:	f04f 0000 	mov.w	r0, #0
 800cc64:	f04f 0100 	mov.w	r1, #0
 800cc68:	0411      	lsls	r1, r2, #16
 800cc6a:	2000      	movs	r0, #0
 800cc6c:	ea44 0300 	orr.w	r3, r4, r0
 800cc70:	653b      	str	r3, [r7, #80]	; 0x50
 800cc72:	ea45 0301 	orr.w	r3, r5, r1
 800cc76:	657b      	str	r3, [r7, #84]	; 0x54
 800cc78:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800cc7c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800cc80:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800cc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc88:	1dda      	adds	r2, r3, #7
 800cc8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc8e:	4413      	add	r3, r2
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	f04f 0300 	mov.w	r3, #0
 800cc98:	f04f 0000 	mov.w	r0, #0
 800cc9c:	f04f 0100 	mov.w	r1, #0
 800cca0:	0611      	lsls	r1, r2, #24
 800cca2:	2000      	movs	r0, #0
 800cca4:	ea44 0300 	orr.w	r3, r4, r0
 800cca8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccaa:	ea45 0301 	orr.w	r3, r5, r1
 800ccae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ccb4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 800ccb8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800ccbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ccc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800ccc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccc8:	3308      	adds	r3, #8
 800ccca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_theta;
      u_theta.base = 0;
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	f04f 0300 	mov.w	r3, #0
 800ccd6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800ccda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ccde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cce6:	4413      	add	r3, r2
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	f04f 0300 	mov.w	r3, #0
 800ccf0:	ea40 0402 	orr.w	r4, r0, r2
 800ccf4:	643c      	str	r4, [r7, #64]	; 0x40
 800ccf6:	430b      	orrs	r3, r1
 800ccf8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccfa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800ccfe:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800cd02:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cd06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd10:	4413      	add	r3, r2
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	f04f 0300 	mov.w	r3, #0
 800cd1a:	f04f 0000 	mov.w	r0, #0
 800cd1e:	f04f 0100 	mov.w	r1, #0
 800cd22:	0219      	lsls	r1, r3, #8
 800cd24:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cd28:	0210      	lsls	r0, r2, #8
 800cd2a:	ea44 0300 	orr.w	r3, r4, r0
 800cd2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd30:	ea45 0301 	orr.w	r3, r5, r1
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd36:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800cd3a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800cd3e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cd42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd46:	1c9a      	adds	r2, r3, #2
 800cd48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd4c:	4413      	add	r3, r2
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	f04f 0300 	mov.w	r3, #0
 800cd56:	f04f 0000 	mov.w	r0, #0
 800cd5a:	f04f 0100 	mov.w	r1, #0
 800cd5e:	0419      	lsls	r1, r3, #16
 800cd60:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800cd64:	0410      	lsls	r0, r2, #16
 800cd66:	ea44 0300 	orr.w	r3, r4, r0
 800cd6a:	633b      	str	r3, [r7, #48]	; 0x30
 800cd6c:	ea45 0301 	orr.w	r3, r5, r1
 800cd70:	637b      	str	r3, [r7, #52]	; 0x34
 800cd72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800cd76:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800cd7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd82:	1cda      	adds	r2, r3, #3
 800cd84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd88:	4413      	add	r3, r2
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	f04f 0300 	mov.w	r3, #0
 800cd92:	0a14      	lsrs	r4, r2, #8
 800cd94:	62fc      	str	r4, [r7, #44]	; 0x2c
 800cd96:	0613      	lsls	r3, r2, #24
 800cd98:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd9a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800cd9e:	4623      	mov	r3, r4
 800cda0:	4303      	orrs	r3, r0
 800cda2:	623b      	str	r3, [r7, #32]
 800cda4:	462b      	mov	r3, r5
 800cda6:	430b      	orrs	r3, r1
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
 800cdaa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cdae:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800cdb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cdb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdba:	3304      	adds	r3, #4
 800cdbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cdc0:	4413      	add	r3, r2
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	b2dc      	uxtb	r4, r3
 800cdc6:	f04f 0500 	mov.w	r5, #0
 800cdca:	f04f 0200 	mov.w	r2, #0
 800cdce:	f04f 0300 	mov.w	r3, #0
 800cdd2:	0023      	movs	r3, r4
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	ea40 0402 	orr.w	r4, r0, r2
 800cdda:	61bc      	str	r4, [r7, #24]
 800cddc:	430b      	orrs	r3, r1
 800cdde:	61fb      	str	r3, [r7, #28]
 800cde0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cde4:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800cde8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cdec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdf0:	3305      	adds	r3, #5
 800cdf2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cdf6:	4413      	add	r3, r2
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	b2dc      	uxtb	r4, r3
 800cdfc:	f04f 0500 	mov.w	r5, #0
 800ce00:	f04f 0200 	mov.w	r2, #0
 800ce04:	f04f 0300 	mov.w	r3, #0
 800ce08:	0223      	lsls	r3, r4, #8
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	ea40 0402 	orr.w	r4, r0, r2
 800ce10:	613c      	str	r4, [r7, #16]
 800ce12:	430b      	orrs	r3, r1
 800ce14:	617b      	str	r3, [r7, #20]
 800ce16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ce1a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800ce1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ce22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce26:	3306      	adds	r3, #6
 800ce28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ce2c:	4413      	add	r3, r2
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	b2dc      	uxtb	r4, r3
 800ce32:	f04f 0500 	mov.w	r5, #0
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	f04f 0300 	mov.w	r3, #0
 800ce3e:	0423      	lsls	r3, r4, #16
 800ce40:	2200      	movs	r2, #0
 800ce42:	ea40 0402 	orr.w	r4, r0, r2
 800ce46:	60bc      	str	r4, [r7, #8]
 800ce48:	430b      	orrs	r3, r1
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ce50:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_theta.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800ce54:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ce58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce5c:	3307      	adds	r3, #7
 800ce5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ce62:	4413      	add	r3, r2
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	b2dc      	uxtb	r4, r3
 800ce68:	f04f 0500 	mov.w	r5, #0
 800ce6c:	f04f 0200 	mov.w	r2, #0
 800ce70:	f04f 0300 	mov.w	r3, #0
 800ce74:	0623      	lsls	r3, r4, #24
 800ce76:	2200      	movs	r2, #0
 800ce78:	ea40 0402 	orr.w	r4, r0, r2
 800ce7c:	603c      	str	r4, [r7, #0]
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	607b      	str	r3, [r7, #4]
 800ce82:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ce86:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->theta = u_theta.real;
 800ce8a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800ce8e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800ce92:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->theta);
 800ce96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 800cea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 800cea4:	4618      	mov	r0, r3
 800cea6:	37ec      	adds	r7, #236	; 0xec
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ceae:	4770      	bx	lr

0800ceb0 <_ZN13geometry_msgs6Pose2D7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose2D"; };
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	4b03      	ldr	r3, [pc, #12]	; (800cec8 <_ZN13geometry_msgs6Pose2D7getTypeEv+0x18>)
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	0800f450 	.word	0x0800f450

0800cecc <_ZN13geometry_msgs6Pose2D6getMD5Ev>:
    const char * getMD5(){ return "938fa65709584ad8e77d238529be13b8"; };
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	4b03      	ldr	r3, [pc, #12]	; (800cee4 <_ZN13geometry_msgs6Pose2D6getMD5Ev+0x18>)
 800ced6:	4618      	mov	r0, r3
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	0800f468 	.word	0x0800f468

0800cee8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fd f9a8 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800cef8:	4a0e      	ldr	r2, [pc, #56]	; (800cf34 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	f04f 0200 	mov.w	r2, #0
 800cf04:	f04f 0300 	mov.w	r3, #0
 800cf08:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cf0c:	6879      	ldr	r1, [r7, #4]
 800cf0e:	f04f 0200 	mov.w	r2, #0
 800cf12:	f04f 0300 	mov.w	r3, #0
 800cf16:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	f04f 0200 	mov.w	r2, #0
 800cf20:	f04f 0300 	mov.w	r3, #0
 800cf24:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	0800f714 	.word	0x0800f714

0800cf38 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800cf38:	b480      	push	{r7}
 800cf3a:	b08b      	sub	sp, #44	; 0x2c
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cf4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800cf50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf56:	6838      	ldr	r0, [r7, #0]
 800cf58:	4401      	add	r1, r0
 800cf5a:	b2d3      	uxtb	r3, r2
 800cf5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800cf5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cf62:	f04f 0200 	mov.w	r2, #0
 800cf66:	f04f 0300 	mov.w	r3, #0
 800cf6a:	0a02      	lsrs	r2, r0, #8
 800cf6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cf70:	0a0b      	lsrs	r3, r1, #8
 800cf72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf74:	3101      	adds	r1, #1
 800cf76:	6838      	ldr	r0, [r7, #0]
 800cf78:	4401      	add	r1, r0
 800cf7a:	b2d3      	uxtb	r3, r2
 800cf7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800cf7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cf82:	f04f 0200 	mov.w	r2, #0
 800cf86:	f04f 0300 	mov.w	r3, #0
 800cf8a:	0c02      	lsrs	r2, r0, #16
 800cf8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf90:	0c0b      	lsrs	r3, r1, #16
 800cf92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf94:	3102      	adds	r1, #2
 800cf96:	6838      	ldr	r0, [r7, #0]
 800cf98:	4401      	add	r1, r0
 800cf9a:	b2d3      	uxtb	r3, r2
 800cf9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800cf9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cfa2:	f04f 0200 	mov.w	r2, #0
 800cfa6:	f04f 0300 	mov.w	r3, #0
 800cfaa:	0e02      	lsrs	r2, r0, #24
 800cfac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cfb0:	0e0b      	lsrs	r3, r1, #24
 800cfb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfb4:	3103      	adds	r1, #3
 800cfb6:	6838      	ldr	r0, [r7, #0]
 800cfb8:	4401      	add	r1, r0
 800cfba:	b2d3      	uxtb	r3, r2
 800cfbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800cfbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	000a      	movs	r2, r1
 800cfcc:	2300      	movs	r3, #0
 800cfce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfd0:	3104      	adds	r1, #4
 800cfd2:	6838      	ldr	r0, [r7, #0]
 800cfd4:	4401      	add	r1, r0
 800cfd6:	b2d3      	uxtb	r3, r2
 800cfd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800cfda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	f04f 0300 	mov.w	r3, #0
 800cfe6:	0a0a      	lsrs	r2, r1, #8
 800cfe8:	2300      	movs	r3, #0
 800cfea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfec:	3105      	adds	r1, #5
 800cfee:	6838      	ldr	r0, [r7, #0]
 800cff0:	4401      	add	r1, r0
 800cff2:	b2d3      	uxtb	r3, r2
 800cff4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800cff6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cffa:	f04f 0200 	mov.w	r2, #0
 800cffe:	f04f 0300 	mov.w	r3, #0
 800d002:	0c0a      	lsrs	r2, r1, #16
 800d004:	2300      	movs	r3, #0
 800d006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d008:	3106      	adds	r1, #6
 800d00a:	6838      	ldr	r0, [r7, #0]
 800d00c:	4401      	add	r1, r0
 800d00e:	b2d3      	uxtb	r3, r2
 800d010:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800d012:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	0e0a      	lsrs	r2, r1, #24
 800d020:	2300      	movs	r3, #0
 800d022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d024:	3107      	adds	r1, #7
 800d026:	6838      	ldr	r0, [r7, #0]
 800d028:	4401      	add	r1, r0
 800d02a:	b2d3      	uxtb	r3, r2
 800d02c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	3308      	adds	r3, #8
 800d032:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d03a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800d03e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d044:	6838      	ldr	r0, [r7, #0]
 800d046:	4401      	add	r1, r0
 800d048:	b2d3      	uxtb	r3, r2
 800d04a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800d04c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d050:	f04f 0200 	mov.w	r2, #0
 800d054:	f04f 0300 	mov.w	r3, #0
 800d058:	0a02      	lsrs	r2, r0, #8
 800d05a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d05e:	0a0b      	lsrs	r3, r1, #8
 800d060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d062:	3101      	adds	r1, #1
 800d064:	6838      	ldr	r0, [r7, #0]
 800d066:	4401      	add	r1, r0
 800d068:	b2d3      	uxtb	r3, r2
 800d06a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800d06c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d070:	f04f 0200 	mov.w	r2, #0
 800d074:	f04f 0300 	mov.w	r3, #0
 800d078:	0c02      	lsrs	r2, r0, #16
 800d07a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d07e:	0c0b      	lsrs	r3, r1, #16
 800d080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d082:	3102      	adds	r1, #2
 800d084:	6838      	ldr	r0, [r7, #0]
 800d086:	4401      	add	r1, r0
 800d088:	b2d3      	uxtb	r3, r2
 800d08a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800d08c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d090:	f04f 0200 	mov.w	r2, #0
 800d094:	f04f 0300 	mov.w	r3, #0
 800d098:	0e02      	lsrs	r2, r0, #24
 800d09a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d09e:	0e0b      	lsrs	r3, r1, #24
 800d0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0a2:	3103      	adds	r1, #3
 800d0a4:	6838      	ldr	r0, [r7, #0]
 800d0a6:	4401      	add	r1, r0
 800d0a8:	b2d3      	uxtb	r3, r2
 800d0aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800d0ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0b0:	f04f 0200 	mov.w	r2, #0
 800d0b4:	f04f 0300 	mov.w	r3, #0
 800d0b8:	000a      	movs	r2, r1
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0be:	3104      	adds	r1, #4
 800d0c0:	6838      	ldr	r0, [r7, #0]
 800d0c2:	4401      	add	r1, r0
 800d0c4:	b2d3      	uxtb	r3, r2
 800d0c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800d0c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	f04f 0300 	mov.w	r3, #0
 800d0d4:	0a0a      	lsrs	r2, r1, #8
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0da:	3105      	adds	r1, #5
 800d0dc:	6838      	ldr	r0, [r7, #0]
 800d0de:	4401      	add	r1, r0
 800d0e0:	b2d3      	uxtb	r3, r2
 800d0e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800d0e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0e8:	f04f 0200 	mov.w	r2, #0
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	0c0a      	lsrs	r2, r1, #16
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0f6:	3106      	adds	r1, #6
 800d0f8:	6838      	ldr	r0, [r7, #0]
 800d0fa:	4401      	add	r1, r0
 800d0fc:	b2d3      	uxtb	r3, r2
 800d0fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800d100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d104:	f04f 0200 	mov.w	r2, #0
 800d108:	f04f 0300 	mov.w	r3, #0
 800d10c:	0e0a      	lsrs	r2, r1, #24
 800d10e:	2300      	movs	r3, #0
 800d110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d112:	3107      	adds	r1, #7
 800d114:	6838      	ldr	r0, [r7, #0]
 800d116:	4401      	add	r1, r0
 800d118:	b2d3      	uxtb	r3, r2
 800d11a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	3308      	adds	r3, #8
 800d120:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d128:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800d12c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d132:	6838      	ldr	r0, [r7, #0]
 800d134:	4401      	add	r1, r0
 800d136:	b2d3      	uxtb	r3, r2
 800d138:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800d13a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	f04f 0300 	mov.w	r3, #0
 800d146:	0a02      	lsrs	r2, r0, #8
 800d148:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d14c:	0a0b      	lsrs	r3, r1, #8
 800d14e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d150:	3101      	adds	r1, #1
 800d152:	6838      	ldr	r0, [r7, #0]
 800d154:	4401      	add	r1, r0
 800d156:	b2d3      	uxtb	r3, r2
 800d158:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800d15a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d15e:	f04f 0200 	mov.w	r2, #0
 800d162:	f04f 0300 	mov.w	r3, #0
 800d166:	0c02      	lsrs	r2, r0, #16
 800d168:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d16c:	0c0b      	lsrs	r3, r1, #16
 800d16e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d170:	3102      	adds	r1, #2
 800d172:	6838      	ldr	r0, [r7, #0]
 800d174:	4401      	add	r1, r0
 800d176:	b2d3      	uxtb	r3, r2
 800d178:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800d17a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d17e:	f04f 0200 	mov.w	r2, #0
 800d182:	f04f 0300 	mov.w	r3, #0
 800d186:	0e02      	lsrs	r2, r0, #24
 800d188:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d18c:	0e0b      	lsrs	r3, r1, #24
 800d18e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d190:	3103      	adds	r1, #3
 800d192:	6838      	ldr	r0, [r7, #0]
 800d194:	4401      	add	r1, r0
 800d196:	b2d3      	uxtb	r3, r2
 800d198:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800d19a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d19e:	f04f 0200 	mov.w	r2, #0
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	000a      	movs	r2, r1
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1ac:	3104      	adds	r1, #4
 800d1ae:	6838      	ldr	r0, [r7, #0]
 800d1b0:	4401      	add	r1, r0
 800d1b2:	b2d3      	uxtb	r3, r2
 800d1b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800d1b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	f04f 0300 	mov.w	r3, #0
 800d1c2:	0a0a      	lsrs	r2, r1, #8
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1c8:	3105      	adds	r1, #5
 800d1ca:	6838      	ldr	r0, [r7, #0]
 800d1cc:	4401      	add	r1, r0
 800d1ce:	b2d3      	uxtb	r3, r2
 800d1d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800d1d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1d6:	f04f 0200 	mov.w	r2, #0
 800d1da:	f04f 0300 	mov.w	r3, #0
 800d1de:	0c0a      	lsrs	r2, r1, #16
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1e4:	3106      	adds	r1, #6
 800d1e6:	6838      	ldr	r0, [r7, #0]
 800d1e8:	4401      	add	r1, r0
 800d1ea:	b2d3      	uxtb	r3, r2
 800d1ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800d1ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	f04f 0300 	mov.w	r3, #0
 800d1fa:	0e0a      	lsrs	r2, r1, #24
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d200:	3107      	adds	r1, #7
 800d202:	6838      	ldr	r0, [r7, #0]
 800d204:	4401      	add	r1, r0
 800d206:	b2d3      	uxtb	r3, r2
 800d208:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	3308      	adds	r3, #8
 800d20e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800d212:	4618      	mov	r0, r3
 800d214:	372c      	adds	r7, #44	; 0x2c
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d21e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d222:	b0bb      	sub	sp, #236	; 0xec
 800d224:	af00      	add	r7, sp, #0
 800d226:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d22a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800d234:	f04f 0200 	mov.w	r2, #0
 800d238:	f04f 0300 	mov.w	r3, #0
 800d23c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800d240:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d244:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d24c:	4413      	add	r3, r2
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	b2da      	uxtb	r2, r3
 800d252:	f04f 0300 	mov.w	r3, #0
 800d256:	ea40 0402 	orr.w	r4, r0, r2
 800d25a:	ea41 0503 	orr.w	r5, r1, r3
 800d25e:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800d262:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d26a:	1c5a      	adds	r2, r3, #1
 800d26c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d270:	4413      	add	r3, r2
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	b2da      	uxtb	r2, r3
 800d276:	f04f 0300 	mov.w	r3, #0
 800d27a:	f04f 0000 	mov.w	r0, #0
 800d27e:	f04f 0100 	mov.w	r1, #0
 800d282:	0219      	lsls	r1, r3, #8
 800d284:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d288:	0210      	lsls	r0, r2, #8
 800d28a:	ea44 0a00 	orr.w	sl, r4, r0
 800d28e:	ea45 0b01 	orr.w	fp, r5, r1
 800d292:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800d296:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d29e:	1c9a      	adds	r2, r3, #2
 800d2a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d2a4:	4413      	add	r3, r2
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	f04f 0300 	mov.w	r3, #0
 800d2ae:	f04f 0000 	mov.w	r0, #0
 800d2b2:	f04f 0100 	mov.w	r1, #0
 800d2b6:	0419      	lsls	r1, r3, #16
 800d2b8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800d2bc:	0410      	lsls	r0, r2, #16
 800d2be:	ea44 0300 	orr.w	r3, r4, r0
 800d2c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2c6:	ea45 0301 	orr.w	r3, r5, r1
 800d2ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d2ce:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800d2d2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800d2d6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2de:	1cda      	adds	r2, r3, #3
 800d2e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d2e4:	4413      	add	r3, r2
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	f04f 0300 	mov.w	r3, #0
 800d2ee:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800d2f2:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800d2f6:	ea40 0308 	orr.w	r3, r0, r8
 800d2fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2fe:	ea41 0309 	orr.w	r3, r1, r9
 800d302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d306:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800d30a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800d30e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d31c:	4413      	add	r3, r2
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	b2da      	uxtb	r2, r3
 800d322:	f04f 0300 	mov.w	r3, #0
 800d326:	f04f 0000 	mov.w	r0, #0
 800d32a:	f04f 0100 	mov.w	r1, #0
 800d32e:	0011      	movs	r1, r2
 800d330:	2000      	movs	r0, #0
 800d332:	ea44 0300 	orr.w	r3, r4, r0
 800d336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d33a:	ea45 0301 	orr.w	r3, r5, r1
 800d33e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d342:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800d346:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800d34a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d352:	1d5a      	adds	r2, r3, #5
 800d354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d358:	4413      	add	r3, r2
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	f04f 0300 	mov.w	r3, #0
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	f04f 0100 	mov.w	r1, #0
 800d36a:	0211      	lsls	r1, r2, #8
 800d36c:	2000      	movs	r0, #0
 800d36e:	ea44 0300 	orr.w	r3, r4, r0
 800d372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d376:	ea45 0301 	orr.w	r3, r5, r1
 800d37a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d37e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800d382:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800d386:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d38e:	1d9a      	adds	r2, r3, #6
 800d390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d394:	4413      	add	r3, r2
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	f04f 0300 	mov.w	r3, #0
 800d39e:	f04f 0000 	mov.w	r0, #0
 800d3a2:	f04f 0100 	mov.w	r1, #0
 800d3a6:	0411      	lsls	r1, r2, #16
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	ea44 0300 	orr.w	r3, r4, r0
 800d3ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3b2:	ea45 0301 	orr.w	r3, r5, r1
 800d3b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3ba:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800d3be:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800d3c2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ca:	1dda      	adds	r2, r3, #7
 800d3cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d3d0:	4413      	add	r3, r2
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	f04f 0300 	mov.w	r3, #0
 800d3da:	f04f 0000 	mov.w	r0, #0
 800d3de:	f04f 0100 	mov.w	r1, #0
 800d3e2:	0611      	lsls	r1, r2, #24
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	ea44 0300 	orr.w	r3, r4, r0
 800d3ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d3ee:	ea45 0301 	orr.w	r3, r5, r1
 800d3f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d3f6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d3fa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 800d3fe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d406:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800d40a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d40e:	3308      	adds	r3, #8
 800d410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800d414:	f04f 0200 	mov.w	r2, #0
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800d420:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d424:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d42c:	4413      	add	r3, r2
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	b2da      	uxtb	r2, r3
 800d432:	f04f 0300 	mov.w	r3, #0
 800d436:	ea40 0402 	orr.w	r4, r0, r2
 800d43a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800d43e:	430b      	orrs	r3, r1
 800d440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d444:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800d448:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800d44c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800d450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d45a:	4413      	add	r3, r2
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	f04f 0300 	mov.w	r3, #0
 800d464:	f04f 0000 	mov.w	r0, #0
 800d468:	f04f 0100 	mov.w	r1, #0
 800d46c:	0219      	lsls	r1, r3, #8
 800d46e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d472:	0210      	lsls	r0, r2, #8
 800d474:	ea44 0300 	orr.w	r3, r4, r0
 800d478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d47c:	ea45 0301 	orr.w	r3, r5, r1
 800d480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d484:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800d488:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800d48c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800d490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d494:	1c9a      	adds	r2, r3, #2
 800d496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d49a:	4413      	add	r3, r2
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	f04f 0000 	mov.w	r0, #0
 800d4a8:	f04f 0100 	mov.w	r1, #0
 800d4ac:	0419      	lsls	r1, r3, #16
 800d4ae:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800d4b2:	0410      	lsls	r0, r2, #16
 800d4b4:	ea44 0300 	orr.w	r3, r4, r0
 800d4b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4ba:	ea45 0301 	orr.w	r3, r5, r1
 800d4be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d4c0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d4c4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800d4c8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d0:	1cda      	adds	r2, r3, #3
 800d4d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d4d6:	4413      	add	r3, r2
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	f04f 0300 	mov.w	r3, #0
 800d4e0:	0a14      	lsrs	r4, r2, #8
 800d4e2:	677c      	str	r4, [r7, #116]	; 0x74
 800d4e4:	0613      	lsls	r3, r2, #24
 800d4e6:	673b      	str	r3, [r7, #112]	; 0x70
 800d4e8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800d4ec:	4623      	mov	r3, r4
 800d4ee:	4303      	orrs	r3, r0
 800d4f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4f2:	462b      	mov	r3, r5
 800d4f4:	430b      	orrs	r3, r1
 800d4f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4f8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d4fc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800d500:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800d504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d508:	1d1a      	adds	r2, r3, #4
 800d50a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d50e:	4413      	add	r3, r2
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	b2da      	uxtb	r2, r3
 800d514:	f04f 0300 	mov.w	r3, #0
 800d518:	f04f 0000 	mov.w	r0, #0
 800d51c:	f04f 0100 	mov.w	r1, #0
 800d520:	0011      	movs	r1, r2
 800d522:	2000      	movs	r0, #0
 800d524:	ea44 0300 	orr.w	r3, r4, r0
 800d528:	663b      	str	r3, [r7, #96]	; 0x60
 800d52a:	ea45 0301 	orr.w	r3, r5, r1
 800d52e:	667b      	str	r3, [r7, #100]	; 0x64
 800d530:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d534:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800d538:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800d53c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d540:	1d5a      	adds	r2, r3, #5
 800d542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d546:	4413      	add	r3, r2
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	f04f 0300 	mov.w	r3, #0
 800d550:	f04f 0000 	mov.w	r0, #0
 800d554:	f04f 0100 	mov.w	r1, #0
 800d558:	0211      	lsls	r1, r2, #8
 800d55a:	2000      	movs	r0, #0
 800d55c:	ea44 0300 	orr.w	r3, r4, r0
 800d560:	65bb      	str	r3, [r7, #88]	; 0x58
 800d562:	ea45 0301 	orr.w	r3, r5, r1
 800d566:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d568:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d56c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800d570:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800d574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d578:	1d9a      	adds	r2, r3, #6
 800d57a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d57e:	4413      	add	r3, r2
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	b2da      	uxtb	r2, r3
 800d584:	f04f 0300 	mov.w	r3, #0
 800d588:	f04f 0000 	mov.w	r0, #0
 800d58c:	f04f 0100 	mov.w	r1, #0
 800d590:	0411      	lsls	r1, r2, #16
 800d592:	2000      	movs	r0, #0
 800d594:	ea44 0300 	orr.w	r3, r4, r0
 800d598:	653b      	str	r3, [r7, #80]	; 0x50
 800d59a:	ea45 0301 	orr.w	r3, r5, r1
 800d59e:	657b      	str	r3, [r7, #84]	; 0x54
 800d5a0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d5a4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800d5a8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800d5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5b0:	1dda      	adds	r2, r3, #7
 800d5b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d5b6:	4413      	add	r3, r2
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	f04f 0300 	mov.w	r3, #0
 800d5c0:	f04f 0000 	mov.w	r0, #0
 800d5c4:	f04f 0100 	mov.w	r1, #0
 800d5c8:	0611      	lsls	r1, r2, #24
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	ea44 0300 	orr.w	r3, r4, r0
 800d5d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5d2:	ea45 0301 	orr.w	r3, r5, r1
 800d5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5d8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d5dc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 800d5e0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d5e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d5e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800d5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5f0:	3308      	adds	r3, #8
 800d5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800d5f6:	f04f 0200 	mov.w	r2, #0
 800d5fa:	f04f 0300 	mov.w	r3, #0
 800d5fe:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800d602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d606:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d60a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d60e:	4413      	add	r3, r2
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b2da      	uxtb	r2, r3
 800d614:	f04f 0300 	mov.w	r3, #0
 800d618:	ea40 0402 	orr.w	r4, r0, r2
 800d61c:	643c      	str	r4, [r7, #64]	; 0x40
 800d61e:	430b      	orrs	r3, r1
 800d620:	647b      	str	r3, [r7, #68]	; 0x44
 800d622:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d626:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800d62a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800d62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d638:	4413      	add	r3, r2
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	b2da      	uxtb	r2, r3
 800d63e:	f04f 0300 	mov.w	r3, #0
 800d642:	f04f 0000 	mov.w	r0, #0
 800d646:	f04f 0100 	mov.w	r1, #0
 800d64a:	0219      	lsls	r1, r3, #8
 800d64c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d650:	0210      	lsls	r0, r2, #8
 800d652:	ea44 0300 	orr.w	r3, r4, r0
 800d656:	63bb      	str	r3, [r7, #56]	; 0x38
 800d658:	ea45 0301 	orr.w	r3, r5, r1
 800d65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d65e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d662:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800d666:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800d66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d66e:	1c9a      	adds	r2, r3, #2
 800d670:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d674:	4413      	add	r3, r2
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	f04f 0300 	mov.w	r3, #0
 800d67e:	f04f 0000 	mov.w	r0, #0
 800d682:	f04f 0100 	mov.w	r1, #0
 800d686:	0419      	lsls	r1, r3, #16
 800d688:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800d68c:	0410      	lsls	r0, r2, #16
 800d68e:	ea44 0300 	orr.w	r3, r4, r0
 800d692:	633b      	str	r3, [r7, #48]	; 0x30
 800d694:	ea45 0301 	orr.w	r3, r5, r1
 800d698:	637b      	str	r3, [r7, #52]	; 0x34
 800d69a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d69e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800d6a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6aa:	1cda      	adds	r2, r3, #3
 800d6ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d6b0:	4413      	add	r3, r2
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	f04f 0300 	mov.w	r3, #0
 800d6ba:	0a14      	lsrs	r4, r2, #8
 800d6bc:	62fc      	str	r4, [r7, #44]	; 0x2c
 800d6be:	0613      	lsls	r3, r2, #24
 800d6c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6c2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d6c6:	4623      	mov	r3, r4
 800d6c8:	4303      	orrs	r3, r0
 800d6ca:	623b      	str	r3, [r7, #32]
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	430b      	orrs	r3, r1
 800d6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d6d6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800d6da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6e2:	3304      	adds	r3, #4
 800d6e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d6e8:	4413      	add	r3, r2
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b2dc      	uxtb	r4, r3
 800d6ee:	f04f 0500 	mov.w	r5, #0
 800d6f2:	f04f 0200 	mov.w	r2, #0
 800d6f6:	f04f 0300 	mov.w	r3, #0
 800d6fa:	0023      	movs	r3, r4
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	ea40 0402 	orr.w	r4, r0, r2
 800d702:	61bc      	str	r4, [r7, #24]
 800d704:	430b      	orrs	r3, r1
 800d706:	61fb      	str	r3, [r7, #28]
 800d708:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d70c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800d710:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d718:	3305      	adds	r3, #5
 800d71a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d71e:	4413      	add	r3, r2
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	b2dc      	uxtb	r4, r3
 800d724:	f04f 0500 	mov.w	r5, #0
 800d728:	f04f 0200 	mov.w	r2, #0
 800d72c:	f04f 0300 	mov.w	r3, #0
 800d730:	0223      	lsls	r3, r4, #8
 800d732:	2200      	movs	r2, #0
 800d734:	ea40 0402 	orr.w	r4, r0, r2
 800d738:	613c      	str	r4, [r7, #16]
 800d73a:	430b      	orrs	r3, r1
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d742:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800d746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d74e:	3306      	adds	r3, #6
 800d750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d754:	4413      	add	r3, r2
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	b2dc      	uxtb	r4, r3
 800d75a:	f04f 0500 	mov.w	r5, #0
 800d75e:	f04f 0200 	mov.w	r2, #0
 800d762:	f04f 0300 	mov.w	r3, #0
 800d766:	0423      	lsls	r3, r4, #16
 800d768:	2200      	movs	r2, #0
 800d76a:	ea40 0402 	orr.w	r4, r0, r2
 800d76e:	60bc      	str	r4, [r7, #8]
 800d770:	430b      	orrs	r3, r1
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d778:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800d77c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d784:	3307      	adds	r3, #7
 800d786:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d78a:	4413      	add	r3, r2
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	b2dc      	uxtb	r4, r3
 800d790:	f04f 0500 	mov.w	r5, #0
 800d794:	f04f 0200 	mov.w	r2, #0
 800d798:	f04f 0300 	mov.w	r3, #0
 800d79c:	0623      	lsls	r3, r4, #24
 800d79e:	2200      	movs	r2, #0
 800d7a0:	ea40 0402 	orr.w	r4, r0, r2
 800d7a4:	603c      	str	r4, [r7, #0]
 800d7a6:	430b      	orrs	r3, r1
 800d7a8:	607b      	str	r3, [r7, #4]
 800d7aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d7ae:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 800d7b2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d7b6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800d7ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800d7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 800d7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	37ec      	adds	r7, #236	; 0xec
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d7d6:	4770      	bx	lr

0800d7d8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	4b03      	ldr	r3, [pc, #12]	; (800d7f0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	0800f48c 	.word	0x0800f48c

0800d7f4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	4b03      	ldr	r3, [pc, #12]	; (800d80c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800d7fe:	4618      	mov	r0, r3
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	0800f4a4 	.word	0x0800f4a4

0800d810 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fc fd14 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800d820:	4a08      	ldr	r2, [pc, #32]	; (800d844 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	601a      	str	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3308      	adds	r3, #8
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff fb5c 	bl	800cee8 <_ZN13geometry_msgs7Vector3C1Ev>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	3328      	adds	r3, #40	; 0x28
 800d834:	4618      	mov	r0, r3
 800d836:	f7ff fb57 	bl	800cee8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	0800f6fc 	.word	0x0800f6fc

0800d848 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f103 0008 	add.w	r0, r3, #8
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	4413      	add	r3, r2
 800d862:	4619      	mov	r1, r3
 800d864:	f7ff fb68 	bl	800cf38 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800d868:	4602      	mov	r2, r0
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	4413      	add	r3, r2
 800d86e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	4413      	add	r3, r2
 800d87c:	4619      	mov	r1, r3
 800d87e:	f7ff fb5b 	bl	800cf38 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800d882:	4602      	mov	r2, r0
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4413      	add	r3, r2
 800d888:	60fb      	str	r3, [r7, #12]
      return offset;
 800d88a:	68fb      	ldr	r3, [r7, #12]
    }
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f103 0008 	add.w	r0, r3, #8
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	f7ff fcb5 	bl	800d21e <_ZN13geometry_msgs7Vector311deserializeEPh>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7ff fca8 	bl	800d21e <_ZN13geometry_msgs7Vector311deserializeEPh>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]
     return offset;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
    }
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	4b03      	ldr	r3, [pc, #12]	; (800d8f8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	370c      	adds	r7, #12
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	0800f4c8 	.word	0x0800f4c8

0800d8fc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	4b03      	ldr	r3, [pc, #12]	; (800d914 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800d906:	4618      	mov	r0, r3
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	0800f4dc 	.word	0x0800f4dc

0800d918 <_ZN13geometry_msgs12TwistStampedC1Ev>:
      typedef std_msgs::Header _header_type;
      _header_type header;
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;

    TwistStamped():
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
      header(),
      twist()
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fc fc90 	bl	800a248 <_ZN3ros3MsgC1Ev>
 800d928:	4a08      	ldr	r2, [pc, #32]	; (800d94c <_ZN13geometry_msgs12TwistStampedC1Ev+0x34>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3304      	adds	r3, #4
 800d932:	4618      	mov	r0, r3
 800d934:	f7fd fd00 	bl	800b338 <_ZN8std_msgs6HeaderC1Ev>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3318      	adds	r3, #24
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff ff67 	bl	800d810 <_ZN13geometry_msgs5TwistC1Ev>
    {
    }
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4618      	mov	r0, r3
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	0800f6e4 	.word	0x0800f6e4

0800d950 <_ZNK13geometry_msgs12TwistStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	1d18      	adds	r0, r3, #4
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	4413      	add	r3, r2
 800d968:	4619      	mov	r1, r3
 800d96a:	f7fd fd05 	bl	800b378 <_ZNK8std_msgs6Header9serializeEPh>
 800d96e:	4602      	mov	r2, r0
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4413      	add	r3, r2
 800d974:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f103 0018 	add.w	r0, r3, #24
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	4413      	add	r3, r2
 800d982:	4619      	mov	r1, r3
 800d984:	f7ff ff60 	bl	800d848 <_ZNK13geometry_msgs5Twist9serializeEPh>
 800d988:	4602      	mov	r2, r0
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	4413      	add	r3, r2
 800d98e:	60fb      	str	r3, [r7, #12]
      return offset;
 800d990:	68fb      	ldr	r3, [r7, #12]
    }
 800d992:	4618      	mov	r0, r3
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <_ZN13geometry_msgs12TwistStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b084      	sub	sp, #16
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	1d18      	adds	r0, r3, #4
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	f7fd fd78 	bl	800b4a8 <_ZN8std_msgs6Header11deserializeEPh>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	4413      	add	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f103 0018 	add.w	r0, r3, #24
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	683a      	ldr	r2, [r7, #0]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	f7ff ff61 	bl	800d894 <_ZN13geometry_msgs5Twist11deserializeEPh>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	60fb      	str	r3, [r7, #12]
     return offset;
 800d9da:	68fb      	ldr	r3, [r7, #12]
    }
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <_ZN13geometry_msgs12TwistStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistStamped"; };
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	4b03      	ldr	r3, [pc, #12]	; (800d9fc <_ZN13geometry_msgs12TwistStamped7getTypeEv+0x18>)
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	0800f500 	.word	0x0800f500

0800da00 <_ZN13geometry_msgs12TwistStamped6getMD5Ev>:
    const char * getMD5(){ return "98d34b0043a2093cf9d9345ab6eef12e"; };
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	4b03      	ldr	r3, [pc, #12]	; (800da18 <_ZN13geometry_msgs12TwistStamped6getMD5Ev+0x18>)
 800da0a:	4618      	mov	r0, r3
 800da0c:	370c      	adds	r7, #12
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	0800f51c 	.word	0x0800f51c

0800da1c <HAL_UART_TxCpltCallback>:
void initJointStates(void);
void publishOdom(void);
void publishJointStates(void);
void publishBatteryMsg(void);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
//	SEGGER_SYSVIEW_RecordEnterISR();
//	UBaseType_t uxSavedInterruptStatus;
//	taskENTER_CRITICAL_FROM_ISR();
	nh.getHardware()->flush();
 800da24:	4805      	ldr	r0, [pc, #20]	; (800da3c <HAL_UART_TxCpltCallback+0x20>)
 800da26:	f000 fb13 	bl	800e050 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE11getHardwareEv>
 800da2a:	4603      	mov	r3, r0
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7fd faef 	bl	800b010 <_ZN13STM32Hardware5flushEv>
//	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
//	SEGGER_SYSVIEW_RecordExitISR();
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20001648 	.word	0x20001648

0800da40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
//	SEGGER_SYSVIEW_RecordEnterISR();
//	UBaseType_t uxSavedInterruptStatus;
//	taskENTER_CRITICAL_FROM_ISR();
	nh.getHardware()->reset_rbuf();
 800da48:	4805      	ldr	r0, [pc, #20]	; (800da60 <HAL_UART_RxCpltCallback+0x20>)
 800da4a:	f000 fb01 	bl	800e050 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE11getHardwareEv>
 800da4e:	4603      	mov	r3, r0
 800da50:	4618      	mov	r0, r3
 800da52:	f7fd faa0 	bl	800af96 <_ZN13STM32Hardware10reset_rbufEv>
//	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
//	SEGGER_SYSVIEW_RecordExitISR();
}
 800da56:	bf00      	nop
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20001648 	.word	0x20001648

0800da64 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
	float cmd_lin_vel = 0;
 800da6c:	f04f 0300 	mov.w	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
	float cmd_ang_vel = 0;
 800da72:	f04f 0300 	mov.w	r3, #0
 800da76:	60bb      	str	r3, [r7, #8]

//	SEGGER_SYSVIEW_PrintfHost("Subscribe cmd_vel");
	cmd_lin_vel = cmd_vel_msg.linear.x;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da7e:	4610      	mov	r0, r2
 800da80:	4619      	mov	r1, r3
 800da82:	f7f2 fd69 	bl	8000558 <__aeabi_d2f>
 800da86:	4603      	mov	r3, r0
 800da88:	60fb      	str	r3, [r7, #12]
	cmd_ang_vel = cmd_vel_msg.angular.z;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800da90:	4610      	mov	r0, r2
 800da92:	4619      	mov	r1, r3
 800da94:	f7f2 fd60 	bl	8000558 <__aeabi_d2f>
 800da98:	4603      	mov	r3, r0
 800da9a:	60bb      	str	r3, [r7, #8]
	dif_drive_controller.set_cmd_vel(cmd_lin_vel, cmd_ang_vel);
 800da9c:	edd7 0a02 	vldr	s1, [r7, #8]
 800daa0:	ed97 0a03 	vldr	s0, [r7, #12]
 800daa4:	4803      	ldr	r0, [pc, #12]	; (800dab4 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x50>)
 800daa6:	f7fc f8e5 	bl	8009c74 <_ZN27DifferentialDriveController11set_cmd_velEff>
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	200015ec 	.word	0x200015ec

0800dab8 <_Z13resetCallbackRKN8std_msgs5EmptyE>:

void resetCallback(const std_msgs::Empty& reset_msg)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	static uint16_t cnt_reset = 0;
	cnt_reset ++;
 800dac0:	4b06      	ldr	r3, [pc, #24]	; (800dadc <_Z13resetCallbackRKN8std_msgs5EmptyE+0x24>)
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	3301      	adds	r3, #1
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	4b04      	ldr	r3, [pc, #16]	; (800dadc <_Z13resetCallbackRKN8std_msgs5EmptyE+0x24>)
 800daca:	801a      	strh	r2, [r3, #0]
	dif_drive_controller.reset();
 800dacc:	4804      	ldr	r0, [pc, #16]	; (800dae0 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x28>)
 800dace:	f7fc f888 	bl	8009be2 <_ZN27DifferentialDriveController5resetEv>

}
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200022b8 	.word	0x200022b8
 800dae0:	200015ec 	.word	0x200015ec

0800dae4 <init_rosserial>:

void init_rosserial(void)
{
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af02      	add	r7, sp, #8
	if (xTaskCreate(RosSerialTask, "RosSerialTask", 256, NULL, tskIDLE_PRIORITY+3, &rosserialTaskHandle) != pdPASS)
 800daea:	4b17      	ldr	r3, [pc, #92]	; (800db48 <init_rosserial+0x64>)
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	2303      	movs	r3, #3
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	2300      	movs	r3, #0
 800daf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800daf8:	4914      	ldr	r1, [pc, #80]	; (800db4c <init_rosserial+0x68>)
 800dafa:	4815      	ldr	r0, [pc, #84]	; (800db50 <init_rosserial+0x6c>)
 800dafc:	f7f9 fe8e 	bl	800781c <xTaskCreate>
 800db00:	4603      	mov	r3, r0
 800db02:	2b01      	cmp	r3, #1
 800db04:	bf14      	ite	ne
 800db06:	2301      	movne	r3, #1
 800db08:	2300      	moveq	r3, #0
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d000      	beq.n	800db12 <init_rosserial+0x2e>
	{
		while(1);
 800db10:	e7fe      	b.n	800db10 <init_rosserial+0x2c>
	}
	repeatRosserialHandle = xTimerCreate("RosserialRepeatTimer", TPauseRosSerial/portTICK_PERIOD_MS, pdTRUE, NULL, repeatRosserialCallBack);
 800db12:	4b10      	ldr	r3, [pc, #64]	; (800db54 <init_rosserial+0x70>)
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	2300      	movs	r3, #0
 800db18:	2201      	movs	r2, #1
 800db1a:	2108      	movs	r1, #8
 800db1c:	480e      	ldr	r0, [pc, #56]	; (800db58 <init_rosserial+0x74>)
 800db1e:	f7fa fdb5 	bl	800868c <xTimerCreate>
 800db22:	4603      	mov	r3, r0
 800db24:	4a0d      	ldr	r2, [pc, #52]	; (800db5c <init_rosserial+0x78>)
 800db26:	6013      	str	r3, [r2, #0]
	assert_param(repeatRosserialHandle != NULL);
	xTimerStart(repeatRosserialHandle, 0);
 800db28:	4b0c      	ldr	r3, [pc, #48]	; (800db5c <init_rosserial+0x78>)
 800db2a:	681c      	ldr	r4, [r3, #0]
 800db2c:	f7fa f8a0 	bl	8007c70 <xTaskGetTickCount>
 800db30:	4602      	mov	r2, r0
 800db32:	2300      	movs	r3, #0
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	2300      	movs	r3, #0
 800db38:	2101      	movs	r1, #1
 800db3a:	4620      	mov	r0, r4
 800db3c:	f7fa fdf6 	bl	800872c <xTimerGenericCommand>
//	{
//		while(1);
//	}
//	odomQueue = xQueueCreate(3, sizeof(odom_t));
//	assert_param(odomQueue != NULL);
}
 800db40:	bf00      	nop
 800db42:	3704      	adds	r7, #4
 800db44:	46bd      	mov	sp, r7
 800db46:	bd90      	pop	{r4, r7, pc}
 800db48:	20002298 	.word	0x20002298
 800db4c:	0800f540 	.word	0x0800f540
 800db50:	0800db61 	.word	0x0800db61
 800db54:	0800ddd5 	.word	0x0800ddd5
 800db58:	0800f550 	.word	0x0800f550
 800db5c:	2000229c 	.word	0x2000229c

0800db60 <_Z13RosSerialTaskPv>:

void RosSerialTask(void * argument)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;

	nh.initNode();
 800db68:	4826      	ldr	r0, [pc, #152]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db6a:	f000 fa7d 	bl	800e068 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8initNodeEv>
	nh.subscribe(cmd_vel_sub);
 800db6e:	4926      	ldr	r1, [pc, #152]	; (800dc08 <_Z13RosSerialTaskPv+0xa8>)
 800db70:	4824      	ldr	r0, [pc, #144]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db72:	f000 fa96 	bl	800e0a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	nh.subscribe(reset_sub);
 800db76:	4925      	ldr	r1, [pc, #148]	; (800dc0c <_Z13RosSerialTaskPv+0xac>)
 800db78:	4822      	ldr	r0, [pc, #136]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db7a:	f000 fabf 	bl	800e0fc <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_>

//	nh.advertise(odom_header_pub);
	nh.advertise(odom_pose_pub);
 800db7e:	4924      	ldr	r1, [pc, #144]	; (800dc10 <_Z13RosSerialTaskPv+0xb0>)
 800db80:	4820      	ldr	r0, [pc, #128]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db82:	f000 fae8 	bl	800e156 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(odom_velocity_pub);
 800db86:	4923      	ldr	r1, [pc, #140]	; (800dc14 <_Z13RosSerialTaskPv+0xb4>)
 800db88:	481e      	ldr	r0, [pc, #120]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db8a:	f000 fae4 	bl	800e156 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(joint_states_pub);
 800db8e:	4922      	ldr	r1, [pc, #136]	; (800dc18 <_Z13RosSerialTaskPv+0xb8>)
 800db90:	481c      	ldr	r0, [pc, #112]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db92:	f000 fae0 	bl	800e156 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE>
//	nh.advertise(battery_msg_pub);
	nh.advertise(battery_vol_pub);
 800db96:	4921      	ldr	r1, [pc, #132]	; (800dc1c <_Z13RosSerialTaskPv+0xbc>)
 800db98:	481a      	ldr	r0, [pc, #104]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800db9a:	f000 fadc 	bl	800e156 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE>
	initJointStates();
 800db9e:	f000 f8f9 	bl	800dd94 <_Z15initJointStatesv>
	nh.loginfo("stmCR node init done.");
 800dba2:	491f      	ldr	r1, [pc, #124]	; (800dc20 <_Z13RosSerialTaskPv+0xc0>)
 800dba4:	4817      	ldr	r0, [pc, #92]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800dba6:	f000 fb06 	bl	800e1b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7loginfoEPKc>
	nh.spinOnce();
 800dbaa:	4816      	ldr	r0, [pc, #88]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800dbac:	f000 fb11 	bl	800e1d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv>

	for (;;)
	{
		if (ulTaskNotifyTake(pdFALSE, 2 * TPauseRosSerial / portTICK_PERIOD_MS) != 0)
 800dbb0:	2110      	movs	r1, #16
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	f7fa fbf8 	bl	80083a8 <ulTaskNotifyTake>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bf14      	ite	ne
 800dbbe:	2301      	movne	r3, #1
 800dbc0:	2300      	moveq	r3, #0
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d01c      	beq.n	800dc02 <_Z13RosSerialTaskPv+0xa2>
		{
			publishOdom();
 800dbc8:	f000 f82e 	bl	800dc28 <_Z11publishOdomv>
			// JointStatesは、DivisionPubJointStatesで分周した周期でPublish
			if (cnt % DivisionPubJointStates == 0)
 800dbcc:	4b15      	ldr	r3, [pc, #84]	; (800dc24 <_Z13RosSerialTaskPv+0xc4>)
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	f003 0303 	and.w	r3, r3, #3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d101      	bne.n	800dbdc <_Z13RosSerialTaskPv+0x7c>
			{
				publishJointStates();
 800dbd8:	f000 f894 	bl	800dd04 <_Z18publishJointStatesv>
			}
			if ((cnt+1) % DivisionBatteryMsg == 0)
 800dbdc:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <_Z13RosSerialTaskPv+0xc4>)
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	f003 0307 	and.w	r3, r3, #7
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d101      	bne.n	800dbee <_Z13RosSerialTaskPv+0x8e>
			{
				publishBatteryMsg();
 800dbea:	f000 f8c1 	bl	800dd70 <_Z17publishBatteryMsgv>
			}
			nh.spinOnce();
 800dbee:	4805      	ldr	r0, [pc, #20]	; (800dc04 <_Z13RosSerialTaskPv+0xa4>)
 800dbf0:	f000 faef 	bl	800e1d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv>
			cnt++;
 800dbf4:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <_Z13RosSerialTaskPv+0xc4>)
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	4b09      	ldr	r3, [pc, #36]	; (800dc24 <_Z13RosSerialTaskPv+0xc4>)
 800dbfe:	801a      	strh	r2, [r3, #0]
 800dc00:	e7d6      	b.n	800dbb0 <_Z13RosSerialTaskPv+0x50>
		}
		else
		{
			while(1);
 800dc02:	e7fe      	b.n	800dc02 <_Z13RosSerialTaskPv+0xa2>
 800dc04:	20001648 	.word	0x20001648
 800dc08:	20002220 	.word	0x20002220
 800dc0c:	20002280 	.word	0x20002280
 800dc10:	20002108 	.word	0x20002108
 800dc14:	20002180 	.word	0x20002180
 800dc18:	200021f0 	.word	0x200021f0
 800dc1c:	2000220c 	.word	0x2000220c
 800dc20:	0800f568 	.word	0x0800f568
 800dc24:	200022ba 	.word	0x200022ba

0800dc28 <_Z11publishOdomv>:
	}

}

void publishOdom(void)
{
 800dc28:	b5b0      	push	{r4, r5, r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
	odom = dif_drive_controller.odom;
 800dc2e:	4a2d      	ldr	r2, [pc, #180]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dc30:	4b2d      	ldr	r3, [pc, #180]	; (800dce8 <_Z11publishOdomv+0xc0>)
 800dc32:	4615      	mov	r5, r2
 800dc34:	f103 041c 	add.w	r4, r3, #28
 800dc38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dc40:	e885 0003 	stmia.w	r5, {r0, r1}
	odom_pose2D.x = odom.position.x;
 800dc44:	4b27      	ldr	r3, [pc, #156]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7f2 fc2d 	bl	80004a8 <__aeabi_f2d>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4926      	ldr	r1, [pc, #152]	; (800dcec <_Z11publishOdomv+0xc4>)
 800dc54:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odom_pose2D.y = odom.position.y;
 800dc58:	4b22      	ldr	r3, [pc, #136]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f2 fc23 	bl	80004a8 <__aeabi_f2d>
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	4921      	ldr	r1, [pc, #132]	; (800dcec <_Z11publishOdomv+0xc4>)
 800dc68:	e9c1 2304 	strd	r2, r3, [r1, #16]
	odom_pose2D.theta = odom.position.theta;
 800dc6c:	4b1d      	ldr	r3, [pc, #116]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7f2 fc19 	bl	80004a8 <__aeabi_f2d>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	491c      	ldr	r1, [pc, #112]	; (800dcec <_Z11publishOdomv+0xc4>)
 800dc7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	odom_velocity.header.stamp = nh.get_ros_time(odom.time_stamp);
 800dc80:	4b18      	ldr	r3, [pc, #96]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dc82:	695a      	ldr	r2, [r3, #20]
 800dc84:	4c1a      	ldr	r4, [pc, #104]	; (800dcf0 <_Z11publishOdomv+0xc8>)
 800dc86:	463b      	mov	r3, r7
 800dc88:	491a      	ldr	r1, [pc, #104]	; (800dcf4 <_Z11publishOdomv+0xcc>)
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fc94 	bl	800e5b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE12get_ros_timeEm>
 800dc90:	f104 030c 	add.w	r3, r4, #12
 800dc94:	463a      	mov	r2, r7
 800dc96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc9a:	e883 0003 	stmia.w	r3, {r0, r1}
	odom_velocity.header.frame_id = OdomHeaderFrameID;
 800dc9e:	4b14      	ldr	r3, [pc, #80]	; (800dcf0 <_Z11publishOdomv+0xc8>)
 800dca0:	4a15      	ldr	r2, [pc, #84]	; (800dcf8 <_Z11publishOdomv+0xd0>)
 800dca2:	615a      	str	r2, [r3, #20]
	odom_velocity.twist.linear.x = odom.velocity.lin;
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f2 fbfd 	bl	80004a8 <__aeabi_f2d>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	490f      	ldr	r1, [pc, #60]	; (800dcf0 <_Z11publishOdomv+0xc8>)
 800dcb4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	odom_velocity.twist.angular.z = odom.velocity.ang;
 800dcb8:	4b0a      	ldr	r3, [pc, #40]	; (800dce4 <_Z11publishOdomv+0xbc>)
 800dcba:	691b      	ldr	r3, [r3, #16]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f2 fbf3 	bl	80004a8 <__aeabi_f2d>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	490a      	ldr	r1, [pc, #40]	; (800dcf0 <_Z11publishOdomv+0xc8>)
 800dcc8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
//	odom_header_pub.publish(&odom_header);
	odom_pose_pub.publish(&odom_pose2D);
 800dccc:	4907      	ldr	r1, [pc, #28]	; (800dcec <_Z11publishOdomv+0xc4>)
 800dcce:	480b      	ldr	r0, [pc, #44]	; (800dcfc <_Z11publishOdomv+0xd4>)
 800dcd0:	f7fd f907 	bl	800aee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	odom_velocity_pub.publish(&odom_velocity);
 800dcd4:	4906      	ldr	r1, [pc, #24]	; (800dcf0 <_Z11publishOdomv+0xc8>)
 800dcd6:	480a      	ldr	r0, [pc, #40]	; (800dd00 <_Z11publishOdomv+0xd8>)
 800dcd8:	f7fd f903 	bl	800aee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bdb0      	pop	{r4, r5, r7, pc}
 800dce4:	200022a0 	.word	0x200022a0
 800dce8:	200015ec 	.word	0x200015ec
 800dcec:	200020e8 	.word	0x200020e8
 800dcf0:	20002120 	.word	0x20002120
 800dcf4:	20001648 	.word	0x20001648
 800dcf8:	0800f580 	.word	0x0800f580
 800dcfc:	20002108 	.word	0x20002108
 800dd00:	20002180 	.word	0x20002180

0800dd04 <_Z18publishJointStatesv>:

void publishJointStates(void)
{
 800dd04:	b590      	push	{r4, r7, lr}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
	static double joint_states_pos[WHEEL_NUM] = {0.0, 0.0};
	static double joint_states_vel[WHEEL_NUM] = {0.0, 0.0};
	joint_states.header.stamp = nh.get_ros_time(odom.time_stamp);
 800dd0a:	4b12      	ldr	r3, [pc, #72]	; (800dd54 <_Z18publishJointStatesv+0x50>)
 800dd0c:	695a      	ldr	r2, [r3, #20]
 800dd0e:	4c12      	ldr	r4, [pc, #72]	; (800dd58 <_Z18publishJointStatesv+0x54>)
 800dd10:	463b      	mov	r3, r7
 800dd12:	4912      	ldr	r1, [pc, #72]	; (800dd5c <_Z18publishJointStatesv+0x58>)
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 fc4f 	bl	800e5b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE12get_ros_timeEm>
 800dd1a:	f104 030c 	add.w	r3, r4, #12
 800dd1e:	463a      	mov	r2, r7
 800dd20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd24:	e883 0003 	stmia.w	r3, {r0, r1}
	dif_drive_controller.get_wheel_angles(joint_states_pos);
 800dd28:	490d      	ldr	r1, [pc, #52]	; (800dd60 <_Z18publishJointStatesv+0x5c>)
 800dd2a:	480e      	ldr	r0, [pc, #56]	; (800dd64 <_Z18publishJointStatesv+0x60>)
 800dd2c:	f7fc f8d6 	bl	8009edc <_ZN27DifferentialDriveController16get_wheel_anglesEPd>
	dif_drive_controller.get_wheel_angle_velocities(joint_states_vel);
 800dd30:	490d      	ldr	r1, [pc, #52]	; (800dd68 <_Z18publishJointStatesv+0x64>)
 800dd32:	480c      	ldr	r0, [pc, #48]	; (800dd64 <_Z18publishJointStatesv+0x60>)
 800dd34:	f7fc f8f6 	bl	8009f24 <_ZN27DifferentialDriveController26get_wheel_angle_velocitiesEPd>
	joint_states.position = joint_states_pos;
 800dd38:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <_Z18publishJointStatesv+0x54>)
 800dd3a:	4a09      	ldr	r2, [pc, #36]	; (800dd60 <_Z18publishJointStatesv+0x5c>)
 800dd3c:	631a      	str	r2, [r3, #48]	; 0x30
	joint_states.velocity = joint_states_vel;
 800dd3e:	4b06      	ldr	r3, [pc, #24]	; (800dd58 <_Z18publishJointStatesv+0x54>)
 800dd40:	4a09      	ldr	r2, [pc, #36]	; (800dd68 <_Z18publishJointStatesv+0x64>)
 800dd42:	641a      	str	r2, [r3, #64]	; 0x40
	joint_states_pub.publish(&joint_states);
 800dd44:	4904      	ldr	r1, [pc, #16]	; (800dd58 <_Z18publishJointStatesv+0x54>)
 800dd46:	4809      	ldr	r0, [pc, #36]	; (800dd6c <_Z18publishJointStatesv+0x68>)
 800dd48:	f7fd f8cb 	bl	800aee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd90      	pop	{r4, r7, pc}
 800dd54:	200022a0 	.word	0x200022a0
 800dd58:	20002198 	.word	0x20002198
 800dd5c:	20001648 	.word	0x20001648
 800dd60:	200022c0 	.word	0x200022c0
 800dd64:	200015ec 	.word	0x200015ec
 800dd68:	200022d0 	.word	0x200022d0
 800dd6c:	200021f0 	.word	0x200021f0

0800dd70 <_Z17publishBatteryMsgv>:

void publishBatteryMsg(void)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	af00      	add	r7, sp, #0
	bat_voltage.data = battery_monitor.battery_voltage;
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <_Z17publishBatteryMsgv+0x18>)
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	4a04      	ldr	r2, [pc, #16]	; (800dd8c <_Z17publishBatteryMsgv+0x1c>)
 800dd7a:	6053      	str	r3, [r2, #4]
	battery_vol_pub.publish(&bat_voltage);
 800dd7c:	4903      	ldr	r1, [pc, #12]	; (800dd8c <_Z17publishBatteryMsgv+0x1c>)
 800dd7e:	4804      	ldr	r0, [pc, #16]	; (800dd90 <_Z17publishBatteryMsgv+0x20>)
 800dd80:	f7fd f8af 	bl	800aee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800dd84:	bf00      	nop
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20001630 	.word	0x20001630
 800dd8c:	20002204 	.word	0x20002204
 800dd90:	2000220c 	.word	0x2000220c

0800dd94 <_Z15initJointStatesv>:
//	battery_state_msg.percentage = battery_state.percentage;
//	battery_msg_pub.publish(&battery_state_msg);
//}

void initJointStates(void)
{
 800dd94:	b480      	push	{r7}
 800dd96:	af00      	add	r7, sp, #0
	static char *joint_states_name[] = {(char*)LeftWheelJointStateName, (char*)RightWheelJointStateName};

	joint_states.header.frame_id = JointStateFrameID;
 800dd98:	4b0b      	ldr	r3, [pc, #44]	; (800ddc8 <_Z15initJointStatesv+0x34>)
 800dd9a:	4a0c      	ldr	r2, [pc, #48]	; (800ddcc <_Z15initJointStatesv+0x38>)
 800dd9c:	615a      	str	r2, [r3, #20]
	joint_states.name            = joint_states_name;
 800dd9e:	4b0a      	ldr	r3, [pc, #40]	; (800ddc8 <_Z15initJointStatesv+0x34>)
 800dda0:	4a0b      	ldr	r2, [pc, #44]	; (800ddd0 <_Z15initJointStatesv+0x3c>)
 800dda2:	621a      	str	r2, [r3, #32]
	joint_states.name_length     = WHEEL_NUM;
 800dda4:	4b08      	ldr	r3, [pc, #32]	; (800ddc8 <_Z15initJointStatesv+0x34>)
 800dda6:	2202      	movs	r2, #2
 800dda8:	619a      	str	r2, [r3, #24]
	joint_states.position_length = WHEEL_NUM;
 800ddaa:	4b07      	ldr	r3, [pc, #28]	; (800ddc8 <_Z15initJointStatesv+0x34>)
 800ddac:	2202      	movs	r2, #2
 800ddae:	625a      	str	r2, [r3, #36]	; 0x24
	joint_states.velocity_length = WHEEL_NUM;
 800ddb0:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <_Z15initJointStatesv+0x34>)
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	635a      	str	r2, [r3, #52]	; 0x34
	joint_states.effort_length   = WHEEL_NUM;
 800ddb6:	4b04      	ldr	r3, [pc, #16]	; (800ddc8 <_Z15initJointStatesv+0x34>)
 800ddb8:	2202      	movs	r2, #2
 800ddba:	645a      	str	r2, [r3, #68]	; 0x44
}
 800ddbc:	bf00      	nop
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	20002198 	.word	0x20002198
 800ddcc:	0800f5b0 	.word	0x0800f5b0
 800ddd0:	20000038 	.word	0x20000038

0800ddd4 <_Z23repeatRosserialCallBackPv>:

void repeatRosserialCallBack(TimerHandle_t xTimer)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
	xTaskNotifyGive(rosserialTaskHandle);
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <_Z23repeatRosserialCallBackPv+0x20>)
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	2300      	movs	r3, #0
 800dde2:	2202      	movs	r2, #2
 800dde4:	2100      	movs	r1, #0
 800dde6:	f7fa fb27 	bl	8008438 <xTaskGenericNotify>
}
 800ddea:	bf00      	nop
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20002298 	.word	0x20002298

0800ddf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800de02:	2300      	movs	r3, #0
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b03      	cmp	r3, #3
 800de0a:	d80d      	bhi.n	800de28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	fa22 f103 	lsr.w	r1, r2, r3
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	b2ca      	uxtb	r2, r1
 800de1e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	3301      	adds	r3, #1
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e7ee      	b.n	800de06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800de28:	bf00      	nop
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d811      	bhi.n	800de72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	440a      	add	r2, r1
 800de58:	7812      	ldrb	r2, [r2, #0]
 800de5a:	4611      	mov	r1, r2
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	00d2      	lsls	r2, r2, #3
 800de60:	fa01 f202 	lsl.w	r2, r1, r2
 800de64:	431a      	orrs	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3301      	adds	r3, #1
 800de6e:	60fb      	str	r3, [r7, #12]
 800de70:	e7ea      	b.n	800de48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800de72:	bf00      	nop
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
	...

0800de80 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	4a04      	ldr	r2, [pc, #16]	; (800de9c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4618      	mov	r0, r3
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr
 800de9c:	0800f7bc 	.word	0x0800f7bc

0800dea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev>:
  int data;
  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff ffe8 	bl	800de80 <_ZN3ros15NodeHandleBase_C1Ev>
 800deb0:	4a3a      	ldr	r2, [pc, #232]	; (800df9c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0xfc>)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	3304      	adds	r3, #4
 800deba:	4618      	mov	r0, r3
 800debc:	f7fd f844 	bl	800af48 <_ZN13STM32HardwareC1Ev>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2a64 	strb.w	r2, [r3, #2660]	; 0xa64
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fc fd2e 	bl	800a930 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800ded4:	2300      	movs	r3, #0
 800ded6:	617b      	str	r3, [r7, #20]
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b07      	cmp	r3, #7
 800dedc:	d80b      	bhi.n	800def6 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	2200      	movs	r2, #0
 800deec:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	3301      	adds	r3, #1
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	e7f0      	b.n	800ded8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800def6:	2300      	movs	r3, #0
 800def8:	613b      	str	r3, [r7, #16]
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d80b      	bhi.n	800df18 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x78>
      subscribers[i] = 0;
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	2200      	movs	r2, #0
 800df0e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	3301      	adds	r3, #1
 800df14:	613b      	str	r3, [r7, #16]
 800df16:	e7f0      	b.n	800defa <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800df18:	2300      	movs	r3, #0
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2bff      	cmp	r3, #255	; 0xff
 800df20:	d80a      	bhi.n	800df38 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x98>
      message_in[i] = 0;
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4413      	add	r3, r2
 800df28:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800df2c:	2200      	movs	r2, #0
 800df2e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	3301      	adds	r3, #1
 800df34:	60fb      	str	r3, [r7, #12]
 800df36:	e7f1      	b.n	800df1c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x7c>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800df38:	2300      	movs	r3, #0
 800df3a:	60bb      	str	r3, [r7, #8]
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df42:	d20a      	bcs.n	800df5a <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0xba>
      message_out[i] = 0;
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	4413      	add	r3, r2
 800df4a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800df4e:	2200      	movs	r2, #0
 800df50:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	3301      	adds	r3, #1
 800df56:	60bb      	str	r3, [r7, #8]
 800df58:	e7f0      	b.n	800df3c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f8c3 2a7c 	str.w	r2, [r3, #2684]	; 0xa7c
    req_param_resp.ints = NULL;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
    req_param_resp.floats_length = 0;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
    req_param_resp.floats = NULL;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    req_param_resp.ints_length = 0;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f8c3 2a7c 	str.w	r2, [r3, #2684]	; 0xa7c
    req_param_resp.ints = NULL;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84

    spin_timeout_ = 0;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
  }
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	0800f6d0 	.word	0x0800f6d0

0800dfa0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	4a04      	ldr	r2, [pc, #16]	; (800dfbc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	370c      	adds	r7, #12
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	0800f7a4 	.word	0x0800f7a4

0800dfc0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
 800dfcc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7ff ffe5 	bl	800dfa0 <_ZN3ros11Subscriber_C1Ev>
 800dfd6:	4a0b      	ldr	r2, [pc, #44]	; (800e004 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	3310      	adds	r3, #16
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7ff fc15 	bl	800d810 <_ZN13geometry_msgs5TwistC1Ev>
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	659a      	str	r2, [r3, #88]	; 0x58
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	609a      	str	r2, [r3, #8]
  };
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	0800f6b8 	.word	0x0800f6b8

0800e008 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7ff ffc1 	bl	800dfa0 <_ZN3ros11Subscriber_C1Ev>
 800e01e:	4a0b      	ldr	r2, [pc, #44]	; (800e04c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	330c      	adds	r3, #12
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fd f93b 	bl	800b2a4 <_ZN8std_msgs5EmptyC1Ev>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	611a      	str	r2, [r3, #16]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	615a      	str	r2, [r3, #20]
    topic_ = topic_name;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	609a      	str	r2, [r3, #8]
  };
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	0800f6a0 	.word	0x0800f6a0

0800e050 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	3304      	adds	r3, #4
  }
 800e05c:	4618      	mov	r0, r3
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3304      	adds	r3, #4
 800e074:	4618      	mov	r0, r3
 800e076:	f7fc ff83 	bl	800af80 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
    bytes_ = 0;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8c3 2a54 	str.w	r2, [r3, #2644]	; 0xa54
    index_ = 0;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f8c3 2a5c 	str.w	r2, [r3, #2652]	; 0xa5c
    topic_ = 0;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f8c3 2a58 	str.w	r2, [r3, #2648]	; 0xa58
  };
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800e0a2:	b480      	push	{r7}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	dc1b      	bgt.n	800e0ee <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10e      	bne.n	800e0e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	605a      	str	r2, [r3, #4]
        return true;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e004      	b.n	800e0f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	e7e0      	b.n	800e0b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800e0ee:	2300      	movs	r3, #0
  }
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800e106:	2300      	movs	r3, #0
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	dc1b      	bgt.n	800e148 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0x4c>
      if (subscribers[i] == 0) // empty slot
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10e      	bne.n	800e140 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0x44>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800e122:	683a      	ldr	r2, [r7, #0]
 800e124:	6879      	ldr	r1, [r7, #4]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	440b      	add	r3, r1
 800e130:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	605a      	str	r2, [r3, #4]
        return true;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e004      	b.n	800e14a <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	3301      	adds	r3, #1
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	e7e0      	b.n	800e10a <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0xe>
    return false;
 800e148:	2300      	movs	r3, #0
  }
 800e14a:	4618      	mov	r0, r3
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800e156:	b480      	push	{r7}
 800e158:	b085      	sub	sp, #20
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800e160:	2300      	movs	r3, #0
 800e162:	60fb      	str	r3, [r7, #12]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b07      	cmp	r3, #7
 800e168:	dc1e      	bgt.n	800e1a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d111      	bne.n	800e1a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4413      	add	r3, r2
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f103 0266 	add.w	r2, r3, #102	; 0x66
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	60da      	str	r2, [r3, #12]
        return true;
 800e19c:	2301      	movs	r3, #1
 800e19e:	e004      	b.n	800e1aa <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	e7dd      	b.n	800e164 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800e1a8:	2300      	movs	r3, #0
  }
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	2101      	movs	r1, #1
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 fa2d 	bl	800e624 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE3logEcPKc>
  }
 800e1ca:	bf00      	nop
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b084      	sub	sp, #16
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	3304      	adds	r3, #4
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fc ffb9 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800e1e4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3a6c 	ldr.w	r3, [r3, #2668]	; 0xa6c
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d903      	bls.n	800e200 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2a64 	strb.w	r2, [r3, #2660]	; 0xa64
    if (mode_ != MODE_FIRST_FF)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e206:	2b00      	cmp	r3, #0
 800e208:	d009      	beq.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 3a70 	ldr.w	r3, [r3, #2672]	; 0xa70
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	429a      	cmp	r2, r3
 800e214:	d903      	bls.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
      if (spin_timeout_ > 0)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 800e224:	2b00      	cmp	r3, #0
 800e226:	d014      	beq.n	800e252 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fc ff92 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800e232:	4602      	mov	r2, r0
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	1ad2      	subs	r2, r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 800e23e:	429a      	cmp	r2, r3
 800e240:	bf8c      	ite	hi
 800e242:	2301      	movhi	r3, #1
 800e244:	2300      	movls	r3, #0
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d002      	beq.n	800e252 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800e24c:	f06f 0301 	mvn.w	r3, #1
 800e250:	e1ae      	b.n	800e5b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x3de>
      data = hardware_.read();
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3304      	adds	r3, #4
 800e256:	4618      	mov	r0, r3
 800e258:	f7fc feae 	bl	800afb8 <_ZN13STM32Hardware4readEv>
 800e25c:	4602      	mov	r2, r0
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8c3 2a4c 	str.w	r2, [r3, #2636]	; 0xa4c
      if (data < 0)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 3a4c 	ldr.w	r3, [r3, #2636]	; 0xa4c
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f2c0 8189 	blt.w	800e582 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x3b0>
      checksum_ += data;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 2a60 	ldr.w	r2, [r3, #2656]	; 0xa60
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 3a4c 	ldr.w	r3, [r3, #2636]	; 0xa4c
 800e27c:	441a      	add	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	d120      	bne.n	800e2d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0xfe>
        message_in[index_++] = data;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 3a5c 	ldr.w	r3, [r3, #2652]	; 0xa5c
 800e29a:	1c59      	adds	r1, r3, #1
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	f8c2 1a5c 	str.w	r1, [r2, #2652]	; 0xa5c
 800e2a2:	b2c1      	uxtb	r1, r0
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	460a      	mov	r2, r1
 800e2aa:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
        bytes_--;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 3a54 	ldr.w	r3, [r3, #2644]	; 0xa54
 800e2b4:	1e5a      	subs	r2, r3, #1
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8c3 2a54 	str.w	r2, [r3, #2644]	; 0xa54
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 3a54 	ldr.w	r3, [r3, #2644]	; 0xa54
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1ab      	bne.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2208      	movs	r2, #8
 800e2ca:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
 800e2ce:	e7a6      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d12b      	bne.n	800e332 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x160>
        if (data == 0xff)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 3a4c 	ldr.w	r3, [r3, #2636]	; 0xa4c
 800e2e0:	2bff      	cmp	r3, #255	; 0xff
 800e2e2:	d10d      	bne.n	800e300 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x12e>
          mode_++;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f103 0214 	add.w	r2, r3, #20
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8c3 2a70 	str.w	r2, [r3, #2672]	; 0xa70
 800e2fe:	e78e      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	3304      	adds	r3, #4
 800e304:	4618      	mov	r0, r3
 800e306:	f7fc ff26 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800e30a:	4602      	mov	r2, r0
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	f241 3288 	movw	r2, #5000	; 0x1388
 800e314:	4293      	cmp	r3, r2
 800e316:	bf8c      	ite	hi
 800e318:	2301      	movhi	r3, #1
 800e31a:	2300      	movls	r3, #0
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f43f af7d 	beq.w	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 2a64 	strb.w	r2, [r3, #2660]	; 0xa64
          return SPIN_TIMEOUT;
 800e32c:	f06f 0301 	mvn.w	r3, #1
 800e330:	e13e      	b.n	800e5b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x3de>
      else if (mode_ == MODE_PROTOCOL_VER)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d11a      	bne.n	800e372 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x1a0>
        if (data == PROTOCOL_VER)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 3a4c 	ldr.w	r3, [r3, #2636]	; 0xa4c
 800e342:	2bfe      	cmp	r3, #254	; 0xfe
 800e344:	d107      	bne.n	800e356 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x184>
          mode_++;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
 800e354:	e763      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
          if (configured_ == false)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 3a64 	ldrb.w	r3, [r3, #2660]	; 0xa64
 800e364:	2b00      	cmp	r3, #0
 800e366:	f47f af5a 	bne.w	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f976 	bl	800e65c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15requestSyncTimeEv>
 800e370:	e755      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e378:	2b02      	cmp	r3, #2
 800e37a:	d117      	bne.n	800e3ac <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x1da>
        bytes_ = data;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 2a4c 	ldr.w	r2, [r3, #2636]	; 0xa4c
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8c3 2a54 	str.w	r2, [r3, #2644]	; 0xa54
        index_ = 0;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f8c3 2a5c 	str.w	r2, [r3, #2652]	; 0xa5c
        mode_++;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
        checksum_ = data;               /* first byte for calculating size checksum */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 2a4c 	ldr.w	r2, [r3, #2636]	; 0xa4c
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
 800e3aa:	e738      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	d112      	bne.n	800e3dc <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x20a>
        bytes_ += data << 8;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 2a54 	ldr.w	r2, [r3, #2644]	; 0xa54
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 3a4c 	ldr.w	r3, [r3, #2636]	; 0xa4c
 800e3c2:	021b      	lsls	r3, r3, #8
 800e3c4:	441a      	add	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8c3 2a54 	str.w	r2, [r3, #2644]	; 0xa54
        mode_++;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
 800e3da:	e720      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e3e2:	2b04      	cmp	r3, #4
 800e3e4:	d116      	bne.n	800e414 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x242>
        if ((checksum_ % 256) == 255)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 3a60 	ldr.w	r3, [r3, #2656]	; 0xa60
 800e3ec:	425a      	negs	r2, r3
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	b2d2      	uxtb	r2, r2
 800e3f2:	bf58      	it	pl
 800e3f4:	4253      	negpl	r3, r2
 800e3f6:	2bff      	cmp	r3, #255	; 0xff
 800e3f8:	d107      	bne.n	800e40a <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x238>
          mode_++;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e400:	1c5a      	adds	r2, r3, #1
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
 800e408:	e709      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
 800e412:	e704      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e41a:	2b05      	cmp	r3, #5
 800e41c:	d113      	bne.n	800e446 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x274>
        topic_ = data;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 2a4c 	ldr.w	r2, [r3, #2636]	; 0xa4c
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8c3 2a58 	str.w	r2, [r3, #2648]	; 0xa58
        mode_++;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
        checksum_ = data;               /* first byte included in checksum */
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 2a4c 	ldr.w	r2, [r3, #2636]	; 0xa4c
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8c3 2a60 	str.w	r2, [r3, #2656]	; 0xa60
 800e444:	e6eb      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e44c:	2b06      	cmp	r3, #6
 800e44e:	d119      	bne.n	800e484 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x2b2>
        topic_ += data << 8;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	; 0xa58
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 3a4c 	ldr.w	r3, [r3, #2636]	; 0xa4c
 800e45c:	021b      	lsls	r3, r3, #8
 800e45e:	441a      	add	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8c3 2a58 	str.w	r2, [r3, #2648]	; 0xa58
        mode_ = MODE_MESSAGE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2207      	movs	r2, #7
 800e46a:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
        if (bytes_ == 0)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3a54 	ldr.w	r3, [r3, #2644]	; 0xa54
 800e474:	2b00      	cmp	r3, #0
 800e476:	f47f aed2 	bne.w	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2208      	movs	r2, #8
 800e47e:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
 800e482:	e6cc      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800e48a:	2b08      	cmp	r3, #8
 800e48c:	f47f aec7 	bne.w	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
        if ((checksum_ % 256) == 255)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 3a60 	ldr.w	r3, [r3, #2656]	; 0xa60
 800e49e:	425a      	negs	r2, r3
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	b2d2      	uxtb	r2, r2
 800e4a4:	bf58      	it	pl
 800e4a6:	4253      	negpl	r3, r2
 800e4a8:	2bff      	cmp	r3, #255	; 0xff
 800e4aa:	f47f aeb8 	bne.w	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d110      	bne.n	800e4da <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x308>
            requestSyncTime();
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f8cf 	bl	800e65c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f8ea 	bl	800e698 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	f8c3 2a68 	str.w	r2, [r3, #2664]	; 0xa68
            last_sync_receive_time = c_time;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	f8c3 2a6c 	str.w	r2, [r3, #2668]	; 0xa6c
            return SPIN_ERR;
 800e4d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4d8:	e06a      	b.n	800e5b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x3de>
          else if (topic_ == TopicInfo::ID_TIME)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e4e0:	2b0a      	cmp	r3, #10
 800e4e2:	d107      	bne.n	800e4f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x322>
            syncTime(message_in);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f9bb 	bl	800e868 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8syncTimeEPh>
 800e4f2:	e694      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e4fa:	2b06      	cmp	r3, #6
 800e4fc:	d10e      	bne.n	800e51c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x34a>
            req_param_resp.deserialize(message_in);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f603 2278 	addw	r2, r3, #2680	; 0xa78
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f203 5324 	addw	r3, r3, #1316	; 0x524
 800e50a:	4619      	mov	r1, r3
 800e50c:	4610      	mov	r0, r2
 800e50e:	f7fc fb44 	bl	800ab9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 2a74 	strb.w	r2, [r3, #2676]	; 0xa74
 800e51a:	e680      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e522:	2b0b      	cmp	r3, #11
 800e524:	d104      	bne.n	800e530 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x35e>
            configured_ = false;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 2a64 	strb.w	r2, [r3, #2660]	; 0xa64
 800e52e:	e676      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e536:	3b64      	subs	r3, #100	; 0x64
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f43f ae6a 	beq.w	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e550:	3b64      	subs	r3, #100	; 0x64
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	6858      	ldr	r0, [r3, #4]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	; 0xa58
 800e564:	3b64      	subs	r3, #100	; 0x64
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4413      	add	r3, r2
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	f202 5224 	addw	r2, r2, #1316	; 0x524
 800e57c:	4611      	mov	r1, r2
 800e57e:	4798      	blx	r3
      if (spin_timeout_ > 0)
 800e580:	e64d      	b.n	800e21e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x4c>
        break;
 800e582:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 3a64 	ldrb.w	r3, [r3, #2660]	; 0xa64
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00f      	beq.n	800e5ae <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x3dc>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 3a68 	ldr.w	r3, [r3, #2664]	; 0xa68
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d906      	bls.n	800e5ae <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8spinOnceEv+0x3dc>
      requestSyncTime();
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f85b 	bl	800e65c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	f8c3 2a68 	str.w	r2, [r3, #2664]	; 0xa68
    return SPIN_OK;
 800e5ae:	2300      	movs	r3, #0
  }
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE12get_ros_timeEm>:
  Time get_ros_time(uint32_t ms)
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
    Time current_time;
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7fb fe2e 	bl	800a226 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a13      	ldr	r2, [pc, #76]	; (800e61c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE12get_ros_timeEm+0x64>)
 800e5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e5d2:	099a      	lsrs	r2, r3, #6
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 800e5da:	441a      	add	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE12get_ros_timeEm+0x64>)
 800e5e4:	fba3 1302 	umull	r1, r3, r3, r2
 800e5e8:	099b      	lsrs	r3, r3, #6
 800e5ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e5ee:	fb01 f303 	mul.w	r3, r1, r3
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	4a0a      	ldr	r2, [pc, #40]	; (800e620 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE12get_ros_timeEm+0x68>)
 800e5f6:	fb02 f203 	mul.w	r2, r2, r3
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
 800e600:	441a      	add	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	3304      	adds	r3, #4
 800e60a:	4619      	mov	r1, r3
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7fa fde5 	bl	80091dc <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 800e612:	bf00      	nop
  }
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	10624dd3 	.word	0x10624dd3
 800e620:	000f4240 	.word	0x000f4240

0800e624 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800e624:	b580      	push	{r7, lr}
 800e626:	b088      	sub	sp, #32
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	460b      	mov	r3, r1
 800e62e:	607a      	str	r2, [r7, #4]
 800e630:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800e632:	f107 0314 	add.w	r3, r7, #20
 800e636:	4618      	mov	r0, r3
 800e638:	f7fc f8ca 	bl	800a7d0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800e63c:	7afb      	ldrb	r3, [r7, #11]
 800e63e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f107 0214 	add.w	r2, r7, #20
 800e64e:	2107      	movs	r1, #7
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	4798      	blx	r3
  }
 800e654:	bf00      	nop
 800e656:	3720      	adds	r7, #32
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800e664:	f107 030c 	add.w	r3, r7, #12
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fb fdfd 	bl	800a268 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f107 020c 	add.w	r2, r7, #12
 800e678:	210a      	movs	r1, #10
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	4798      	blx	r3
    rt_time = hardware_.time();
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	3304      	adds	r3, #4
 800e682:	4618      	mov	r0, r3
 800e684:	f7fc fd67 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800e688:	4602      	mov	r2, r0
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
  }
 800e690:	bf00      	nop
 800e692:	3718      	adds	r7, #24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv>:
  void negotiateTopics()
 800e698:	b590      	push	{r4, r7, lr}
 800e69a:	b08b      	sub	sp, #44	; 0x2c
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 800e6a0:	f107 030c 	add.w	r3, r7, #12
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fb fecf 	bl	800a448 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	2b07      	cmp	r3, #7
 800e6b2:	dc63      	bgt.n	800e77c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d056      	beq.n	800e774 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4413      	add	r3, r2
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	6859      	ldr	r1, [r3, #4]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4413      	add	r3, r2
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3308      	adds	r3, #8
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4608      	mov	r0, r1
 800e714:	4798      	blx	r3
 800e716:	4603      	mov	r3, r0
 800e718:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	6859      	ldr	r1, [r3, #4]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	330c      	adds	r3, #12
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4608      	mov	r0, r1
 800e742:	4798      	blx	r3
 800e744:	4603      	mov	r3, r0
 800e746:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800e748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e74c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681c      	ldr	r4, [r3, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e758:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	f7fc fbd1 	bl	800af0a <_ZN3ros9Publisher15getEndpointTypeEv>
 800e768:	4601      	mov	r1, r0
 800e76a:	f107 030c 	add.w	r3, r7, #12
 800e76e:	461a      	mov	r2, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e776:	3301      	adds	r3, #1
 800e778:	627b      	str	r3, [r7, #36]	; 0x24
 800e77a:	e798      	b.n	800e6ae <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800e77c:	2300      	movs	r3, #0
 800e77e:	627b      	str	r3, [r7, #36]	; 0x24
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	2b01      	cmp	r3, #1
 800e784:	dc68      	bgt.n	800e858 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv+0x1c0>
      if (subscribers[i] != 0) // non-empty slot
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4413      	add	r3, r2
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d05b      	beq.n	800e850 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv+0x1b8>
        ti.topic_id = subscribers[i]->id_;
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	6859      	ldr	r1, [r3, #4]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3308      	adds	r3, #8
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4608      	mov	r0, r1
 800e7e2:	4798      	blx	r3
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	4413      	add	r3, r2
 800e7f4:	6859      	ldr	r1, [r3, #4]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	330c      	adds	r3, #12
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4608      	mov	r0, r1
 800e80c:	4798      	blx	r3
 800e80e:	4603      	mov	r3, r0
 800e810:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800e812:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e816:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681c      	ldr	r4, [r3, #0]
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	4413      	add	r3, r2
 800e82a:	6859      	ldr	r1, [r3, #4]
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e830:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4413      	add	r3, r2
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3304      	adds	r3, #4
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4608      	mov	r0, r1
 800e842:	4798      	blx	r3
 800e844:	4601      	mov	r1, r0
 800e846:	f107 030c 	add.w	r3, r7, #12
 800e84a:	461a      	mov	r2, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	3301      	adds	r3, #1
 800e854:	627b      	str	r3, [r7, #36]	; 0x24
 800e856:	e793      	b.n	800e780 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2a64 	strb.w	r2, [r3, #2660]	; 0xa64
  }
 800e860:	bf00      	nop
 800e862:	372c      	adds	r7, #44	; 0x2c
 800e864:	46bd      	mov	sp, r7
 800e866:	bd90      	pop	{r4, r7, pc}

0800e868 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800e872:	f107 0308 	add.w	r3, r7, #8
 800e876:	4618      	mov	r0, r3
 800e878:	f7fb fcf6 	bl	800a268 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3304      	adds	r3, #4
 800e880:	4618      	mov	r0, r3
 800e882:	f7fc fc68 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800e886:	4602      	mov	r2, r0
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
 800e88e:	1ad3      	subs	r3, r2, r3
 800e890:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800e892:	f107 0308 	add.w	r3, r7, #8
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fb fd55 	bl	800a348 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	4915      	ldr	r1, [pc, #84]	; (800e8f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8syncTimeEPh+0x90>)
 800e8a4:	fba1 1303 	umull	r1, r3, r1, r3
 800e8a8:	099b      	lsrs	r3, r3, #6
 800e8aa:	4413      	add	r3, r2
 800e8ac:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800e8ae:	6939      	ldr	r1, [r7, #16]
 800e8b0:	697a      	ldr	r2, [r7, #20]
 800e8b2:	4b11      	ldr	r3, [pc, #68]	; (800e8f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8syncTimeEPh+0x90>)
 800e8b4:	fba3 0302 	umull	r0, r3, r3, r2
 800e8b8:	099b      	lsrs	r3, r3, #6
 800e8ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e8be:	fb00 f303 	mul.w	r3, r0, r3
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	4a0d      	ldr	r2, [pc, #52]	; (800e8fc <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8syncTimeEPh+0x94>)
 800e8c6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ca:	440b      	add	r3, r1
 800e8cc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800e8ce:	f107 0308 	add.w	r3, r7, #8
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f8a4 	bl	800ea24 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fc fc38 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8c3 2a6c 	str.w	r2, [r3, #2668]	; 0xa6c
  }
 800e8ee:	bf00      	nop
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	10624dd3 	.word	0x10624dd3
 800e8fc:	000f4240 	.word	0x000f4240

0800e900 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 800e900:	b580      	push	{r7, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2b63      	cmp	r3, #99	; 0x63
 800e910:	dd09      	ble.n	800e926 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x26>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f893 3a64 	ldrb.w	r3, [r3, #2660]	; 0xa64
 800e918:	f083 0301 	eor.w	r3, r3, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d001      	beq.n	800e926 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800e922:	2300      	movs	r3, #0
 800e924:	e077      	b.n	800ea16 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x116>
    int l = msg->serialize(message_out + 7);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800e932:	3207      	adds	r2, #7
 800e934:	4611      	mov	r1, r2
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	4798      	blx	r3
 800e93a:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	22ff      	movs	r2, #255	; 0xff
 800e940:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	22fe      	movs	r2, #254	; 0xfe
 800e948:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	b29b      	uxth	r3, r3
 800e95a:	121b      	asrs	r3, r3, #8
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800e970:	4413      	add	r3, r2
 800e972:	b2db      	uxtb	r3, r3
 800e974:	43db      	mvns	r3, r3
 800e976:	b2da      	uxtb	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	b2da      	uxtb	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	b21b      	sxth	r3, r3
 800e98c:	121b      	asrs	r3, r3, #8
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800e99a:	2305      	movs	r3, #5
 800e99c:	61bb      	str	r3, [r7, #24]
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	3306      	adds	r3, #6
 800e9a2:	69ba      	ldr	r2, [r7, #24]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	dc0d      	bgt.n	800e9c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	61bb      	str	r3, [r7, #24]
 800e9c2:	e7ec      	b.n	800e99e <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	3307      	adds	r3, #7
 800e9c8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	425a      	negs	r2, r3
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	b2d2      	uxtb	r2, r2
 800e9d2:	bf58      	it	pl
 800e9d4:	4253      	negpl	r3, r2
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	1c59      	adds	r1, r3, #1
 800e9dc:	6179      	str	r1, [r7, #20]
 800e9de:	43d2      	mvns	r2, r2
 800e9e0:	b2d1      	uxtb	r1, r2
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	460a      	mov	r2, r1
 800e9e8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9f2:	dc0a      	bgt.n	800ea0a <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x10a>
      hardware_.write(message_out, l);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	1d18      	adds	r0, r3, #4
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	4619      	mov	r1, r3
 800ea02:	f7fc fb61 	bl	800b0c8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	e005      	b.n	800ea16 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x116>
      logerror("Message from device dropped: message larger than buffer.");
 800ea0a:	4905      	ldr	r1, [pc, #20]	; (800ea20 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE7publishEiPKNS_3MsgE+0x120>)
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f000 f849 	bl	800eaa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8logerrorEPKc>
      return -1;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 800ea16:	4618      	mov	r0, r3
 800ea18:	3720      	adds	r7, #32
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	0800f5bc 	.word	0x0800f5bc

0800ea24 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	3304      	adds	r3, #4
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fc fb8f 	bl	800b156 <_ZN13STM32Hardware4timeEv>
 800ea38:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	4915      	ldr	r1, [pc, #84]	; (800ea98 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE6setNowERNS_4TimeE+0x74>)
 800ea42:	fba1 1303 	umull	r1, r3, r1, r3
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	1e5a      	subs	r2, r3, #1
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	6859      	ldr	r1, [r3, #4]
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	4b0f      	ldr	r3, [pc, #60]	; (800ea98 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE6setNowERNS_4TimeE+0x74>)
 800ea5a:	fba3 0302 	umull	r0, r3, r3, r2
 800ea5e:	099b      	lsrs	r3, r3, #6
 800ea60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ea64:	fb00 f303 	mul.w	r3, r0, r3
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	4a0c      	ldr	r2, [pc, #48]	; (800ea9c <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE6setNowERNS_4TimeE+0x78>)
 800ea6c:	fb02 f303 	mul.w	r3, r2, r3
 800ea70:	1aca      	subs	r2, r1, r3
 800ea72:	4b0b      	ldr	r3, [pc, #44]	; (800eaa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE6setNowERNS_4TimeE+0x7c>)
 800ea74:	4413      	add	r3, r2
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    normalizeSecNSec(sec_offset, nsec_offset);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f503 62a3 	add.w	r2, r3, #1304	; 0x518
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7fa fba6 	bl	80091dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800ea90:	bf00      	nop
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	10624dd3 	.word	0x10624dd3
 800ea9c:	000f4240 	.word	0x000f4240
 800eaa0:	3b9aca00 	.word	0x3b9aca00

0800eaa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800eaae:	683a      	ldr	r2, [r7, #0]
 800eab0:	2103      	movs	r1, #3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff fdb6 	bl	800e624 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE3logEcPKc>
  }
 800eab8:	bf00      	nop
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <_Z41__static_initialization_and_destruction_0ii>:
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d137      	bne.n	800eb40 <_Z41__static_initialization_and_destruction_0ii+0x80>
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d132      	bne.n	800eb40 <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 800eada:	481b      	ldr	r0, [pc, #108]	; (800eb48 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800eadc:	f7ff f9e0 	bl	800dea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EEC1Ev>
geometry_msgs::Pose2D odom_pose2D;
 800eae0:	481a      	ldr	r0, [pc, #104]	; (800eb4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800eae2:	f7fd fd6d 	bl	800c5c0 <_ZN13geometry_msgs6Pose2DC1Ev>
ros::Publisher odom_pose_pub("odom_pose2D", &odom_pose2D);
 800eae6:	2300      	movs	r3, #0
 800eae8:	4a18      	ldr	r2, [pc, #96]	; (800eb4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800eaea:	4919      	ldr	r1, [pc, #100]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800eaec:	4819      	ldr	r0, [pc, #100]	; (800eb54 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800eaee:	f7fc f9e1 	bl	800aeb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TwistStamped odom_velocity;
 800eaf2:	4819      	ldr	r0, [pc, #100]	; (800eb58 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800eaf4:	f7fe ff10 	bl	800d918 <_ZN13geometry_msgs12TwistStampedC1Ev>
ros::Publisher odom_velocity_pub("odom_velocity", &odom_velocity);
 800eaf8:	2300      	movs	r3, #0
 800eafa:	4a17      	ldr	r2, [pc, #92]	; (800eb58 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800eafc:	4917      	ldr	r1, [pc, #92]	; (800eb5c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800eafe:	4818      	ldr	r0, [pc, #96]	; (800eb60 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800eb00:	f7fc f9d8 	bl	800aeb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::JointState joint_states;
 800eb04:	4817      	ldr	r0, [pc, #92]	; (800eb64 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800eb06:	f7fc fdab 	bl	800b660 <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher joint_states_pub("joint_states", &joint_states);
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	4a15      	ldr	r2, [pc, #84]	; (800eb64 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800eb0e:	4916      	ldr	r1, [pc, #88]	; (800eb68 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800eb10:	4816      	ldr	r0, [pc, #88]	; (800eb6c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800eb12:	f7fc f9cf 	bl	800aeb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float32 bat_voltage;
 800eb16:	4816      	ldr	r0, [pc, #88]	; (800eb70 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800eb18:	f7fc fb28 	bl	800b16c <_ZN8std_msgs7Float32C1Ev>
ros::Publisher battery_vol_pub("battery_voltage", &bat_voltage);
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	4a14      	ldr	r2, [pc, #80]	; (800eb70 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800eb20:	4914      	ldr	r1, [pc, #80]	; (800eb74 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800eb22:	4815      	ldr	r0, [pc, #84]	; (800eb78 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800eb24:	f7fc f9c6 	bl	800aeb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", commandVelocityCallback);
 800eb28:	2301      	movs	r3, #1
 800eb2a:	4a14      	ldr	r2, [pc, #80]	; (800eb7c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800eb2c:	4914      	ldr	r1, [pc, #80]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800eb2e:	4815      	ldr	r0, [pc, #84]	; (800eb84 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800eb30:	f7ff fa46 	bl	800dfc0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Empty> reset_sub("reset", resetCallback);
 800eb34:	2301      	movs	r3, #1
 800eb36:	4a14      	ldr	r2, [pc, #80]	; (800eb88 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800eb38:	4914      	ldr	r1, [pc, #80]	; (800eb8c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800eb3a:	4815      	ldr	r0, [pc, #84]	; (800eb90 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800eb3c:	f7ff fa64 	bl	800e008 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
}
 800eb40:	bf00      	nop
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20001648 	.word	0x20001648
 800eb4c:	200020e8 	.word	0x200020e8
 800eb50:	0800f5f8 	.word	0x0800f5f8
 800eb54:	20002108 	.word	0x20002108
 800eb58:	20002120 	.word	0x20002120
 800eb5c:	0800f604 	.word	0x0800f604
 800eb60:	20002180 	.word	0x20002180
 800eb64:	20002198 	.word	0x20002198
 800eb68:	0800f614 	.word	0x0800f614
 800eb6c:	200021f0 	.word	0x200021f0
 800eb70:	20002204 	.word	0x20002204
 800eb74:	0800f624 	.word	0x0800f624
 800eb78:	2000220c 	.word	0x2000220c
 800eb7c:	0800da65 	.word	0x0800da65
 800eb80:	0800f634 	.word	0x0800f634
 800eb84:	20002220 	.word	0x20002220
 800eb88:	0800dab9 	.word	0x0800dab9
 800eb8c:	0800f63c 	.word	0x0800f63c
 800eb90:	20002280 	.word	0x20002280

0800eb94 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	330c      	adds	r3, #12
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fc fb9d 	bl	800b2e4 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	320c      	adds	r2, #12
 800ebb2:	4610      	mov	r0, r2
 800ebb4:	4798      	blx	r3
  }
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800ebbe:	b480      	push	{r7}
 800ebc0:	b083      	sub	sp, #12
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	695b      	ldr	r3, [r3, #20]
  }
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b082      	sub	sp, #8
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	330c      	adds	r3, #12
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fc fb8c 	bl	800b300 <_ZN8std_msgs5Empty7getTypeEv>
 800ebe8:	4603      	mov	r3, r0
  }
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	330c      	adds	r3, #12
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fc fb8c 	bl	800b31c <_ZN8std_msgs5Empty6getMD5Ev>
 800ec04:	4603      	mov	r3, r0
  }
 800ec06:	4618      	mov	r0, r3
 800ec08:	3708      	adds	r7, #8
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b082      	sub	sp, #8
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3310      	adds	r3, #16
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fe fe38 	bl	800d894 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	3210      	adds	r2, #16
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4798      	blx	r3
  }
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800ec44:	4618      	mov	r0, r3
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3310      	adds	r3, #16
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe fe3f 	bl	800d8e0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800ec62:	4603      	mov	r3, r0
  }
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	3310      	adds	r3, #16
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe fe3f 	bl	800d8fc <_ZN13geometry_msgs5Twist6getMD5Ev>
 800ec7e:	4603      	mov	r3, r0
  }
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <_ZN3ros11NodeHandle_I13STM32HardwareLi2ELi8ELi256ELi1024EE9connectedEv>:
  virtual bool connected()
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
    return configured_;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f893 3a64 	ldrb.w	r3, [r3, #2660]	; 0xa64
  };
 800ec96:	4618      	mov	r0, r3
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr

0800eca2 <_GLOBAL__sub_I_nh>:
 800eca2:	b580      	push	{r7, lr}
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ecaa:	2001      	movs	r0, #1
 800ecac:	f7ff ff08 	bl	800eac0 <_Z41__static_initialization_and_destruction_0ii>
 800ecb0:	bd80      	pop	{r7, pc}
	...

0800ecb4 <_ZN11simple_math3sinEf>:
	65219, 65293, 65357, 65412, 65456, 65491, 65515, 65530,
	65535, 0
};

float simple_math::sin(float x)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b087      	sub	sp, #28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	ed87 0a01 	vstr	s0, [r7, #4]
    long ix, subix, sign, tval;
    ix = (int)(x * (I_PI / simple_math::PI));   //単位変換
 800ecbe:	edd7 7a01 	vldr	s15, [r7, #4]
 800ecc2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ed60 <_ZN11simple_math3sinEf+0xac>
 800ecc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecce:	ee17 3a90 	vmov	r3, s15
 800ecd2:	617b      	str	r3, [r7, #20]
    sign = ix & I_PI;              //第3,第4象限である
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ecda:	613b      	str	r3, [r7, #16]
    ix &= (I_PI - 1);              //第1,第2象限に限定
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	617b      	str	r3, [r7, #20]
    if(ix > I_HPI) ix = I_PI - ix; //第1象限に限定
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ece8:	dd03      	ble.n	800ecf2 <_ZN11simple_math3sinEf+0x3e>
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800ecf0:	617b      	str	r3, [r7, #20]

    subix = ix & (SUBINDEX - 1);   //線形補完に用いるサブインデックス
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	60fb      	str	r3, [r7, #12]
    ix >>= SUBBIT;                 //テーブル番号に変換
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	121b      	asrs	r3, r3, #8
 800ecfc:	617b      	str	r3, [r7, #20]

    //線形補完
    tval = ((long)sin_table[ix]   * (SUBINDEX - subix)
 800ecfe:	4a19      	ldr	r2, [pc, #100]	; (800ed64 <_ZN11simple_math3sinEf+0xb0>)
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed06:	461a      	mov	r2, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ed0e:	fb03 f202 	mul.w	r2, r3, r2
          + (long)sin_table[ix+1] * subix);
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	3301      	adds	r3, #1
 800ed16:	4913      	ldr	r1, [pc, #76]	; (800ed64 <_ZN11simple_math3sinEf+0xb0>)
 800ed18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	fb03 f301 	mul.w	r3, r3, r1
    tval = ((long)sin_table[ix]   * (SUBINDEX - subix)
 800ed24:	4413      	add	r3, r2
 800ed26:	60bb      	str	r3, [r7, #8]

    return (sign ? -tval : tval) / (SUBINDEX * 65535.f);
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d006      	beq.n	800ed3c <_ZN11simple_math3sinEf+0x88>
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	425b      	negs	r3, r3
 800ed32:	ee07 3a90 	vmov	s15, r3
 800ed36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed3a:	e004      	b.n	800ed46 <_ZN11simple_math3sinEf+0x92>
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	ee07 3a90 	vmov	s15, r3
 800ed42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed46:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ed68 <_ZN11simple_math3sinEf+0xb4>
 800ed4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ed4e:	eef0 7a66 	vmov.f32	s15, s13
}
 800ed52:	eeb0 0a67 	vmov.f32	s0, s15
 800ed56:	371c      	adds	r7, #28
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	46a2f984 	.word	0x46a2f984
 800ed64:	0800f840 	.word	0x0800f840
 800ed68:	4b7fff00 	.word	0x4b7fff00

0800ed6c <_ZN11simple_math3cosEf>:

float simple_math::cos(float x)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	ed87 0a01 	vstr	s0, [r7, #4]
	return simple_math::sin(x + simple_math::PI/2);
 800ed76:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed7a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ed98 <_ZN11simple_math3cosEf+0x2c>
 800ed7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed82:	eeb0 0a67 	vmov.f32	s0, s15
 800ed86:	f7ff ff95 	bl	800ecb4 <_ZN11simple_math3sinEf>
 800ed8a:	eef0 7a40 	vmov.f32	s15, s0
}
 800ed8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	3fc90fda 	.word	0x3fc90fda

0800ed9c <init_imu>:

#define WHO_AM_I_VAL 0x12

uint8_t who_am_i;

void init_imu(){
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0

	MX_SPI1_Init();
 800eda0:	f7f1 fd7e 	bl	80008a0 <MX_SPI1_Init>
	writeByte(CONFIG, 0x00);
 800eda4:	2100      	movs	r1, #0
 800eda6:	201a      	movs	r0, #26
 800eda8:	f000 f846 	bl	800ee38 <writeByte>
	writeByte(PWR_MGMT_1, 0x80);
 800edac:	2180      	movs	r1, #128	; 0x80
 800edae:	206b      	movs	r0, #107	; 0x6b
 800edb0:	f000 f842 	bl	800ee38 <writeByte>
	writeByte(PWR_MGMT_1, 0x01);
 800edb4:	2101      	movs	r1, #1
 800edb6:	206b      	movs	r0, #107	; 0x6b
 800edb8:	f000 f83e 	bl	800ee38 <writeByte>
	who_am_i = readByte(WHO_AM_I);
 800edbc:	2075      	movs	r0, #117	; 0x75
 800edbe:	f000 f809 	bl	800edd4 <readByte>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	4b02      	ldr	r3, [pc, #8]	; (800edd0 <init_imu+0x34>)
 800edc8:	701a      	strb	r2, [r3, #0]
//	if (who_am_i != WHO_AM_I_VAL) {
//		while(1);
//	}

}
 800edca:	bf00      	nop
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20001644 	.word	0x20001644

0800edd4 <readByte>:

uint8_t readByte(uint8_t reg)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af02      	add	r7, sp, #8
 800edda:	4603      	mov	r3, r0
 800eddc:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg | 0x80;
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	723b      	strb	r3, [r7, #8]
	tx_data[1] = 0x00;  // dummy
 800ede8:	2300      	movs	r3, #0
 800edea:	727b      	strb	r3, [r7, #9]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	2104      	movs	r1, #4
 800edf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800edf4:	f7f3 feaa 	bl	8002b4c <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi1);
 800edf8:	4b0e      	ldr	r3, [pc, #56]	; (800ee34 <readByte+0x60>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	4b0d      	ldr	r3, [pc, #52]	; (800ee34 <readByte+0x60>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee06:	601a      	str	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800ee08:	f107 020c 	add.w	r2, r7, #12
 800ee0c:	f107 0108 	add.w	r1, r7, #8
 800ee10:	2364      	movs	r3, #100	; 0x64
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	2302      	movs	r3, #2
 800ee16:	4807      	ldr	r0, [pc, #28]	; (800ee34 <readByte+0x60>)
 800ee18:	f7f5 f8c5 	bl	8003fa6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	2104      	movs	r1, #4
 800ee20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee24:	f7f3 fe92 	bl	8002b4c <HAL_GPIO_WritePin>

	return rx_data[1];
 800ee28:	7b7b      	ldrb	r3, [r7, #13]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	2000233c 	.word	0x2000233c

0800ee38 <writeByte>:

void writeByte(uint8_t reg, uint8_t data)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b086      	sub	sp, #24
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	4603      	mov	r3, r0
 800ee40:	460a      	mov	r2, r1
 800ee42:	71fb      	strb	r3, [r7, #7]
 800ee44:	4613      	mov	r3, r2
 800ee46:	71bb      	strb	r3, [r7, #6]
	uint8_t rx_data[2];
	uint8_t tx_data[2];

	tx_data[0] = reg & 0x7F;
 800ee48:	79fb      	ldrb	r3, [r7, #7]
 800ee4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	723b      	strb	r3, [r7, #8]
	tx_data[1] = data;  // write data
 800ee52:	79bb      	ldrb	r3, [r7, #6]
 800ee54:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 800ee56:	2200      	movs	r2, #0
 800ee58:	2104      	movs	r1, #4
 800ee5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee5e:	f7f3 fe75 	bl	8002b4c <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi1);
 800ee62:	4b0e      	ldr	r3, [pc, #56]	; (800ee9c <writeByte+0x64>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	4b0c      	ldr	r3, [pc, #48]	; (800ee9c <writeByte+0x64>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee70:	601a      	str	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1);
 800ee72:	f107 020c 	add.w	r2, r7, #12
 800ee76:	f107 0108 	add.w	r1, r7, #8
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	2302      	movs	r3, #2
 800ee80:	4806      	ldr	r0, [pc, #24]	; (800ee9c <writeByte+0x64>)
 800ee82:	f7f5 f890 	bl	8003fa6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 800ee86:	2201      	movs	r2, #1
 800ee88:	2104      	movs	r1, #4
 800ee8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ee8e:	f7f3 fe5d 	bl	8002b4c <HAL_GPIO_WritePin>
}
 800ee92:	bf00      	nop
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	2000233c 	.word	0x2000233c

0800eea0 <_Znwj>:
 800eea0:	2801      	cmp	r0, #1
 800eea2:	bf38      	it	cc
 800eea4:	2001      	movcc	r0, #1
 800eea6:	b510      	push	{r4, lr}
 800eea8:	4604      	mov	r4, r0
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f858 	bl	800ef60 <malloc>
 800eeb0:	b930      	cbnz	r0, 800eec0 <_Znwj+0x20>
 800eeb2:	f000 f81b 	bl	800eeec <_ZSt15get_new_handlerv>
 800eeb6:	b908      	cbnz	r0, 800eebc <_Znwj+0x1c>
 800eeb8:	f000 f820 	bl	800eefc <abort>
 800eebc:	4780      	blx	r0
 800eebe:	e7f4      	b.n	800eeaa <_Znwj+0xa>
 800eec0:	bd10      	pop	{r4, pc}

0800eec2 <__cxa_pure_virtual>:
 800eec2:	b508      	push	{r3, lr}
 800eec4:	f000 f80c 	bl	800eee0 <_ZSt9terminatev>

0800eec8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eec8:	b508      	push	{r3, lr}
 800eeca:	4780      	blx	r0
 800eecc:	f000 f816 	bl	800eefc <abort>

0800eed0 <_ZSt13get_terminatev>:
 800eed0:	4b02      	ldr	r3, [pc, #8]	; (800eedc <_ZSt13get_terminatev+0xc>)
 800eed2:	6818      	ldr	r0, [r3, #0]
 800eed4:	f3bf 8f5b 	dmb	ish
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	20000040 	.word	0x20000040

0800eee0 <_ZSt9terminatev>:
 800eee0:	b508      	push	{r3, lr}
 800eee2:	f7ff fff5 	bl	800eed0 <_ZSt13get_terminatev>
 800eee6:	f7ff ffef 	bl	800eec8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800eeec <_ZSt15get_new_handlerv>:
 800eeec:	4b02      	ldr	r3, [pc, #8]	; (800eef8 <_ZSt15get_new_handlerv+0xc>)
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	f3bf 8f5b 	dmb	ish
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	200022e0 	.word	0x200022e0

0800eefc <abort>:
 800eefc:	b508      	push	{r3, lr}
 800eefe:	2006      	movs	r0, #6
 800ef00:	f000 f936 	bl	800f170 <raise>
 800ef04:	2001      	movs	r0, #1
 800ef06:	f7f1 fe55 	bl	8000bb4 <_exit>
	...

0800ef0c <__errno>:
 800ef0c:	4b01      	ldr	r3, [pc, #4]	; (800ef14 <__errno+0x8>)
 800ef0e:	6818      	ldr	r0, [r3, #0]
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	20000044 	.word	0x20000044

0800ef18 <__libc_init_array>:
 800ef18:	b570      	push	{r4, r5, r6, lr}
 800ef1a:	4d0d      	ldr	r5, [pc, #52]	; (800ef50 <__libc_init_array+0x38>)
 800ef1c:	4c0d      	ldr	r4, [pc, #52]	; (800ef54 <__libc_init_array+0x3c>)
 800ef1e:	1b64      	subs	r4, r4, r5
 800ef20:	10a4      	asrs	r4, r4, #2
 800ef22:	2600      	movs	r6, #0
 800ef24:	42a6      	cmp	r6, r4
 800ef26:	d109      	bne.n	800ef3c <__libc_init_array+0x24>
 800ef28:	4d0b      	ldr	r5, [pc, #44]	; (800ef58 <__libc_init_array+0x40>)
 800ef2a:	4c0c      	ldr	r4, [pc, #48]	; (800ef5c <__libc_init_array+0x44>)
 800ef2c:	f000 f978 	bl	800f220 <_init>
 800ef30:	1b64      	subs	r4, r4, r5
 800ef32:	10a4      	asrs	r4, r4, #2
 800ef34:	2600      	movs	r6, #0
 800ef36:	42a6      	cmp	r6, r4
 800ef38:	d105      	bne.n	800ef46 <__libc_init_array+0x2e>
 800ef3a:	bd70      	pop	{r4, r5, r6, pc}
 800ef3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef40:	4798      	blx	r3
 800ef42:	3601      	adds	r6, #1
 800ef44:	e7ee      	b.n	800ef24 <__libc_init_array+0xc>
 800ef46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef4a:	4798      	blx	r3
 800ef4c:	3601      	adds	r6, #1
 800ef4e:	e7f2      	b.n	800ef36 <__libc_init_array+0x1e>
 800ef50:	0800f944 	.word	0x0800f944
 800ef54:	0800f944 	.word	0x0800f944
 800ef58:	0800f944 	.word	0x0800f944
 800ef5c:	0800f958 	.word	0x0800f958

0800ef60 <malloc>:
 800ef60:	4b02      	ldr	r3, [pc, #8]	; (800ef6c <malloc+0xc>)
 800ef62:	4601      	mov	r1, r0
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	f000 b869 	b.w	800f03c <_malloc_r>
 800ef6a:	bf00      	nop
 800ef6c:	20000044 	.word	0x20000044

0800ef70 <memcpy>:
 800ef70:	440a      	add	r2, r1
 800ef72:	4291      	cmp	r1, r2
 800ef74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef78:	d100      	bne.n	800ef7c <memcpy+0xc>
 800ef7a:	4770      	bx	lr
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef86:	4291      	cmp	r1, r2
 800ef88:	d1f9      	bne.n	800ef7e <memcpy+0xe>
 800ef8a:	bd10      	pop	{r4, pc}

0800ef8c <memset>:
 800ef8c:	4402      	add	r2, r0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d100      	bne.n	800ef96 <memset+0xa>
 800ef94:	4770      	bx	lr
 800ef96:	f803 1b01 	strb.w	r1, [r3], #1
 800ef9a:	e7f9      	b.n	800ef90 <memset+0x4>

0800ef9c <_free_r>:
 800ef9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef9e:	2900      	cmp	r1, #0
 800efa0:	d048      	beq.n	800f034 <_free_r+0x98>
 800efa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efa6:	9001      	str	r0, [sp, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f1a1 0404 	sub.w	r4, r1, #4
 800efae:	bfb8      	it	lt
 800efb0:	18e4      	addlt	r4, r4, r3
 800efb2:	f000 f8f9 	bl	800f1a8 <__malloc_lock>
 800efb6:	4a20      	ldr	r2, [pc, #128]	; (800f038 <_free_r+0x9c>)
 800efb8:	9801      	ldr	r0, [sp, #4]
 800efba:	6813      	ldr	r3, [r2, #0]
 800efbc:	4615      	mov	r5, r2
 800efbe:	b933      	cbnz	r3, 800efce <_free_r+0x32>
 800efc0:	6063      	str	r3, [r4, #4]
 800efc2:	6014      	str	r4, [r2, #0]
 800efc4:	b003      	add	sp, #12
 800efc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efca:	f000 b8f3 	b.w	800f1b4 <__malloc_unlock>
 800efce:	42a3      	cmp	r3, r4
 800efd0:	d90b      	bls.n	800efea <_free_r+0x4e>
 800efd2:	6821      	ldr	r1, [r4, #0]
 800efd4:	1862      	adds	r2, r4, r1
 800efd6:	4293      	cmp	r3, r2
 800efd8:	bf04      	itt	eq
 800efda:	681a      	ldreq	r2, [r3, #0]
 800efdc:	685b      	ldreq	r3, [r3, #4]
 800efde:	6063      	str	r3, [r4, #4]
 800efe0:	bf04      	itt	eq
 800efe2:	1852      	addeq	r2, r2, r1
 800efe4:	6022      	streq	r2, [r4, #0]
 800efe6:	602c      	str	r4, [r5, #0]
 800efe8:	e7ec      	b.n	800efc4 <_free_r+0x28>
 800efea:	461a      	mov	r2, r3
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	b10b      	cbz	r3, 800eff4 <_free_r+0x58>
 800eff0:	42a3      	cmp	r3, r4
 800eff2:	d9fa      	bls.n	800efea <_free_r+0x4e>
 800eff4:	6811      	ldr	r1, [r2, #0]
 800eff6:	1855      	adds	r5, r2, r1
 800eff8:	42a5      	cmp	r5, r4
 800effa:	d10b      	bne.n	800f014 <_free_r+0x78>
 800effc:	6824      	ldr	r4, [r4, #0]
 800effe:	4421      	add	r1, r4
 800f000:	1854      	adds	r4, r2, r1
 800f002:	42a3      	cmp	r3, r4
 800f004:	6011      	str	r1, [r2, #0]
 800f006:	d1dd      	bne.n	800efc4 <_free_r+0x28>
 800f008:	681c      	ldr	r4, [r3, #0]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	6053      	str	r3, [r2, #4]
 800f00e:	4421      	add	r1, r4
 800f010:	6011      	str	r1, [r2, #0]
 800f012:	e7d7      	b.n	800efc4 <_free_r+0x28>
 800f014:	d902      	bls.n	800f01c <_free_r+0x80>
 800f016:	230c      	movs	r3, #12
 800f018:	6003      	str	r3, [r0, #0]
 800f01a:	e7d3      	b.n	800efc4 <_free_r+0x28>
 800f01c:	6825      	ldr	r5, [r4, #0]
 800f01e:	1961      	adds	r1, r4, r5
 800f020:	428b      	cmp	r3, r1
 800f022:	bf04      	itt	eq
 800f024:	6819      	ldreq	r1, [r3, #0]
 800f026:	685b      	ldreq	r3, [r3, #4]
 800f028:	6063      	str	r3, [r4, #4]
 800f02a:	bf04      	itt	eq
 800f02c:	1949      	addeq	r1, r1, r5
 800f02e:	6021      	streq	r1, [r4, #0]
 800f030:	6054      	str	r4, [r2, #4]
 800f032:	e7c7      	b.n	800efc4 <_free_r+0x28>
 800f034:	b003      	add	sp, #12
 800f036:	bd30      	pop	{r4, r5, pc}
 800f038:	200022e4 	.word	0x200022e4

0800f03c <_malloc_r>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	1ccd      	adds	r5, r1, #3
 800f040:	f025 0503 	bic.w	r5, r5, #3
 800f044:	3508      	adds	r5, #8
 800f046:	2d0c      	cmp	r5, #12
 800f048:	bf38      	it	cc
 800f04a:	250c      	movcc	r5, #12
 800f04c:	2d00      	cmp	r5, #0
 800f04e:	4606      	mov	r6, r0
 800f050:	db01      	blt.n	800f056 <_malloc_r+0x1a>
 800f052:	42a9      	cmp	r1, r5
 800f054:	d903      	bls.n	800f05e <_malloc_r+0x22>
 800f056:	230c      	movs	r3, #12
 800f058:	6033      	str	r3, [r6, #0]
 800f05a:	2000      	movs	r0, #0
 800f05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f05e:	f000 f8a3 	bl	800f1a8 <__malloc_lock>
 800f062:	4921      	ldr	r1, [pc, #132]	; (800f0e8 <_malloc_r+0xac>)
 800f064:	680a      	ldr	r2, [r1, #0]
 800f066:	4614      	mov	r4, r2
 800f068:	b99c      	cbnz	r4, 800f092 <_malloc_r+0x56>
 800f06a:	4f20      	ldr	r7, [pc, #128]	; (800f0ec <_malloc_r+0xb0>)
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	b923      	cbnz	r3, 800f07a <_malloc_r+0x3e>
 800f070:	4621      	mov	r1, r4
 800f072:	4630      	mov	r0, r6
 800f074:	f000 f844 	bl	800f100 <_sbrk_r>
 800f078:	6038      	str	r0, [r7, #0]
 800f07a:	4629      	mov	r1, r5
 800f07c:	4630      	mov	r0, r6
 800f07e:	f000 f83f 	bl	800f100 <_sbrk_r>
 800f082:	1c43      	adds	r3, r0, #1
 800f084:	d123      	bne.n	800f0ce <_malloc_r+0x92>
 800f086:	230c      	movs	r3, #12
 800f088:	6033      	str	r3, [r6, #0]
 800f08a:	4630      	mov	r0, r6
 800f08c:	f000 f892 	bl	800f1b4 <__malloc_unlock>
 800f090:	e7e3      	b.n	800f05a <_malloc_r+0x1e>
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	1b5b      	subs	r3, r3, r5
 800f096:	d417      	bmi.n	800f0c8 <_malloc_r+0x8c>
 800f098:	2b0b      	cmp	r3, #11
 800f09a:	d903      	bls.n	800f0a4 <_malloc_r+0x68>
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	441c      	add	r4, r3
 800f0a0:	6025      	str	r5, [r4, #0]
 800f0a2:	e004      	b.n	800f0ae <_malloc_r+0x72>
 800f0a4:	6863      	ldr	r3, [r4, #4]
 800f0a6:	42a2      	cmp	r2, r4
 800f0a8:	bf0c      	ite	eq
 800f0aa:	600b      	streq	r3, [r1, #0]
 800f0ac:	6053      	strne	r3, [r2, #4]
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f000 f880 	bl	800f1b4 <__malloc_unlock>
 800f0b4:	f104 000b 	add.w	r0, r4, #11
 800f0b8:	1d23      	adds	r3, r4, #4
 800f0ba:	f020 0007 	bic.w	r0, r0, #7
 800f0be:	1ac2      	subs	r2, r0, r3
 800f0c0:	d0cc      	beq.n	800f05c <_malloc_r+0x20>
 800f0c2:	1a1b      	subs	r3, r3, r0
 800f0c4:	50a3      	str	r3, [r4, r2]
 800f0c6:	e7c9      	b.n	800f05c <_malloc_r+0x20>
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	6864      	ldr	r4, [r4, #4]
 800f0cc:	e7cc      	b.n	800f068 <_malloc_r+0x2c>
 800f0ce:	1cc4      	adds	r4, r0, #3
 800f0d0:	f024 0403 	bic.w	r4, r4, #3
 800f0d4:	42a0      	cmp	r0, r4
 800f0d6:	d0e3      	beq.n	800f0a0 <_malloc_r+0x64>
 800f0d8:	1a21      	subs	r1, r4, r0
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f000 f810 	bl	800f100 <_sbrk_r>
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	d1dd      	bne.n	800f0a0 <_malloc_r+0x64>
 800f0e4:	e7cf      	b.n	800f086 <_malloc_r+0x4a>
 800f0e6:	bf00      	nop
 800f0e8:	200022e4 	.word	0x200022e4
 800f0ec:	200022e8 	.word	0x200022e8

0800f0f0 <realloc>:
 800f0f0:	4b02      	ldr	r3, [pc, #8]	; (800f0fc <realloc+0xc>)
 800f0f2:	460a      	mov	r2, r1
 800f0f4:	4601      	mov	r1, r0
 800f0f6:	6818      	ldr	r0, [r3, #0]
 800f0f8:	f000 b862 	b.w	800f1c0 <_realloc_r>
 800f0fc:	20000044 	.word	0x20000044

0800f100 <_sbrk_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d06      	ldr	r5, [pc, #24]	; (800f11c <_sbrk_r+0x1c>)
 800f104:	2300      	movs	r3, #0
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	602b      	str	r3, [r5, #0]
 800f10c:	f7f1 fd5c 	bl	8000bc8 <_sbrk>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_sbrk_r+0x1a>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_sbrk_r+0x1a>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	20002620 	.word	0x20002620

0800f120 <_raise_r>:
 800f120:	291f      	cmp	r1, #31
 800f122:	b538      	push	{r3, r4, r5, lr}
 800f124:	4604      	mov	r4, r0
 800f126:	460d      	mov	r5, r1
 800f128:	d904      	bls.n	800f134 <_raise_r+0x14>
 800f12a:	2316      	movs	r3, #22
 800f12c:	6003      	str	r3, [r0, #0]
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f136:	b112      	cbz	r2, 800f13e <_raise_r+0x1e>
 800f138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f13c:	b94b      	cbnz	r3, 800f152 <_raise_r+0x32>
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 f830 	bl	800f1a4 <_getpid_r>
 800f144:	462a      	mov	r2, r5
 800f146:	4601      	mov	r1, r0
 800f148:	4620      	mov	r0, r4
 800f14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f14e:	f000 b817 	b.w	800f180 <_kill_r>
 800f152:	2b01      	cmp	r3, #1
 800f154:	d00a      	beq.n	800f16c <_raise_r+0x4c>
 800f156:	1c59      	adds	r1, r3, #1
 800f158:	d103      	bne.n	800f162 <_raise_r+0x42>
 800f15a:	2316      	movs	r3, #22
 800f15c:	6003      	str	r3, [r0, #0]
 800f15e:	2001      	movs	r0, #1
 800f160:	e7e7      	b.n	800f132 <_raise_r+0x12>
 800f162:	2400      	movs	r4, #0
 800f164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f168:	4628      	mov	r0, r5
 800f16a:	4798      	blx	r3
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7e0      	b.n	800f132 <_raise_r+0x12>

0800f170 <raise>:
 800f170:	4b02      	ldr	r3, [pc, #8]	; (800f17c <raise+0xc>)
 800f172:	4601      	mov	r1, r0
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	f7ff bfd3 	b.w	800f120 <_raise_r>
 800f17a:	bf00      	nop
 800f17c:	20000044 	.word	0x20000044

0800f180 <_kill_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	; (800f1a0 <_kill_r+0x20>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	4611      	mov	r1, r2
 800f18c:	602b      	str	r3, [r5, #0]
 800f18e:	f7f1 fd01 	bl	8000b94 <_kill>
 800f192:	1c43      	adds	r3, r0, #1
 800f194:	d102      	bne.n	800f19c <_kill_r+0x1c>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b103      	cbz	r3, 800f19c <_kill_r+0x1c>
 800f19a:	6023      	str	r3, [r4, #0]
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	bf00      	nop
 800f1a0:	20002620 	.word	0x20002620

0800f1a4 <_getpid_r>:
 800f1a4:	f7f1 bcee 	b.w	8000b84 <_getpid>

0800f1a8 <__malloc_lock>:
 800f1a8:	4801      	ldr	r0, [pc, #4]	; (800f1b0 <__malloc_lock+0x8>)
 800f1aa:	f000 b82f 	b.w	800f20c <__retarget_lock_acquire_recursive>
 800f1ae:	bf00      	nop
 800f1b0:	20002628 	.word	0x20002628

0800f1b4 <__malloc_unlock>:
 800f1b4:	4801      	ldr	r0, [pc, #4]	; (800f1bc <__malloc_unlock+0x8>)
 800f1b6:	f000 b82a 	b.w	800f20e <__retarget_lock_release_recursive>
 800f1ba:	bf00      	nop
 800f1bc:	20002628 	.word	0x20002628

0800f1c0 <_realloc_r>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	460e      	mov	r6, r1
 800f1c8:	b921      	cbnz	r1, 800f1d4 <_realloc_r+0x14>
 800f1ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	f7ff bf34 	b.w	800f03c <_malloc_r>
 800f1d4:	b922      	cbnz	r2, 800f1e0 <_realloc_r+0x20>
 800f1d6:	f7ff fee1 	bl	800ef9c <_free_r>
 800f1da:	4625      	mov	r5, r4
 800f1dc:	4628      	mov	r0, r5
 800f1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e0:	f000 f816 	bl	800f210 <_malloc_usable_size_r>
 800f1e4:	42a0      	cmp	r0, r4
 800f1e6:	d20f      	bcs.n	800f208 <_realloc_r+0x48>
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	f7ff ff26 	bl	800f03c <_malloc_r>
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d0f2      	beq.n	800f1dc <_realloc_r+0x1c>
 800f1f6:	4631      	mov	r1, r6
 800f1f8:	4622      	mov	r2, r4
 800f1fa:	f7ff feb9 	bl	800ef70 <memcpy>
 800f1fe:	4631      	mov	r1, r6
 800f200:	4638      	mov	r0, r7
 800f202:	f7ff fecb 	bl	800ef9c <_free_r>
 800f206:	e7e9      	b.n	800f1dc <_realloc_r+0x1c>
 800f208:	4635      	mov	r5, r6
 800f20a:	e7e7      	b.n	800f1dc <_realloc_r+0x1c>

0800f20c <__retarget_lock_acquire_recursive>:
 800f20c:	4770      	bx	lr

0800f20e <__retarget_lock_release_recursive>:
 800f20e:	4770      	bx	lr

0800f210 <_malloc_usable_size_r>:
 800f210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f214:	1f18      	subs	r0, r3, #4
 800f216:	2b00      	cmp	r3, #0
 800f218:	bfbc      	itt	lt
 800f21a:	580b      	ldrlt	r3, [r1, r0]
 800f21c:	18c0      	addlt	r0, r0, r3
 800f21e:	4770      	bx	lr

0800f220 <_init>:
 800f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f222:	bf00      	nop
 800f224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f226:	bc08      	pop	{r3}
 800f228:	469e      	mov	lr, r3
 800f22a:	4770      	bx	lr

0800f22c <_fini>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr
